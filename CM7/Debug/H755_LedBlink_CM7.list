
H755_LedBlink_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004b94  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  08004e34  08004e34  00005e34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004eb8  08004eb8  00006088  2**0
                  CONTENTS
  4 .ARM          00000008  08004eb8  08004eb8  00005eb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004ec0  08004ec0  00006088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004ec0  08004ec0  00005ec0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004ec4  08004ec4  00005ec4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000088  24000000  08004ec8  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000224  24000088  08004f50  00006088  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  240002ac  08004f50  000062ac  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00006088  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010456  00000000  00000000  000060b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000220d  00000000  00000000  0001650c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c28  00000000  00000000  00018720  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000093e  00000000  00000000  00019348  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003a565  00000000  00000000  00019c86  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010a2b  00000000  00000000  000541eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0017cdeb  00000000  00000000  00064c16  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001e1a01  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000038ac  00000000  00000000  001e1a44  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004d  00000000  00000000  001e52f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000088 	.word	0x24000088
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08004e1c 	.word	0x08004e1c

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400008c 	.word	0x2400008c
 80002dc:	08004e1c 	.word	0x08004e1c

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295
 8000390:	f04f 30ff 	movne.w	r0, #4294967295
 8000394:	f000 b96a 	b.w	800066c <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9d08      	ldr	r5, [sp, #32]
 80003b6:	460c      	mov	r4, r1
 80003b8:	2b00      	cmp	r3, #0
 80003ba:	d14e      	bne.n	800045a <__udivmoddi4+0xaa>
 80003bc:	4694      	mov	ip, r2
 80003be:	458c      	cmp	ip, r1
 80003c0:	4686      	mov	lr, r0
 80003c2:	fab2 f282 	clz	r2, r2
 80003c6:	d962      	bls.n	800048e <__udivmoddi4+0xde>
 80003c8:	b14a      	cbz	r2, 80003de <__udivmoddi4+0x2e>
 80003ca:	f1c2 0320 	rsb	r3, r2, #32
 80003ce:	4091      	lsls	r1, r2
 80003d0:	fa20 f303 	lsr.w	r3, r0, r3
 80003d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80003d8:	4319      	orrs	r1, r3
 80003da:	fa00 fe02 	lsl.w	lr, r0, r2
 80003de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003e2:	fa1f f68c 	uxth.w	r6, ip
 80003e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80003ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ee:	fb07 1114 	mls	r1, r7, r4, r1
 80003f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003f6:	fb04 f106 	mul.w	r1, r4, r6
 80003fa:	4299      	cmp	r1, r3
 80003fc:	d90a      	bls.n	8000414 <__udivmoddi4+0x64>
 80003fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000402:	f104 30ff 	add.w	r0, r4, #4294967295
 8000406:	f080 8112 	bcs.w	800062e <__udivmoddi4+0x27e>
 800040a:	4299      	cmp	r1, r3
 800040c:	f240 810f 	bls.w	800062e <__udivmoddi4+0x27e>
 8000410:	3c02      	subs	r4, #2
 8000412:	4463      	add	r3, ip
 8000414:	1a59      	subs	r1, r3, r1
 8000416:	fa1f f38e 	uxth.w	r3, lr
 800041a:	fbb1 f0f7 	udiv	r0, r1, r7
 800041e:	fb07 1110 	mls	r1, r7, r0, r1
 8000422:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000426:	fb00 f606 	mul.w	r6, r0, r6
 800042a:	429e      	cmp	r6, r3
 800042c:	d90a      	bls.n	8000444 <__udivmoddi4+0x94>
 800042e:	eb1c 0303 	adds.w	r3, ip, r3
 8000432:	f100 31ff 	add.w	r1, r0, #4294967295
 8000436:	f080 80fc 	bcs.w	8000632 <__udivmoddi4+0x282>
 800043a:	429e      	cmp	r6, r3
 800043c:	f240 80f9 	bls.w	8000632 <__udivmoddi4+0x282>
 8000440:	4463      	add	r3, ip
 8000442:	3802      	subs	r0, #2
 8000444:	1b9b      	subs	r3, r3, r6
 8000446:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800044a:	2100      	movs	r1, #0
 800044c:	b11d      	cbz	r5, 8000456 <__udivmoddi4+0xa6>
 800044e:	40d3      	lsrs	r3, r2
 8000450:	2200      	movs	r2, #0
 8000452:	e9c5 3200 	strd	r3, r2, [r5]
 8000456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045a:	428b      	cmp	r3, r1
 800045c:	d905      	bls.n	800046a <__udivmoddi4+0xba>
 800045e:	b10d      	cbz	r5, 8000464 <__udivmoddi4+0xb4>
 8000460:	e9c5 0100 	strd	r0, r1, [r5]
 8000464:	2100      	movs	r1, #0
 8000466:	4608      	mov	r0, r1
 8000468:	e7f5      	b.n	8000456 <__udivmoddi4+0xa6>
 800046a:	fab3 f183 	clz	r1, r3
 800046e:	2900      	cmp	r1, #0
 8000470:	d146      	bne.n	8000500 <__udivmoddi4+0x150>
 8000472:	42a3      	cmp	r3, r4
 8000474:	d302      	bcc.n	800047c <__udivmoddi4+0xcc>
 8000476:	4290      	cmp	r0, r2
 8000478:	f0c0 80f0 	bcc.w	800065c <__udivmoddi4+0x2ac>
 800047c:	1a86      	subs	r6, r0, r2
 800047e:	eb64 0303 	sbc.w	r3, r4, r3
 8000482:	2001      	movs	r0, #1
 8000484:	2d00      	cmp	r5, #0
 8000486:	d0e6      	beq.n	8000456 <__udivmoddi4+0xa6>
 8000488:	e9c5 6300 	strd	r6, r3, [r5]
 800048c:	e7e3      	b.n	8000456 <__udivmoddi4+0xa6>
 800048e:	2a00      	cmp	r2, #0
 8000490:	f040 8090 	bne.w	80005b4 <__udivmoddi4+0x204>
 8000494:	eba1 040c 	sub.w	r4, r1, ip
 8000498:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800049c:	fa1f f78c 	uxth.w	r7, ip
 80004a0:	2101      	movs	r1, #1
 80004a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80004a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004aa:	fb08 4416 	mls	r4, r8, r6, r4
 80004ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004b2:	fb07 f006 	mul.w	r0, r7, r6
 80004b6:	4298      	cmp	r0, r3
 80004b8:	d908      	bls.n	80004cc <__udivmoddi4+0x11c>
 80004ba:	eb1c 0303 	adds.w	r3, ip, r3
 80004be:	f106 34ff 	add.w	r4, r6, #4294967295
 80004c2:	d202      	bcs.n	80004ca <__udivmoddi4+0x11a>
 80004c4:	4298      	cmp	r0, r3
 80004c6:	f200 80cd 	bhi.w	8000664 <__udivmoddi4+0x2b4>
 80004ca:	4626      	mov	r6, r4
 80004cc:	1a1c      	subs	r4, r3, r0
 80004ce:	fa1f f38e 	uxth.w	r3, lr
 80004d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80004d6:	fb08 4410 	mls	r4, r8, r0, r4
 80004da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004de:	fb00 f707 	mul.w	r7, r0, r7
 80004e2:	429f      	cmp	r7, r3
 80004e4:	d908      	bls.n	80004f8 <__udivmoddi4+0x148>
 80004e6:	eb1c 0303 	adds.w	r3, ip, r3
 80004ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80004ee:	d202      	bcs.n	80004f6 <__udivmoddi4+0x146>
 80004f0:	429f      	cmp	r7, r3
 80004f2:	f200 80b0 	bhi.w	8000656 <__udivmoddi4+0x2a6>
 80004f6:	4620      	mov	r0, r4
 80004f8:	1bdb      	subs	r3, r3, r7
 80004fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80004fe:	e7a5      	b.n	800044c <__udivmoddi4+0x9c>
 8000500:	f1c1 0620 	rsb	r6, r1, #32
 8000504:	408b      	lsls	r3, r1
 8000506:	fa22 f706 	lsr.w	r7, r2, r6
 800050a:	431f      	orrs	r7, r3
 800050c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000510:	fa04 f301 	lsl.w	r3, r4, r1
 8000514:	ea43 030c 	orr.w	r3, r3, ip
 8000518:	40f4      	lsrs	r4, r6
 800051a:	fa00 f801 	lsl.w	r8, r0, r1
 800051e:	0c38      	lsrs	r0, r7, #16
 8000520:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000524:	fbb4 fef0 	udiv	lr, r4, r0
 8000528:	fa1f fc87 	uxth.w	ip, r7
 800052c:	fb00 441e 	mls	r4, r0, lr, r4
 8000530:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000534:	fb0e f90c 	mul.w	r9, lr, ip
 8000538:	45a1      	cmp	r9, r4
 800053a:	fa02 f201 	lsl.w	r2, r2, r1
 800053e:	d90a      	bls.n	8000556 <__udivmoddi4+0x1a6>
 8000540:	193c      	adds	r4, r7, r4
 8000542:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000546:	f080 8084 	bcs.w	8000652 <__udivmoddi4+0x2a2>
 800054a:	45a1      	cmp	r9, r4
 800054c:	f240 8081 	bls.w	8000652 <__udivmoddi4+0x2a2>
 8000550:	f1ae 0e02 	sub.w	lr, lr, #2
 8000554:	443c      	add	r4, r7
 8000556:	eba4 0409 	sub.w	r4, r4, r9
 800055a:	fa1f f983 	uxth.w	r9, r3
 800055e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000562:	fb00 4413 	mls	r4, r0, r3, r4
 8000566:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800056a:	fb03 fc0c 	mul.w	ip, r3, ip
 800056e:	45a4      	cmp	ip, r4
 8000570:	d907      	bls.n	8000582 <__udivmoddi4+0x1d2>
 8000572:	193c      	adds	r4, r7, r4
 8000574:	f103 30ff 	add.w	r0, r3, #4294967295
 8000578:	d267      	bcs.n	800064a <__udivmoddi4+0x29a>
 800057a:	45a4      	cmp	ip, r4
 800057c:	d965      	bls.n	800064a <__udivmoddi4+0x29a>
 800057e:	3b02      	subs	r3, #2
 8000580:	443c      	add	r4, r7
 8000582:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000586:	fba0 9302 	umull	r9, r3, r0, r2
 800058a:	eba4 040c 	sub.w	r4, r4, ip
 800058e:	429c      	cmp	r4, r3
 8000590:	46ce      	mov	lr, r9
 8000592:	469c      	mov	ip, r3
 8000594:	d351      	bcc.n	800063a <__udivmoddi4+0x28a>
 8000596:	d04e      	beq.n	8000636 <__udivmoddi4+0x286>
 8000598:	b155      	cbz	r5, 80005b0 <__udivmoddi4+0x200>
 800059a:	ebb8 030e 	subs.w	r3, r8, lr
 800059e:	eb64 040c 	sbc.w	r4, r4, ip
 80005a2:	fa04 f606 	lsl.w	r6, r4, r6
 80005a6:	40cb      	lsrs	r3, r1
 80005a8:	431e      	orrs	r6, r3
 80005aa:	40cc      	lsrs	r4, r1
 80005ac:	e9c5 6400 	strd	r6, r4, [r5]
 80005b0:	2100      	movs	r1, #0
 80005b2:	e750      	b.n	8000456 <__udivmoddi4+0xa6>
 80005b4:	f1c2 0320 	rsb	r3, r2, #32
 80005b8:	fa20 f103 	lsr.w	r1, r0, r3
 80005bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80005c0:	fa24 f303 	lsr.w	r3, r4, r3
 80005c4:	4094      	lsls	r4, r2
 80005c6:	430c      	orrs	r4, r1
 80005c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80005cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80005d0:	fa1f f78c 	uxth.w	r7, ip
 80005d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80005d8:	fb08 3110 	mls	r1, r8, r0, r3
 80005dc:	0c23      	lsrs	r3, r4, #16
 80005de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80005e2:	fb00 f107 	mul.w	r1, r0, r7
 80005e6:	4299      	cmp	r1, r3
 80005e8:	d908      	bls.n	80005fc <__udivmoddi4+0x24c>
 80005ea:	eb1c 0303 	adds.w	r3, ip, r3
 80005ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80005f2:	d22c      	bcs.n	800064e <__udivmoddi4+0x29e>
 80005f4:	4299      	cmp	r1, r3
 80005f6:	d92a      	bls.n	800064e <__udivmoddi4+0x29e>
 80005f8:	3802      	subs	r0, #2
 80005fa:	4463      	add	r3, ip
 80005fc:	1a5b      	subs	r3, r3, r1
 80005fe:	b2a4      	uxth	r4, r4
 8000600:	fbb3 f1f8 	udiv	r1, r3, r8
 8000604:	fb08 3311 	mls	r3, r8, r1, r3
 8000608:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800060c:	fb01 f307 	mul.w	r3, r1, r7
 8000610:	42a3      	cmp	r3, r4
 8000612:	d908      	bls.n	8000626 <__udivmoddi4+0x276>
 8000614:	eb1c 0404 	adds.w	r4, ip, r4
 8000618:	f101 36ff 	add.w	r6, r1, #4294967295
 800061c:	d213      	bcs.n	8000646 <__udivmoddi4+0x296>
 800061e:	42a3      	cmp	r3, r4
 8000620:	d911      	bls.n	8000646 <__udivmoddi4+0x296>
 8000622:	3902      	subs	r1, #2
 8000624:	4464      	add	r4, ip
 8000626:	1ae4      	subs	r4, r4, r3
 8000628:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800062c:	e739      	b.n	80004a2 <__udivmoddi4+0xf2>
 800062e:	4604      	mov	r4, r0
 8000630:	e6f0      	b.n	8000414 <__udivmoddi4+0x64>
 8000632:	4608      	mov	r0, r1
 8000634:	e706      	b.n	8000444 <__udivmoddi4+0x94>
 8000636:	45c8      	cmp	r8, r9
 8000638:	d2ae      	bcs.n	8000598 <__udivmoddi4+0x1e8>
 800063a:	ebb9 0e02 	subs.w	lr, r9, r2
 800063e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000642:	3801      	subs	r0, #1
 8000644:	e7a8      	b.n	8000598 <__udivmoddi4+0x1e8>
 8000646:	4631      	mov	r1, r6
 8000648:	e7ed      	b.n	8000626 <__udivmoddi4+0x276>
 800064a:	4603      	mov	r3, r0
 800064c:	e799      	b.n	8000582 <__udivmoddi4+0x1d2>
 800064e:	4630      	mov	r0, r6
 8000650:	e7d4      	b.n	80005fc <__udivmoddi4+0x24c>
 8000652:	46d6      	mov	lr, sl
 8000654:	e77f      	b.n	8000556 <__udivmoddi4+0x1a6>
 8000656:	4463      	add	r3, ip
 8000658:	3802      	subs	r0, #2
 800065a:	e74d      	b.n	80004f8 <__udivmoddi4+0x148>
 800065c:	4606      	mov	r6, r0
 800065e:	4623      	mov	r3, r4
 8000660:	4608      	mov	r0, r1
 8000662:	e70f      	b.n	8000484 <__udivmoddi4+0xd4>
 8000664:	3e02      	subs	r6, #2
 8000666:	4463      	add	r3, ip
 8000668:	e730      	b.n	80004cc <__udivmoddi4+0x11c>
 800066a:	bf00      	nop

0800066c <__aeabi_idiv0>:
 800066c:	4770      	bx	lr
 800066e:	bf00      	nop

08000670 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000670:	b480      	push	{r7}
 8000672:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000674:	4b3d      	ldr	r3, [pc, #244]	@ (800076c <SystemInit+0xfc>)
 8000676:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800067a:	4a3c      	ldr	r2, [pc, #240]	@ (800076c <SystemInit+0xfc>)
 800067c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000680:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8000684:	4b39      	ldr	r3, [pc, #228]	@ (800076c <SystemInit+0xfc>)
 8000686:	691b      	ldr	r3, [r3, #16]
 8000688:	4a38      	ldr	r2, [pc, #224]	@ (800076c <SystemInit+0xfc>)
 800068a:	f043 0310 	orr.w	r3, r3, #16
 800068e:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000690:	4b37      	ldr	r3, [pc, #220]	@ (8000770 <SystemInit+0x100>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	f003 030f 	and.w	r3, r3, #15
 8000698:	2b06      	cmp	r3, #6
 800069a:	d807      	bhi.n	80006ac <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800069c:	4b34      	ldr	r3, [pc, #208]	@ (8000770 <SystemInit+0x100>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	f023 030f 	bic.w	r3, r3, #15
 80006a4:	4a32      	ldr	r2, [pc, #200]	@ (8000770 <SystemInit+0x100>)
 80006a6:	f043 0307 	orr.w	r3, r3, #7
 80006aa:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80006ac:	4b31      	ldr	r3, [pc, #196]	@ (8000774 <SystemInit+0x104>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	4a30      	ldr	r2, [pc, #192]	@ (8000774 <SystemInit+0x104>)
 80006b2:	f043 0301 	orr.w	r3, r3, #1
 80006b6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80006b8:	4b2e      	ldr	r3, [pc, #184]	@ (8000774 <SystemInit+0x104>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80006be:	4b2d      	ldr	r3, [pc, #180]	@ (8000774 <SystemInit+0x104>)
 80006c0:	681a      	ldr	r2, [r3, #0]
 80006c2:	492c      	ldr	r1, [pc, #176]	@ (8000774 <SystemInit+0x104>)
 80006c4:	4b2c      	ldr	r3, [pc, #176]	@ (8000778 <SystemInit+0x108>)
 80006c6:	4013      	ands	r3, r2
 80006c8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006ca:	4b29      	ldr	r3, [pc, #164]	@ (8000770 <SystemInit+0x100>)
 80006cc:	681b      	ldr	r3, [r3, #0]
 80006ce:	f003 0308 	and.w	r3, r3, #8
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d007      	beq.n	80006e6 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006d6:	4b26      	ldr	r3, [pc, #152]	@ (8000770 <SystemInit+0x100>)
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	f023 030f 	bic.w	r3, r3, #15
 80006de:	4a24      	ldr	r2, [pc, #144]	@ (8000770 <SystemInit+0x100>)
 80006e0:	f043 0307 	orr.w	r3, r3, #7
 80006e4:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80006e6:	4b23      	ldr	r3, [pc, #140]	@ (8000774 <SystemInit+0x104>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80006ec:	4b21      	ldr	r3, [pc, #132]	@ (8000774 <SystemInit+0x104>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80006f2:	4b20      	ldr	r3, [pc, #128]	@ (8000774 <SystemInit+0x104>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80006f8:	4b1e      	ldr	r3, [pc, #120]	@ (8000774 <SystemInit+0x104>)
 80006fa:	4a20      	ldr	r2, [pc, #128]	@ (800077c <SystemInit+0x10c>)
 80006fc:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80006fe:	4b1d      	ldr	r3, [pc, #116]	@ (8000774 <SystemInit+0x104>)
 8000700:	4a1f      	ldr	r2, [pc, #124]	@ (8000780 <SystemInit+0x110>)
 8000702:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000704:	4b1b      	ldr	r3, [pc, #108]	@ (8000774 <SystemInit+0x104>)
 8000706:	4a1f      	ldr	r2, [pc, #124]	@ (8000784 <SystemInit+0x114>)
 8000708:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800070a:	4b1a      	ldr	r3, [pc, #104]	@ (8000774 <SystemInit+0x104>)
 800070c:	2200      	movs	r2, #0
 800070e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000710:	4b18      	ldr	r3, [pc, #96]	@ (8000774 <SystemInit+0x104>)
 8000712:	4a1c      	ldr	r2, [pc, #112]	@ (8000784 <SystemInit+0x114>)
 8000714:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000716:	4b17      	ldr	r3, [pc, #92]	@ (8000774 <SystemInit+0x104>)
 8000718:	2200      	movs	r2, #0
 800071a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800071c:	4b15      	ldr	r3, [pc, #84]	@ (8000774 <SystemInit+0x104>)
 800071e:	4a19      	ldr	r2, [pc, #100]	@ (8000784 <SystemInit+0x114>)
 8000720:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000722:	4b14      	ldr	r3, [pc, #80]	@ (8000774 <SystemInit+0x104>)
 8000724:	2200      	movs	r2, #0
 8000726:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000728:	4b12      	ldr	r3, [pc, #72]	@ (8000774 <SystemInit+0x104>)
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	4a11      	ldr	r2, [pc, #68]	@ (8000774 <SystemInit+0x104>)
 800072e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000732:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000734:	4b0f      	ldr	r3, [pc, #60]	@ (8000774 <SystemInit+0x104>)
 8000736:	2200      	movs	r2, #0
 8000738:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800073a:	4b13      	ldr	r3, [pc, #76]	@ (8000788 <SystemInit+0x118>)
 800073c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800073e:	4a12      	ldr	r2, [pc, #72]	@ (8000788 <SystemInit+0x118>)
 8000740:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000744:	6253      	str	r3, [r2, #36]	@ 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000746:	4b11      	ldr	r3, [pc, #68]	@ (800078c <SystemInit+0x11c>)
 8000748:	681a      	ldr	r2, [r3, #0]
 800074a:	4b11      	ldr	r3, [pc, #68]	@ (8000790 <SystemInit+0x120>)
 800074c:	4013      	ands	r3, r2
 800074e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000752:	d202      	bcs.n	800075a <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000754:	4b0f      	ldr	r3, [pc, #60]	@ (8000794 <SystemInit+0x124>)
 8000756:	2201      	movs	r2, #1
 8000758:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800075a:	4b0f      	ldr	r3, [pc, #60]	@ (8000798 <SystemInit+0x128>)
 800075c:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000760:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8000762:	bf00      	nop
 8000764:	46bd      	mov	sp, r7
 8000766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800076a:	4770      	bx	lr
 800076c:	e000ed00 	.word	0xe000ed00
 8000770:	52002000 	.word	0x52002000
 8000774:	58024400 	.word	0x58024400
 8000778:	eaf6ed7f 	.word	0xeaf6ed7f
 800077c:	02020200 	.word	0x02020200
 8000780:	01ff0000 	.word	0x01ff0000
 8000784:	01010280 	.word	0x01010280
 8000788:	580000c0 	.word	0x580000c0
 800078c:	5c001000 	.word	0x5c001000
 8000790:	ffff0000 	.word	0xffff0000
 8000794:	51008108 	.word	0x51008108
 8000798:	52004000 	.word	0x52004000

0800079c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b082      	sub	sp, #8
 80007a0:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 80007a2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80007a6:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 80007a8:	bf00      	nop
 80007aa:	4b40      	ldr	r3, [pc, #256]	@ (80008ac <main+0x110>)
 80007ac:	681b      	ldr	r3, [r3, #0]
 80007ae:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d004      	beq.n	80007c0 <main+0x24>
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	1e5a      	subs	r2, r3, #1
 80007ba:	607a      	str	r2, [r7, #4]
 80007bc:	2b00      	cmp	r3, #0
 80007be:	dcf4      	bgt.n	80007aa <main+0xe>
  if ( timeout < 0 )
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	da01      	bge.n	80007ca <main+0x2e>
  {
  Error_Handler();
 80007c6:	f000 f8f7 	bl	80009b8 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007ca:	f000 fc45 	bl	8001058 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007ce:	f000 f875 	bl	80008bc <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 80007d2:	4b36      	ldr	r3, [pc, #216]	@ (80008ac <main+0x110>)
 80007d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007d8:	4a34      	ldr	r2, [pc, #208]	@ (80008ac <main+0x110>)
 80007da:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80007de:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80007e2:	4b32      	ldr	r3, [pc, #200]	@ (80008ac <main+0x110>)
 80007e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007e8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80007ec:	603b      	str	r3, [r7, #0]
 80007ee:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 80007f0:	2000      	movs	r0, #0
 80007f2:	f001 f847 	bl	8001884 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 80007f6:	2100      	movs	r1, #0
 80007f8:	2000      	movs	r0, #0
 80007fa:	f001 f85d 	bl	80018b8 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 80007fe:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000802:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000804:	bf00      	nop
 8000806:	4b29      	ldr	r3, [pc, #164]	@ (80008ac <main+0x110>)
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800080e:	2b00      	cmp	r3, #0
 8000810:	d104      	bne.n	800081c <main+0x80>
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	1e5a      	subs	r2, r3, #1
 8000816:	607a      	str	r2, [r7, #4]
 8000818:	2b00      	cmp	r3, #0
 800081a:	dcf4      	bgt.n	8000806 <main+0x6a>
if ( timeout < 0 )
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	2b00      	cmp	r3, #0
 8000820:	da01      	bge.n	8000826 <main+0x8a>
{
Error_Handler();
 8000822:	f000 f8c9 	bl	80009b8 <Error_Handler>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Initialize leds */
  BSP_LED_Init(LED_GREEN);
 8000826:	2000      	movs	r0, #0
 8000828:	f000 f9ea 	bl	8000c00 <BSP_LED_Init>
  BSP_LED_Init(LED_YELLOW);
 800082c:	2001      	movs	r0, #1
 800082e:	f000 f9e7 	bl	8000c00 <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 8000832:	2002      	movs	r0, #2
 8000834:	f000 f9e4 	bl	8000c00 <BSP_LED_Init>

  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 8000838:	2101      	movs	r1, #1
 800083a:	2000      	movs	r0, #0
 800083c:	f000 faaa 	bl	8000d94 <BSP_PB_Init>

  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
  BspCOMInit.BaudRate   = 115200;
 8000840:	4b1b      	ldr	r3, [pc, #108]	@ (80008b0 <main+0x114>)
 8000842:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000846:	601a      	str	r2, [r3, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 8000848:	4b19      	ldr	r3, [pc, #100]	@ (80008b0 <main+0x114>)
 800084a:	2200      	movs	r2, #0
 800084c:	605a      	str	r2, [r3, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 800084e:	4b18      	ldr	r3, [pc, #96]	@ (80008b0 <main+0x114>)
 8000850:	2200      	movs	r2, #0
 8000852:	811a      	strh	r2, [r3, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 8000854:	4b16      	ldr	r3, [pc, #88]	@ (80008b0 <main+0x114>)
 8000856:	2200      	movs	r2, #0
 8000858:	815a      	strh	r2, [r3, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 800085a:	4b15      	ldr	r3, [pc, #84]	@ (80008b0 <main+0x114>)
 800085c:	2200      	movs	r2, #0
 800085e:	819a      	strh	r2, [r3, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 8000860:	4913      	ldr	r1, [pc, #76]	@ (80008b0 <main+0x114>)
 8000862:	2000      	movs	r0, #0
 8000864:	f000 fb1a 	bl	8000e9c <BSP_COM_Init>
 8000868:	4603      	mov	r3, r0
 800086a:	2b00      	cmp	r3, #0
 800086c:	d001      	beq.n	8000872 <main+0xd6>
  {
    Error_Handler();
 800086e:	f000 f8a3 	bl	80009b8 <Error_Handler>
  }

  /* USER CODE BEGIN BSP */
  /* -- Sample board code to send message over COM1 port ---- */
  printf("Welcome to STM32 world !\n\r");
 8000872:	4810      	ldr	r0, [pc, #64]	@ (80008b4 <main+0x118>)
 8000874:	f003 fc64 	bl	8004140 <iprintf>
  /* -- Sample board code to switch on leds ---- */
  BSP_LED_On(LED_GREEN);
 8000878:	2000      	movs	r0, #0
 800087a:	f000 fa37 	bl	8000cec <BSP_LED_On>
  BSP_LED_On(LED_YELLOW);
 800087e:	2001      	movs	r0, #1
 8000880:	f000 fa34 	bl	8000cec <BSP_LED_On>
  BSP_LED_On(LED_RED);
 8000884:	2002      	movs	r0, #2
 8000886:	f000 fa31 	bl	8000cec <BSP_LED_On>
  /* USER CODE BEGIN WHILE */
  while (1)
  {

    /* -- Sample board code for User push-button in interrupt mode ---- */
    if (BspButtonState == BUTTON_PRESSED)
 800088a:	4b0b      	ldr	r3, [pc, #44]	@ (80008b8 <main+0x11c>)
 800088c:	681b      	ldr	r3, [r3, #0]
 800088e:	2b01      	cmp	r3, #1
 8000890:	d1fb      	bne.n	800088a <main+0xee>
    {
      /* Update button state */
      BspButtonState = BUTTON_RELEASED;
 8000892:	4b09      	ldr	r3, [pc, #36]	@ (80008b8 <main+0x11c>)
 8000894:	2200      	movs	r2, #0
 8000896:	601a      	str	r2, [r3, #0]
      /* -- Sample board code to toggle leds ---- */
      BSP_LED_Toggle(LED_GREEN);
 8000898:	2000      	movs	r0, #0
 800089a:	f000 fa51 	bl	8000d40 <BSP_LED_Toggle>
      BSP_LED_Toggle(LED_YELLOW);
 800089e:	2001      	movs	r0, #1
 80008a0:	f000 fa4e 	bl	8000d40 <BSP_LED_Toggle>
      BSP_LED_Toggle(LED_RED);
 80008a4:	2002      	movs	r0, #2
 80008a6:	f000 fa4b 	bl	8000d40 <BSP_LED_Toggle>
    if (BspButtonState == BUTTON_PRESSED)
 80008aa:	e7ee      	b.n	800088a <main+0xee>
 80008ac:	58024400 	.word	0x58024400
 80008b0:	240000a4 	.word	0x240000a4
 80008b4:	08004e34 	.word	0x08004e34
 80008b8:	240000b4 	.word	0x240000b4

080008bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b09c      	sub	sp, #112	@ 0x70
 80008c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008c2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80008c6:	224c      	movs	r2, #76	@ 0x4c
 80008c8:	2100      	movs	r1, #0
 80008ca:	4618      	mov	r0, r3
 80008cc:	f003 fc8d 	bl	80041ea <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008d0:	1d3b      	adds	r3, r7, #4
 80008d2:	2220      	movs	r2, #32
 80008d4:	2100      	movs	r1, #0
 80008d6:	4618      	mov	r0, r3
 80008d8:	f003 fc87 	bl	80041ea <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80008dc:	2004      	movs	r0, #4
 80008de:	f000 ffff 	bl	80018e0 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80008e2:	2300      	movs	r3, #0
 80008e4:	603b      	str	r3, [r7, #0]
 80008e6:	4b28      	ldr	r3, [pc, #160]	@ (8000988 <SystemClock_Config+0xcc>)
 80008e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80008ea:	4a27      	ldr	r2, [pc, #156]	@ (8000988 <SystemClock_Config+0xcc>)
 80008ec:	f023 0301 	bic.w	r3, r3, #1
 80008f0:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80008f2:	4b25      	ldr	r3, [pc, #148]	@ (8000988 <SystemClock_Config+0xcc>)
 80008f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80008f6:	f003 0301 	and.w	r3, r3, #1
 80008fa:	603b      	str	r3, [r7, #0]
 80008fc:	4b23      	ldr	r3, [pc, #140]	@ (800098c <SystemClock_Config+0xd0>)
 80008fe:	699b      	ldr	r3, [r3, #24]
 8000900:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000904:	4a21      	ldr	r2, [pc, #132]	@ (800098c <SystemClock_Config+0xd0>)
 8000906:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800090a:	6193      	str	r3, [r2, #24]
 800090c:	4b1f      	ldr	r3, [pc, #124]	@ (800098c <SystemClock_Config+0xd0>)
 800090e:	699b      	ldr	r3, [r3, #24]
 8000910:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000914:	603b      	str	r3, [r7, #0]
 8000916:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000918:	bf00      	nop
 800091a:	4b1c      	ldr	r3, [pc, #112]	@ (800098c <SystemClock_Config+0xd0>)
 800091c:	699b      	ldr	r3, [r3, #24]
 800091e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000922:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000926:	d1f8      	bne.n	800091a <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000928:	2302      	movs	r3, #2
 800092a:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 800092c:	2301      	movs	r3, #1
 800092e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000930:	2340      	movs	r3, #64	@ 0x40
 8000932:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000934:	2300      	movs	r3, #0
 8000936:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000938:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800093c:	4618      	mov	r0, r3
 800093e:	f001 f829 	bl	8001994 <HAL_RCC_OscConfig>
 8000942:	4603      	mov	r3, r0
 8000944:	2b00      	cmp	r3, #0
 8000946:	d001      	beq.n	800094c <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000948:	f000 f836 	bl	80009b8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800094c:	233f      	movs	r3, #63	@ 0x3f
 800094e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000950:	2300      	movs	r3, #0
 8000952:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000954:	2300      	movs	r3, #0
 8000956:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000958:	2300      	movs	r3, #0
 800095a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 800095c:	2300      	movs	r3, #0
 800095e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000960:	2300      	movs	r3, #0
 8000962:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000964:	2300      	movs	r3, #0
 8000966:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000968:	2300      	movs	r3, #0
 800096a:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800096c:	1d3b      	adds	r3, r7, #4
 800096e:	2101      	movs	r1, #1
 8000970:	4618      	mov	r0, r3
 8000972:	f001 fc69 	bl	8002248 <HAL_RCC_ClockConfig>
 8000976:	4603      	mov	r3, r0
 8000978:	2b00      	cmp	r3, #0
 800097a:	d001      	beq.n	8000980 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800097c:	f000 f81c 	bl	80009b8 <Error_Handler>
  }
}
 8000980:	bf00      	nop
 8000982:	3770      	adds	r7, #112	@ 0x70
 8000984:	46bd      	mov	sp, r7
 8000986:	bd80      	pop	{r7, pc}
 8000988:	58000400 	.word	0x58000400
 800098c:	58024800 	.word	0x58024800

08000990 <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pressed button
  * @retval None
  */
void BSP_PB_Callback(Button_TypeDef Button)
{
 8000990:	b480      	push	{r7}
 8000992:	b083      	sub	sp, #12
 8000994:	af00      	add	r7, sp, #0
 8000996:	4603      	mov	r3, r0
 8000998:	71fb      	strb	r3, [r7, #7]
  if (Button == BUTTON_USER)
 800099a:	79fb      	ldrb	r3, [r7, #7]
 800099c:	2b00      	cmp	r3, #0
 800099e:	d102      	bne.n	80009a6 <BSP_PB_Callback+0x16>
  {
    BspButtonState = BUTTON_PRESSED;
 80009a0:	4b04      	ldr	r3, [pc, #16]	@ (80009b4 <BSP_PB_Callback+0x24>)
 80009a2:	2201      	movs	r2, #1
 80009a4:	601a      	str	r2, [r3, #0]
  }
}
 80009a6:	bf00      	nop
 80009a8:	370c      	adds	r7, #12
 80009aa:	46bd      	mov	sp, r7
 80009ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b0:	4770      	bx	lr
 80009b2:	bf00      	nop
 80009b4:	240000b4 	.word	0x240000b4

080009b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009b8:	b480      	push	{r7}
 80009ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009bc:	b672      	cpsid	i
}
 80009be:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009c0:	bf00      	nop
 80009c2:	e7fd      	b.n	80009c0 <Error_Handler+0x8>

080009c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009c4:	b480      	push	{r7}
 80009c6:	b083      	sub	sp, #12
 80009c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009ca:	4b0a      	ldr	r3, [pc, #40]	@ (80009f4 <HAL_MspInit+0x30>)
 80009cc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80009d0:	4a08      	ldr	r2, [pc, #32]	@ (80009f4 <HAL_MspInit+0x30>)
 80009d2:	f043 0302 	orr.w	r3, r3, #2
 80009d6:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80009da:	4b06      	ldr	r3, [pc, #24]	@ (80009f4 <HAL_MspInit+0x30>)
 80009dc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80009e0:	f003 0302 	and.w	r3, r3, #2
 80009e4:	607b      	str	r3, [r7, #4]
 80009e6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009e8:	bf00      	nop
 80009ea:	370c      	adds	r7, #12
 80009ec:	46bd      	mov	sp, r7
 80009ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f2:	4770      	bx	lr
 80009f4:	58024400 	.word	0x58024400

080009f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009f8:	b480      	push	{r7}
 80009fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80009fc:	bf00      	nop
 80009fe:	e7fd      	b.n	80009fc <NMI_Handler+0x4>

08000a00 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a00:	b480      	push	{r7}
 8000a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a04:	bf00      	nop
 8000a06:	e7fd      	b.n	8000a04 <HardFault_Handler+0x4>

08000a08 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a0c:	bf00      	nop
 8000a0e:	e7fd      	b.n	8000a0c <MemManage_Handler+0x4>

08000a10 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a10:	b480      	push	{r7}
 8000a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a14:	bf00      	nop
 8000a16:	e7fd      	b.n	8000a14 <BusFault_Handler+0x4>

08000a18 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a1c:	bf00      	nop
 8000a1e:	e7fd      	b.n	8000a1c <UsageFault_Handler+0x4>

08000a20 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a20:	b480      	push	{r7}
 8000a22:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a24:	bf00      	nop
 8000a26:	46bd      	mov	sp, r7
 8000a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2c:	4770      	bx	lr

08000a2e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a2e:	b480      	push	{r7}
 8000a30:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a32:	bf00      	nop
 8000a34:	46bd      	mov	sp, r7
 8000a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3a:	4770      	bx	lr

08000a3c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a40:	bf00      	nop
 8000a42:	46bd      	mov	sp, r7
 8000a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a48:	4770      	bx	lr

08000a4a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a4a:	b580      	push	{r7, lr}
 8000a4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a4e:	f000 fb75 	bl	800113c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a52:	bf00      	nop
 8000a54:	bd80      	pop	{r7, pc}

08000a56 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000a56:	b580      	push	{r7, lr}
 8000a58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  BSP_PB_IRQHandler(BUTTON_USER);
 8000a5a:	2000      	movs	r0, #0
 8000a5c:	f000 fa0c 	bl	8000e78 <BSP_PB_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000a60:	bf00      	nop
 8000a62:	bd80      	pop	{r7, pc}

08000a64 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b086      	sub	sp, #24
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	60f8      	str	r0, [r7, #12]
 8000a6c:	60b9      	str	r1, [r7, #8]
 8000a6e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a70:	2300      	movs	r3, #0
 8000a72:	617b      	str	r3, [r7, #20]
 8000a74:	e00a      	b.n	8000a8c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000a76:	f3af 8000 	nop.w
 8000a7a:	4601      	mov	r1, r0
 8000a7c:	68bb      	ldr	r3, [r7, #8]
 8000a7e:	1c5a      	adds	r2, r3, #1
 8000a80:	60ba      	str	r2, [r7, #8]
 8000a82:	b2ca      	uxtb	r2, r1
 8000a84:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a86:	697b      	ldr	r3, [r7, #20]
 8000a88:	3301      	adds	r3, #1
 8000a8a:	617b      	str	r3, [r7, #20]
 8000a8c:	697a      	ldr	r2, [r7, #20]
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	429a      	cmp	r2, r3
 8000a92:	dbf0      	blt.n	8000a76 <_read+0x12>
  }

  return len;
 8000a94:	687b      	ldr	r3, [r7, #4]
}
 8000a96:	4618      	mov	r0, r3
 8000a98:	3718      	adds	r7, #24
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bd80      	pop	{r7, pc}

08000a9e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000a9e:	b580      	push	{r7, lr}
 8000aa0:	b086      	sub	sp, #24
 8000aa2:	af00      	add	r7, sp, #0
 8000aa4:	60f8      	str	r0, [r7, #12]
 8000aa6:	60b9      	str	r1, [r7, #8]
 8000aa8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000aaa:	2300      	movs	r3, #0
 8000aac:	617b      	str	r3, [r7, #20]
 8000aae:	e009      	b.n	8000ac4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000ab0:	68bb      	ldr	r3, [r7, #8]
 8000ab2:	1c5a      	adds	r2, r3, #1
 8000ab4:	60ba      	str	r2, [r7, #8]
 8000ab6:	781b      	ldrb	r3, [r3, #0]
 8000ab8:	4618      	mov	r0, r3
 8000aba:	f000 fa51 	bl	8000f60 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000abe:	697b      	ldr	r3, [r7, #20]
 8000ac0:	3301      	adds	r3, #1
 8000ac2:	617b      	str	r3, [r7, #20]
 8000ac4:	697a      	ldr	r2, [r7, #20]
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	429a      	cmp	r2, r3
 8000aca:	dbf1      	blt.n	8000ab0 <_write+0x12>
  }
  return len;
 8000acc:	687b      	ldr	r3, [r7, #4]
}
 8000ace:	4618      	mov	r0, r3
 8000ad0:	3718      	adds	r7, #24
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bd80      	pop	{r7, pc}

08000ad6 <_close>:

int _close(int file)
{
 8000ad6:	b480      	push	{r7}
 8000ad8:	b083      	sub	sp, #12
 8000ada:	af00      	add	r7, sp, #0
 8000adc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000ade:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	370c      	adds	r7, #12
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aec:	4770      	bx	lr

08000aee <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000aee:	b480      	push	{r7}
 8000af0:	b083      	sub	sp, #12
 8000af2:	af00      	add	r7, sp, #0
 8000af4:	6078      	str	r0, [r7, #4]
 8000af6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000af8:	683b      	ldr	r3, [r7, #0]
 8000afa:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000afe:	605a      	str	r2, [r3, #4]
  return 0;
 8000b00:	2300      	movs	r3, #0
}
 8000b02:	4618      	mov	r0, r3
 8000b04:	370c      	adds	r7, #12
 8000b06:	46bd      	mov	sp, r7
 8000b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0c:	4770      	bx	lr

08000b0e <_isatty>:

int _isatty(int file)
{
 8000b0e:	b480      	push	{r7}
 8000b10:	b083      	sub	sp, #12
 8000b12:	af00      	add	r7, sp, #0
 8000b14:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000b16:	2301      	movs	r3, #1
}
 8000b18:	4618      	mov	r0, r3
 8000b1a:	370c      	adds	r7, #12
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b22:	4770      	bx	lr

08000b24 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000b24:	b480      	push	{r7}
 8000b26:	b085      	sub	sp, #20
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	60f8      	str	r0, [r7, #12]
 8000b2c:	60b9      	str	r1, [r7, #8]
 8000b2e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000b30:	2300      	movs	r3, #0
}
 8000b32:	4618      	mov	r0, r3
 8000b34:	3714      	adds	r7, #20
 8000b36:	46bd      	mov	sp, r7
 8000b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3c:	4770      	bx	lr
	...

08000b40 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b086      	sub	sp, #24
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b48:	4a14      	ldr	r2, [pc, #80]	@ (8000b9c <_sbrk+0x5c>)
 8000b4a:	4b15      	ldr	r3, [pc, #84]	@ (8000ba0 <_sbrk+0x60>)
 8000b4c:	1ad3      	subs	r3, r2, r3
 8000b4e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b50:	697b      	ldr	r3, [r7, #20]
 8000b52:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b54:	4b13      	ldr	r3, [pc, #76]	@ (8000ba4 <_sbrk+0x64>)
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d102      	bne.n	8000b62 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b5c:	4b11      	ldr	r3, [pc, #68]	@ (8000ba4 <_sbrk+0x64>)
 8000b5e:	4a12      	ldr	r2, [pc, #72]	@ (8000ba8 <_sbrk+0x68>)
 8000b60:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b62:	4b10      	ldr	r3, [pc, #64]	@ (8000ba4 <_sbrk+0x64>)
 8000b64:	681a      	ldr	r2, [r3, #0]
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	4413      	add	r3, r2
 8000b6a:	693a      	ldr	r2, [r7, #16]
 8000b6c:	429a      	cmp	r2, r3
 8000b6e:	d207      	bcs.n	8000b80 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b70:	f003 fb8a 	bl	8004288 <__errno>
 8000b74:	4603      	mov	r3, r0
 8000b76:	220c      	movs	r2, #12
 8000b78:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b7a:	f04f 33ff 	mov.w	r3, #4294967295
 8000b7e:	e009      	b.n	8000b94 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b80:	4b08      	ldr	r3, [pc, #32]	@ (8000ba4 <_sbrk+0x64>)
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b86:	4b07      	ldr	r3, [pc, #28]	@ (8000ba4 <_sbrk+0x64>)
 8000b88:	681a      	ldr	r2, [r3, #0]
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	4413      	add	r3, r2
 8000b8e:	4a05      	ldr	r2, [pc, #20]	@ (8000ba4 <_sbrk+0x64>)
 8000b90:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b92:	68fb      	ldr	r3, [r7, #12]
}
 8000b94:	4618      	mov	r0, r3
 8000b96:	3718      	adds	r7, #24
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	bd80      	pop	{r7, pc}
 8000b9c:	24080000 	.word	0x24080000
 8000ba0:	00000400 	.word	0x00000400
 8000ba4:	240000b8 	.word	0x240000b8
 8000ba8:	240002b0 	.word	0x240002b0

08000bac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000bac:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000be4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000bb0:	f7ff fd5e 	bl	8000670 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000bb4:	480c      	ldr	r0, [pc, #48]	@ (8000be8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000bb6:	490d      	ldr	r1, [pc, #52]	@ (8000bec <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000bb8:	4a0d      	ldr	r2, [pc, #52]	@ (8000bf0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000bba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bbc:	e002      	b.n	8000bc4 <LoopCopyDataInit>

08000bbe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bbe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bc0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bc2:	3304      	adds	r3, #4

08000bc4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bc4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bc6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bc8:	d3f9      	bcc.n	8000bbe <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bca:	4a0a      	ldr	r2, [pc, #40]	@ (8000bf4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000bcc:	4c0a      	ldr	r4, [pc, #40]	@ (8000bf8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000bce:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bd0:	e001      	b.n	8000bd6 <LoopFillZerobss>

08000bd2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bd2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bd4:	3204      	adds	r2, #4

08000bd6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bd6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bd8:	d3fb      	bcc.n	8000bd2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000bda:	f003 fb5b 	bl	8004294 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000bde:	f7ff fddd 	bl	800079c <main>
  bx  lr
 8000be2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000be4:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000be8:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000bec:	24000088 	.word	0x24000088
  ldr r2, =_sidata
 8000bf0:	08004ec8 	.word	0x08004ec8
  ldr r2, =_sbss
 8000bf4:	24000088 	.word	0x24000088
  ldr r4, =_ebss
 8000bf8:	240002ac 	.word	0x240002ac

08000bfc <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000bfc:	e7fe      	b.n	8000bfc <ADC3_IRQHandler>
	...

08000c00 <BSP_LED_Init>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b08c      	sub	sp, #48	@ 0x30
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	4603      	mov	r3, r0
 8000c08:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitTypeDef  gpio_init_structure;

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 8000c0e:	79fb      	ldrb	r3, [r7, #7]
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d009      	beq.n	8000c28 <BSP_LED_Init+0x28>
 8000c14:	79fb      	ldrb	r3, [r7, #7]
 8000c16:	2b01      	cmp	r3, #1
 8000c18:	d006      	beq.n	8000c28 <BSP_LED_Init+0x28>
 8000c1a:	79fb      	ldrb	r3, [r7, #7]
 8000c1c:	2b02      	cmp	r3, #2
 8000c1e:	d003      	beq.n	8000c28 <BSP_LED_Init+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8000c20:	f06f 0301 	mvn.w	r3, #1
 8000c24:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000c26:	e055      	b.n	8000cd4 <BSP_LED_Init+0xd4>
  }
  else
  {
    /* Enable the GPIO LED Clock */
    if(Led == LED1)
 8000c28:	79fb      	ldrb	r3, [r7, #7]
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d10f      	bne.n	8000c4e <BSP_LED_Init+0x4e>
    {
      LED1_GPIO_CLK_ENABLE();
 8000c2e:	4b2c      	ldr	r3, [pc, #176]	@ (8000ce0 <BSP_LED_Init+0xe0>)
 8000c30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c34:	4a2a      	ldr	r2, [pc, #168]	@ (8000ce0 <BSP_LED_Init+0xe0>)
 8000c36:	f043 0302 	orr.w	r3, r3, #2
 8000c3a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c3e:	4b28      	ldr	r3, [pc, #160]	@ (8000ce0 <BSP_LED_Init+0xe0>)
 8000c40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c44:	f003 0302 	and.w	r3, r3, #2
 8000c48:	617b      	str	r3, [r7, #20]
 8000c4a:	697b      	ldr	r3, [r7, #20]
 8000c4c:	e021      	b.n	8000c92 <BSP_LED_Init+0x92>
    }
    else if(Led == LED2)
 8000c4e:	79fb      	ldrb	r3, [r7, #7]
 8000c50:	2b01      	cmp	r3, #1
 8000c52:	d10f      	bne.n	8000c74 <BSP_LED_Init+0x74>
    {
      LED2_GPIO_CLK_ENABLE();
 8000c54:	4b22      	ldr	r3, [pc, #136]	@ (8000ce0 <BSP_LED_Init+0xe0>)
 8000c56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c5a:	4a21      	ldr	r2, [pc, #132]	@ (8000ce0 <BSP_LED_Init+0xe0>)
 8000c5c:	f043 0310 	orr.w	r3, r3, #16
 8000c60:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c64:	4b1e      	ldr	r3, [pc, #120]	@ (8000ce0 <BSP_LED_Init+0xe0>)
 8000c66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c6a:	f003 0310 	and.w	r3, r3, #16
 8000c6e:	613b      	str	r3, [r7, #16]
 8000c70:	693b      	ldr	r3, [r7, #16]
 8000c72:	e00e      	b.n	8000c92 <BSP_LED_Init+0x92>
    }
    else
    {
      LED3_GPIO_CLK_ENABLE();
 8000c74:	4b1a      	ldr	r3, [pc, #104]	@ (8000ce0 <BSP_LED_Init+0xe0>)
 8000c76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c7a:	4a19      	ldr	r2, [pc, #100]	@ (8000ce0 <BSP_LED_Init+0xe0>)
 8000c7c:	f043 0302 	orr.w	r3, r3, #2
 8000c80:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c84:	4b16      	ldr	r3, [pc, #88]	@ (8000ce0 <BSP_LED_Init+0xe0>)
 8000c86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c8a:	f003 0302 	and.w	r3, r3, #2
 8000c8e:	60fb      	str	r3, [r7, #12]
 8000c90:	68fb      	ldr	r3, [r7, #12]
    }
    /* Configure the GPIO_LED pin */
    gpio_init_structure.Pin   = LED_PIN[Led];
 8000c92:	79fb      	ldrb	r3, [r7, #7]
 8000c94:	4a13      	ldr	r2, [pc, #76]	@ (8000ce4 <BSP_LED_Init+0xe4>)
 8000c96:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000c9a:	61bb      	str	r3, [r7, #24]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8000c9c:	2301      	movs	r3, #1
 8000c9e:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Pull  = GPIO_NOPULL;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ca4:	2303      	movs	r3, #3
 8000ca6:	627b      	str	r3, [r7, #36]	@ 0x24

    HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 8000ca8:	79fb      	ldrb	r3, [r7, #7]
 8000caa:	4a0f      	ldr	r2, [pc, #60]	@ (8000ce8 <BSP_LED_Init+0xe8>)
 8000cac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cb0:	f107 0218 	add.w	r2, r7, #24
 8000cb4:	4611      	mov	r1, r2
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	f000 fc00 	bl	80014bc <HAL_GPIO_Init>
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8000cbc:	79fb      	ldrb	r3, [r7, #7]
 8000cbe:	4a0a      	ldr	r2, [pc, #40]	@ (8000ce8 <BSP_LED_Init+0xe8>)
 8000cc0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000cc4:	79fb      	ldrb	r3, [r7, #7]
 8000cc6:	4a07      	ldr	r2, [pc, #28]	@ (8000ce4 <BSP_LED_Init+0xe4>)
 8000cc8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000ccc:	2200      	movs	r2, #0
 8000cce:	4619      	mov	r1, r3
 8000cd0:	f000 fda4 	bl	800181c <HAL_GPIO_WritePin>
  }

  return ret;
 8000cd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	3730      	adds	r7, #48	@ 0x30
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	bf00      	nop
 8000ce0:	58024400 	.word	0x58024400
 8000ce4:	08004e60 	.word	0x08004e60
 8000ce8:	2400000c 	.word	0x2400000c

08000cec <BSP_LED_On>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_On(Led_TypeDef Led)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b084      	sub	sp, #16
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	60fb      	str	r3, [r7, #12]

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 8000cfa:	79fb      	ldrb	r3, [r7, #7]
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d009      	beq.n	8000d14 <BSP_LED_On+0x28>
 8000d00:	79fb      	ldrb	r3, [r7, #7]
 8000d02:	2b01      	cmp	r3, #1
 8000d04:	d006      	beq.n	8000d14 <BSP_LED_On+0x28>
 8000d06:	79fb      	ldrb	r3, [r7, #7]
 8000d08:	2b02      	cmp	r3, #2
 8000d0a:	d003      	beq.n	8000d14 <BSP_LED_On+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8000d0c:	f06f 0301 	mvn.w	r3, #1
 8000d10:	60fb      	str	r3, [r7, #12]
 8000d12:	e00b      	b.n	8000d2c <BSP_LED_On+0x40>
  }
  else
  {
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET);
 8000d14:	79fb      	ldrb	r3, [r7, #7]
 8000d16:	4a08      	ldr	r2, [pc, #32]	@ (8000d38 <BSP_LED_On+0x4c>)
 8000d18:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000d1c:	79fb      	ldrb	r3, [r7, #7]
 8000d1e:	4a07      	ldr	r2, [pc, #28]	@ (8000d3c <BSP_LED_On+0x50>)
 8000d20:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000d24:	2201      	movs	r2, #1
 8000d26:	4619      	mov	r1, r3
 8000d28:	f000 fd78 	bl	800181c <HAL_GPIO_WritePin>
  }

  return ret;
 8000d2c:	68fb      	ldr	r3, [r7, #12]
}
 8000d2e:	4618      	mov	r0, r3
 8000d30:	3710      	adds	r7, #16
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	bf00      	nop
 8000d38:	2400000c 	.word	0x2400000c
 8000d3c:	08004e60 	.word	0x08004e60

08000d40 <BSP_LED_Toggle>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Toggle(Led_TypeDef Led)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b084      	sub	sp, #16
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	4603      	mov	r3, r0
 8000d48:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	60fb      	str	r3, [r7, #12]

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 8000d4e:	79fb      	ldrb	r3, [r7, #7]
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d009      	beq.n	8000d68 <BSP_LED_Toggle+0x28>
 8000d54:	79fb      	ldrb	r3, [r7, #7]
 8000d56:	2b01      	cmp	r3, #1
 8000d58:	d006      	beq.n	8000d68 <BSP_LED_Toggle+0x28>
 8000d5a:	79fb      	ldrb	r3, [r7, #7]
 8000d5c:	2b02      	cmp	r3, #2
 8000d5e:	d003      	beq.n	8000d68 <BSP_LED_Toggle+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8000d60:	f06f 0301 	mvn.w	r3, #1
 8000d64:	60fb      	str	r3, [r7, #12]
 8000d66:	e00b      	b.n	8000d80 <BSP_LED_Toggle+0x40>
  }
  else
  {
    HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 8000d68:	79fb      	ldrb	r3, [r7, #7]
 8000d6a:	4a08      	ldr	r2, [pc, #32]	@ (8000d8c <BSP_LED_Toggle+0x4c>)
 8000d6c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000d70:	79fb      	ldrb	r3, [r7, #7]
 8000d72:	4907      	ldr	r1, [pc, #28]	@ (8000d90 <BSP_LED_Toggle+0x50>)
 8000d74:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000d78:	4619      	mov	r1, r3
 8000d7a:	4610      	mov	r0, r2
 8000d7c:	f000 fd67 	bl	800184e <HAL_GPIO_TogglePin>
  }

  return ret;
 8000d80:	68fb      	ldr	r3, [r7, #12]
}
 8000d82:	4618      	mov	r0, r3
 8000d84:	3710      	adds	r7, #16
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd80      	pop	{r7, pc}
 8000d8a:	bf00      	nop
 8000d8c:	2400000c 	.word	0x2400000c
 8000d90:	08004e60 	.word	0x08004e60

08000d94 <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_GPIO: Button will be used as simple IO
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                    with interrupt generation capability
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b088      	sub	sp, #32
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	460a      	mov	r2, r1
 8000d9e:	71fb      	strb	r3, [r7, #7]
 8000da0:	4613      	mov	r3, r2
 8000da2:	71bb      	strb	r3, [r7, #6]
  static BSP_EXTI_LineCallback ButtonCallback[BUTTONn] = {BUTTON_USER_EXTI_Callback};
  static uint32_t  BSP_BUTTON_PRIO [BUTTONn] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] = {BUTTON_USER_EXTI_LINE};

  /* Enable the BUTTON clock */
  BUTTON_USER_GPIO_CLK_ENABLE();
 8000da4:	4b2e      	ldr	r3, [pc, #184]	@ (8000e60 <BSP_PB_Init+0xcc>)
 8000da6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000daa:	4a2d      	ldr	r2, [pc, #180]	@ (8000e60 <BSP_PB_Init+0xcc>)
 8000dac:	f043 0304 	orr.w	r3, r3, #4
 8000db0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000db4:	4b2a      	ldr	r3, [pc, #168]	@ (8000e60 <BSP_PB_Init+0xcc>)
 8000db6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000dba:	f003 0304 	and.w	r3, r3, #4
 8000dbe:	60bb      	str	r3, [r7, #8]
 8000dc0:	68bb      	ldr	r3, [r7, #8]

  gpio_init_structure.Pin = BUTTON_PIN [Button];
 8000dc2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000dc6:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 8000dc8:	2302      	movs	r3, #2
 8000dca:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8000dcc:	2302      	movs	r3, #2
 8000dce:	61bb      	str	r3, [r7, #24]

  if(ButtonMode == BUTTON_MODE_GPIO)
 8000dd0:	79bb      	ldrb	r3, [r7, #6]
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d10c      	bne.n	8000df0 <BSP_PB_Init+0x5c>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
 8000dda:	79fb      	ldrb	r3, [r7, #7]
 8000ddc:	4a21      	ldr	r2, [pc, #132]	@ (8000e64 <BSP_PB_Init+0xd0>)
 8000dde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000de2:	f107 020c 	add.w	r2, r7, #12
 8000de6:	4611      	mov	r1, r2
 8000de8:	4618      	mov	r0, r3
 8000dea:	f000 fb67 	bl	80014bc <HAL_GPIO_Init>
 8000dee:	e031      	b.n	8000e54 <BSP_PB_Init+0xc0>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 8000df0:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000df4:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8000df6:	79fb      	ldrb	r3, [r7, #7]
 8000df8:	4a1a      	ldr	r2, [pc, #104]	@ (8000e64 <BSP_PB_Init+0xd0>)
 8000dfa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000dfe:	f107 020c 	add.w	r2, r7, #12
 8000e02:	4611      	mov	r1, r2
 8000e04:	4618      	mov	r0, r3
 8000e06:	f000 fb59 	bl	80014bc <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 8000e0a:	79fb      	ldrb	r3, [r7, #7]
 8000e0c:	00db      	lsls	r3, r3, #3
 8000e0e:	4a16      	ldr	r2, [pc, #88]	@ (8000e68 <BSP_PB_Init+0xd4>)
 8000e10:	441a      	add	r2, r3
 8000e12:	79fb      	ldrb	r3, [r7, #7]
 8000e14:	4915      	ldr	r1, [pc, #84]	@ (8000e6c <BSP_PB_Init+0xd8>)
 8000e16:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000e1a:	4619      	mov	r1, r3
 8000e1c:	4610      	mov	r0, r2
 8000e1e:	f000 fafc 	bl	800141a <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 8000e22:	79fb      	ldrb	r3, [r7, #7]
 8000e24:	00db      	lsls	r3, r3, #3
 8000e26:	4a10      	ldr	r2, [pc, #64]	@ (8000e68 <BSP_PB_Init+0xd4>)
 8000e28:	1898      	adds	r0, r3, r2
 8000e2a:	79fb      	ldrb	r3, [r7, #7]
 8000e2c:	4a10      	ldr	r2, [pc, #64]	@ (8000e70 <BSP_PB_Init+0xdc>)
 8000e2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e32:	461a      	mov	r2, r3
 8000e34:	2100      	movs	r1, #0
 8000e36:	f000 fad1 	bl	80013dc <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 8000e3a:	2028      	movs	r0, #40	@ 0x28
 8000e3c:	79fb      	ldrb	r3, [r7, #7]
 8000e3e:	4a0d      	ldr	r2, [pc, #52]	@ (8000e74 <BSP_PB_Init+0xe0>)
 8000e40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e44:	2200      	movs	r2, #0
 8000e46:	4619      	mov	r1, r3
 8000e48:	f000 fa7f 	bl	800134a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8000e4c:	2328      	movs	r3, #40	@ 0x28
 8000e4e:	4618      	mov	r0, r3
 8000e50:	f000 fa95 	bl	800137e <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 8000e54:	2300      	movs	r3, #0
}
 8000e56:	4618      	mov	r0, r3
 8000e58:	3720      	adds	r7, #32
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	bf00      	nop
 8000e60:	58024400 	.word	0x58024400
 8000e64:	24000018 	.word	0x24000018
 8000e68:	240000bc 	.word	0x240000bc
 8000e6c:	08004e68 	.word	0x08004e68
 8000e70:	2400001c 	.word	0x2400001c
 8000e74:	24000020 	.word	0x24000020

08000e78 <BSP_PB_IRQHandler>:
  * @brief  BSP Button IRQ handler
  * @param  Button Can only be BUTTON_USER
  * @retval None
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b082      	sub	sp, #8
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	4603      	mov	r3, r0
 8000e80:	71fb      	strb	r3, [r7, #7]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 8000e82:	79fb      	ldrb	r3, [r7, #7]
 8000e84:	00db      	lsls	r3, r3, #3
 8000e86:	4a04      	ldr	r2, [pc, #16]	@ (8000e98 <BSP_PB_IRQHandler+0x20>)
 8000e88:	4413      	add	r3, r2
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	f000 fada 	bl	8001444 <HAL_EXTI_IRQHandler>
}
 8000e90:	bf00      	nop
 8000e92:	3708      	adds	r7, #8
 8000e94:	46bd      	mov	sp, r7
 8000e96:	bd80      	pop	{r7, pc}
 8000e98:	240000bc 	.word	0x240000bc

08000e9c <BSP_COM_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b084      	sub	sp, #16
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	6039      	str	r1, [r7, #0]
 8000ea6:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	60fb      	str	r3, [r7, #12]

  if(COM >= COMn)
 8000eac:	79fb      	ldrb	r3, [r7, #7]
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d003      	beq.n	8000eba <BSP_COM_Init+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8000eb2:	f06f 0301 	mvn.w	r3, #1
 8000eb6:	60fb      	str	r3, [r7, #12]
 8000eb8:	e018      	b.n	8000eec <BSP_COM_Init+0x50>
  }
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    /* Init the UART Msp */
    COM1_MspInit(&hcom_uart[COM]);
 8000eba:	79fb      	ldrb	r3, [r7, #7]
 8000ebc:	2294      	movs	r2, #148	@ 0x94
 8000ebe:	fb02 f303 	mul.w	r3, r2, r3
 8000ec2:	4a0d      	ldr	r2, [pc, #52]	@ (8000ef8 <BSP_COM_Init+0x5c>)
 8000ec4:	4413      	add	r3, r2
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	f000 f86e 	bl	8000fa8 <COM1_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif

    if(MX_USART3_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 8000ecc:	79fb      	ldrb	r3, [r7, #7]
 8000ece:	2294      	movs	r2, #148	@ 0x94
 8000ed0:	fb02 f303 	mul.w	r3, r2, r3
 8000ed4:	4a08      	ldr	r2, [pc, #32]	@ (8000ef8 <BSP_COM_Init+0x5c>)
 8000ed6:	4413      	add	r3, r2
 8000ed8:	6839      	ldr	r1, [r7, #0]
 8000eda:	4618      	mov	r0, r3
 8000edc:	f000 f80e 	bl	8000efc <MX_USART3_Init>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d002      	beq.n	8000eec <BSP_COM_Init+0x50>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8000ee6:	f06f 0303 	mvn.w	r3, #3
 8000eea:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8000eec:	68fb      	ldr	r3, [r7, #12]
}
 8000eee:	4618      	mov	r0, r3
 8000ef0:	3710      	adds	r7, #16
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	240000c4 	.word	0x240000c4

08000efc <MX_USART3_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_USART3_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b082      	sub	sp, #8
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
 8000f04:	6039      	str	r1, [r7, #0]
  /* USART configuration */
 huart->Instance          = COM_USART[COM1];
 8000f06:	4b15      	ldr	r3, [pc, #84]	@ (8000f5c <MX_USART3_Init+0x60>)
 8000f08:	681a      	ldr	r2, [r3, #0]
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	601a      	str	r2, [r3, #0]
 huart->Init.BaudRate     = COM_Init->BaudRate;
 8000f0e:	683b      	ldr	r3, [r7, #0]
 8000f10:	681a      	ldr	r2, [r3, #0]
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	605a      	str	r2, [r3, #4]
 huart->Init.Mode         = UART_MODE_TX_RX;
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	220c      	movs	r2, #12
 8000f1a:	615a      	str	r2, [r3, #20]
 huart->Init.Parity       = (uint32_t)COM_Init->Parity;
 8000f1c:	683b      	ldr	r3, [r7, #0]
 8000f1e:	895b      	ldrh	r3, [r3, #10]
 8000f20:	461a      	mov	r2, r3
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	611a      	str	r2, [r3, #16]
 huart->Init.WordLength   = (uint32_t)COM_Init->WordLength;
 8000f26:	683b      	ldr	r3, [r7, #0]
 8000f28:	685a      	ldr	r2, [r3, #4]
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	609a      	str	r2, [r3, #8]
 huart->Init.StopBits     = (uint32_t)COM_Init->StopBits;
 8000f2e:	683b      	ldr	r3, [r7, #0]
 8000f30:	891b      	ldrh	r3, [r3, #8]
 8000f32:	461a      	mov	r2, r3
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	60da      	str	r2, [r3, #12]
 huart->Init.HwFlowCtl    = (uint32_t)COM_Init->HwFlowCtl;
 8000f38:	683b      	ldr	r3, [r7, #0]
 8000f3a:	899b      	ldrh	r3, [r3, #12]
 8000f3c:	461a      	mov	r2, r3
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	619a      	str	r2, [r3, #24]
 huart->Init.OverSampling = UART_OVERSAMPLING_8;
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000f48:	61da      	str	r2, [r3, #28]

 return HAL_UART_Init(huart);
 8000f4a:	6878      	ldr	r0, [r7, #4]
 8000f4c:	f001 ffc6 	bl	8002edc <HAL_UART_Init>
 8000f50:	4603      	mov	r3, r0
}
 8000f52:	4618      	mov	r0, r3
 8000f54:	3708      	adds	r7, #8
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}
 8000f5a:	bf00      	nop
 8000f5c:	24000008 	.word	0x24000008

08000f60 <__io_putchar>:
 #ifdef __GNUC__
 int __io_putchar (int ch)
 #else
 int fputc (int ch, FILE *f)
 #endif /* __GNUC__ */
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b082      	sub	sp, #8
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit (&hcom_uart [COM_ActiveLogPort], (uint8_t *) &ch, 1, COM_POLL_TIMEOUT);
 8000f68:	4b09      	ldr	r3, [pc, #36]	@ (8000f90 <__io_putchar+0x30>)
 8000f6a:	781b      	ldrb	r3, [r3, #0]
 8000f6c:	461a      	mov	r2, r3
 8000f6e:	2394      	movs	r3, #148	@ 0x94
 8000f70:	fb02 f303 	mul.w	r3, r2, r3
 8000f74:	4a07      	ldr	r2, [pc, #28]	@ (8000f94 <__io_putchar+0x34>)
 8000f76:	1898      	adds	r0, r3, r2
 8000f78:	1d39      	adds	r1, r7, #4
 8000f7a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f7e:	2201      	movs	r2, #1
 8000f80:	f002 f806 	bl	8002f90 <HAL_UART_Transmit>
  return ch;
 8000f84:	687b      	ldr	r3, [r7, #4]
}
 8000f86:	4618      	mov	r0, r3
 8000f88:	3708      	adds	r7, #8
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bd80      	pop	{r7, pc}
 8000f8e:	bf00      	nop
 8000f90:	24000158 	.word	0x24000158
 8000f94:	240000c4 	.word	0x240000c4

08000f98 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  Key EXTI line detection callbacks.
  * @retval BSP status
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 8000f9c:	2000      	movs	r0, #0
 8000f9e:	f7ff fcf7 	bl	8000990 <BSP_PB_Callback>
}
 8000fa2:	bf00      	nop
 8000fa4:	bd80      	pop	{r7, pc}
	...

08000fa8 <COM1_MspInit>:
  * @brief  Initializes UART MSP.
  * @param  huart UART handle
  * @retval BSP status
  */
static void COM1_MspInit(UART_HandleTypeDef *huart)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b08a      	sub	sp, #40	@ 0x28
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable GPIO clock */
  COM1_TX_GPIO_CLK_ENABLE();
 8000fb0:	4b27      	ldr	r3, [pc, #156]	@ (8001050 <COM1_MspInit+0xa8>)
 8000fb2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fb6:	4a26      	ldr	r2, [pc, #152]	@ (8001050 <COM1_MspInit+0xa8>)
 8000fb8:	f043 0308 	orr.w	r3, r3, #8
 8000fbc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000fc0:	4b23      	ldr	r3, [pc, #140]	@ (8001050 <COM1_MspInit+0xa8>)
 8000fc2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fc6:	f003 0308 	and.w	r3, r3, #8
 8000fca:	613b      	str	r3, [r7, #16]
 8000fcc:	693b      	ldr	r3, [r7, #16]
  COM1_RX_GPIO_CLK_ENABLE();
 8000fce:	4b20      	ldr	r3, [pc, #128]	@ (8001050 <COM1_MspInit+0xa8>)
 8000fd0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fd4:	4a1e      	ldr	r2, [pc, #120]	@ (8001050 <COM1_MspInit+0xa8>)
 8000fd6:	f043 0308 	orr.w	r3, r3, #8
 8000fda:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000fde:	4b1c      	ldr	r3, [pc, #112]	@ (8001050 <COM1_MspInit+0xa8>)
 8000fe0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fe4:	f003 0308 	and.w	r3, r3, #8
 8000fe8:	60fb      	str	r3, [r7, #12]
 8000fea:	68fb      	ldr	r3, [r7, #12]

  /* Enable USART clock */
  COM1_CLK_ENABLE();
 8000fec:	4b18      	ldr	r3, [pc, #96]	@ (8001050 <COM1_MspInit+0xa8>)
 8000fee:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000ff2:	4a17      	ldr	r2, [pc, #92]	@ (8001050 <COM1_MspInit+0xa8>)
 8000ff4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000ff8:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000ffc:	4b14      	ldr	r3, [pc, #80]	@ (8001050 <COM1_MspInit+0xa8>)
 8000ffe:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001002:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001006:	60bb      	str	r3, [r7, #8]
 8001008:	68bb      	ldr	r3, [r7, #8]

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin = COM1_TX_PIN;
 800100a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800100e:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8001010:	2302      	movs	r3, #2
 8001012:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8001014:	2302      	movs	r3, #2
 8001016:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8001018:	2301      	movs	r3, #1
 800101a:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = COM1_TX_AF;
 800101c:	2307      	movs	r3, #7
 800101e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &gpio_init_structure);
 8001020:	f107 0314 	add.w	r3, r7, #20
 8001024:	4619      	mov	r1, r3
 8001026:	480b      	ldr	r0, [pc, #44]	@ (8001054 <COM1_MspInit+0xac>)
 8001028:	f000 fa48 	bl	80014bc <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin = COM1_RX_PIN;
 800102c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001030:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8001032:	2302      	movs	r3, #2
 8001034:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Alternate = COM1_RX_AF;
 8001036:	2307      	movs	r3, #7
 8001038:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &gpio_init_structure);
 800103a:	f107 0314 	add.w	r3, r7, #20
 800103e:	4619      	mov	r1, r3
 8001040:	4804      	ldr	r0, [pc, #16]	@ (8001054 <COM1_MspInit+0xac>)
 8001042:	f000 fa3b 	bl	80014bc <HAL_GPIO_Init>
}
 8001046:	bf00      	nop
 8001048:	3728      	adds	r7, #40	@ 0x28
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	58024400 	.word	0x58024400
 8001054:	58020c00 	.word	0x58020c00

08001058 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b082      	sub	sp, #8
 800105c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800105e:	2003      	movs	r0, #3
 8001060:	f000 f968 	bl	8001334 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001064:	f001 faa6 	bl	80025b4 <HAL_RCC_GetSysClockFreq>
 8001068:	4602      	mov	r2, r0
 800106a:	4b15      	ldr	r3, [pc, #84]	@ (80010c0 <HAL_Init+0x68>)
 800106c:	699b      	ldr	r3, [r3, #24]
 800106e:	0a1b      	lsrs	r3, r3, #8
 8001070:	f003 030f 	and.w	r3, r3, #15
 8001074:	4913      	ldr	r1, [pc, #76]	@ (80010c4 <HAL_Init+0x6c>)
 8001076:	5ccb      	ldrb	r3, [r1, r3]
 8001078:	f003 031f 	and.w	r3, r3, #31
 800107c:	fa22 f303 	lsr.w	r3, r2, r3
 8001080:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001082:	4b0f      	ldr	r3, [pc, #60]	@ (80010c0 <HAL_Init+0x68>)
 8001084:	699b      	ldr	r3, [r3, #24]
 8001086:	f003 030f 	and.w	r3, r3, #15
 800108a:	4a0e      	ldr	r2, [pc, #56]	@ (80010c4 <HAL_Init+0x6c>)
 800108c:	5cd3      	ldrb	r3, [r2, r3]
 800108e:	f003 031f 	and.w	r3, r3, #31
 8001092:	687a      	ldr	r2, [r7, #4]
 8001094:	fa22 f303 	lsr.w	r3, r2, r3
 8001098:	4a0b      	ldr	r2, [pc, #44]	@ (80010c8 <HAL_Init+0x70>)
 800109a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800109c:	4a0b      	ldr	r2, [pc, #44]	@ (80010cc <HAL_Init+0x74>)
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80010a2:	2000      	movs	r0, #0
 80010a4:	f000 f814 	bl	80010d0 <HAL_InitTick>
 80010a8:	4603      	mov	r3, r0
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d001      	beq.n	80010b2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80010ae:	2301      	movs	r3, #1
 80010b0:	e002      	b.n	80010b8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80010b2:	f7ff fc87 	bl	80009c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010b6:	2300      	movs	r3, #0
}
 80010b8:	4618      	mov	r0, r3
 80010ba:	3708      	adds	r7, #8
 80010bc:	46bd      	mov	sp, r7
 80010be:	bd80      	pop	{r7, pc}
 80010c0:	58024400 	.word	0x58024400
 80010c4:	08004e50 	.word	0x08004e50
 80010c8:	24000004 	.word	0x24000004
 80010cc:	24000000 	.word	0x24000000

080010d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b082      	sub	sp, #8
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80010d8:	4b15      	ldr	r3, [pc, #84]	@ (8001130 <HAL_InitTick+0x60>)
 80010da:	781b      	ldrb	r3, [r3, #0]
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d101      	bne.n	80010e4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80010e0:	2301      	movs	r3, #1
 80010e2:	e021      	b.n	8001128 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80010e4:	4b13      	ldr	r3, [pc, #76]	@ (8001134 <HAL_InitTick+0x64>)
 80010e6:	681a      	ldr	r2, [r3, #0]
 80010e8:	4b11      	ldr	r3, [pc, #68]	@ (8001130 <HAL_InitTick+0x60>)
 80010ea:	781b      	ldrb	r3, [r3, #0]
 80010ec:	4619      	mov	r1, r3
 80010ee:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80010f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80010f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80010fa:	4618      	mov	r0, r3
 80010fc:	f000 f94d 	bl	800139a <HAL_SYSTICK_Config>
 8001100:	4603      	mov	r3, r0
 8001102:	2b00      	cmp	r3, #0
 8001104:	d001      	beq.n	800110a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001106:	2301      	movs	r3, #1
 8001108:	e00e      	b.n	8001128 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	2b0f      	cmp	r3, #15
 800110e:	d80a      	bhi.n	8001126 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001110:	2200      	movs	r2, #0
 8001112:	6879      	ldr	r1, [r7, #4]
 8001114:	f04f 30ff 	mov.w	r0, #4294967295
 8001118:	f000 f917 	bl	800134a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800111c:	4a06      	ldr	r2, [pc, #24]	@ (8001138 <HAL_InitTick+0x68>)
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001122:	2300      	movs	r3, #0
 8001124:	e000      	b.n	8001128 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001126:	2301      	movs	r3, #1
}
 8001128:	4618      	mov	r0, r3
 800112a:	3708      	adds	r7, #8
 800112c:	46bd      	mov	sp, r7
 800112e:	bd80      	pop	{r7, pc}
 8001130:	24000028 	.word	0x24000028
 8001134:	24000000 	.word	0x24000000
 8001138:	24000024 	.word	0x24000024

0800113c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800113c:	b480      	push	{r7}
 800113e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001140:	4b06      	ldr	r3, [pc, #24]	@ (800115c <HAL_IncTick+0x20>)
 8001142:	781b      	ldrb	r3, [r3, #0]
 8001144:	461a      	mov	r2, r3
 8001146:	4b06      	ldr	r3, [pc, #24]	@ (8001160 <HAL_IncTick+0x24>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	4413      	add	r3, r2
 800114c:	4a04      	ldr	r2, [pc, #16]	@ (8001160 <HAL_IncTick+0x24>)
 800114e:	6013      	str	r3, [r2, #0]
}
 8001150:	bf00      	nop
 8001152:	46bd      	mov	sp, r7
 8001154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001158:	4770      	bx	lr
 800115a:	bf00      	nop
 800115c:	24000028 	.word	0x24000028
 8001160:	2400015c 	.word	0x2400015c

08001164 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001164:	b480      	push	{r7}
 8001166:	af00      	add	r7, sp, #0
  return uwTick;
 8001168:	4b03      	ldr	r3, [pc, #12]	@ (8001178 <HAL_GetTick+0x14>)
 800116a:	681b      	ldr	r3, [r3, #0]
}
 800116c:	4618      	mov	r0, r3
 800116e:	46bd      	mov	sp, r7
 8001170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001174:	4770      	bx	lr
 8001176:	bf00      	nop
 8001178:	2400015c 	.word	0x2400015c

0800117c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 800117c:	b480      	push	{r7}
 800117e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001180:	4b03      	ldr	r3, [pc, #12]	@ (8001190 <HAL_GetREVID+0x14>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	0c1b      	lsrs	r3, r3, #16
}
 8001186:	4618      	mov	r0, r3
 8001188:	46bd      	mov	sp, r7
 800118a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118e:	4770      	bx	lr
 8001190:	5c001000 	.word	0x5c001000

08001194 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001194:	b480      	push	{r7}
 8001196:	b085      	sub	sp, #20
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	f003 0307 	and.w	r3, r3, #7
 80011a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011a4:	4b0b      	ldr	r3, [pc, #44]	@ (80011d4 <__NVIC_SetPriorityGrouping+0x40>)
 80011a6:	68db      	ldr	r3, [r3, #12]
 80011a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011aa:	68ba      	ldr	r2, [r7, #8]
 80011ac:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80011b0:	4013      	ands	r3, r2
 80011b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011b8:	68bb      	ldr	r3, [r7, #8]
 80011ba:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80011bc:	4b06      	ldr	r3, [pc, #24]	@ (80011d8 <__NVIC_SetPriorityGrouping+0x44>)
 80011be:	4313      	orrs	r3, r2
 80011c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011c2:	4a04      	ldr	r2, [pc, #16]	@ (80011d4 <__NVIC_SetPriorityGrouping+0x40>)
 80011c4:	68bb      	ldr	r3, [r7, #8]
 80011c6:	60d3      	str	r3, [r2, #12]
}
 80011c8:	bf00      	nop
 80011ca:	3714      	adds	r7, #20
 80011cc:	46bd      	mov	sp, r7
 80011ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d2:	4770      	bx	lr
 80011d4:	e000ed00 	.word	0xe000ed00
 80011d8:	05fa0000 	.word	0x05fa0000

080011dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011dc:	b480      	push	{r7}
 80011de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011e0:	4b04      	ldr	r3, [pc, #16]	@ (80011f4 <__NVIC_GetPriorityGrouping+0x18>)
 80011e2:	68db      	ldr	r3, [r3, #12]
 80011e4:	0a1b      	lsrs	r3, r3, #8
 80011e6:	f003 0307 	and.w	r3, r3, #7
}
 80011ea:	4618      	mov	r0, r3
 80011ec:	46bd      	mov	sp, r7
 80011ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f2:	4770      	bx	lr
 80011f4:	e000ed00 	.word	0xe000ed00

080011f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011f8:	b480      	push	{r7}
 80011fa:	b083      	sub	sp, #12
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	4603      	mov	r3, r0
 8001200:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001202:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001206:	2b00      	cmp	r3, #0
 8001208:	db0b      	blt.n	8001222 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800120a:	88fb      	ldrh	r3, [r7, #6]
 800120c:	f003 021f 	and.w	r2, r3, #31
 8001210:	4907      	ldr	r1, [pc, #28]	@ (8001230 <__NVIC_EnableIRQ+0x38>)
 8001212:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001216:	095b      	lsrs	r3, r3, #5
 8001218:	2001      	movs	r0, #1
 800121a:	fa00 f202 	lsl.w	r2, r0, r2
 800121e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001222:	bf00      	nop
 8001224:	370c      	adds	r7, #12
 8001226:	46bd      	mov	sp, r7
 8001228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122c:	4770      	bx	lr
 800122e:	bf00      	nop
 8001230:	e000e100 	.word	0xe000e100

08001234 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001234:	b480      	push	{r7}
 8001236:	b083      	sub	sp, #12
 8001238:	af00      	add	r7, sp, #0
 800123a:	4603      	mov	r3, r0
 800123c:	6039      	str	r1, [r7, #0]
 800123e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001240:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001244:	2b00      	cmp	r3, #0
 8001246:	db0a      	blt.n	800125e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	b2da      	uxtb	r2, r3
 800124c:	490c      	ldr	r1, [pc, #48]	@ (8001280 <__NVIC_SetPriority+0x4c>)
 800124e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001252:	0112      	lsls	r2, r2, #4
 8001254:	b2d2      	uxtb	r2, r2
 8001256:	440b      	add	r3, r1
 8001258:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800125c:	e00a      	b.n	8001274 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800125e:	683b      	ldr	r3, [r7, #0]
 8001260:	b2da      	uxtb	r2, r3
 8001262:	4908      	ldr	r1, [pc, #32]	@ (8001284 <__NVIC_SetPriority+0x50>)
 8001264:	88fb      	ldrh	r3, [r7, #6]
 8001266:	f003 030f 	and.w	r3, r3, #15
 800126a:	3b04      	subs	r3, #4
 800126c:	0112      	lsls	r2, r2, #4
 800126e:	b2d2      	uxtb	r2, r2
 8001270:	440b      	add	r3, r1
 8001272:	761a      	strb	r2, [r3, #24]
}
 8001274:	bf00      	nop
 8001276:	370c      	adds	r7, #12
 8001278:	46bd      	mov	sp, r7
 800127a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127e:	4770      	bx	lr
 8001280:	e000e100 	.word	0xe000e100
 8001284:	e000ed00 	.word	0xe000ed00

08001288 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001288:	b480      	push	{r7}
 800128a:	b089      	sub	sp, #36	@ 0x24
 800128c:	af00      	add	r7, sp, #0
 800128e:	60f8      	str	r0, [r7, #12]
 8001290:	60b9      	str	r1, [r7, #8]
 8001292:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	f003 0307 	and.w	r3, r3, #7
 800129a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800129c:	69fb      	ldr	r3, [r7, #28]
 800129e:	f1c3 0307 	rsb	r3, r3, #7
 80012a2:	2b04      	cmp	r3, #4
 80012a4:	bf28      	it	cs
 80012a6:	2304      	movcs	r3, #4
 80012a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012aa:	69fb      	ldr	r3, [r7, #28]
 80012ac:	3304      	adds	r3, #4
 80012ae:	2b06      	cmp	r3, #6
 80012b0:	d902      	bls.n	80012b8 <NVIC_EncodePriority+0x30>
 80012b2:	69fb      	ldr	r3, [r7, #28]
 80012b4:	3b03      	subs	r3, #3
 80012b6:	e000      	b.n	80012ba <NVIC_EncodePriority+0x32>
 80012b8:	2300      	movs	r3, #0
 80012ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012bc:	f04f 32ff 	mov.w	r2, #4294967295
 80012c0:	69bb      	ldr	r3, [r7, #24]
 80012c2:	fa02 f303 	lsl.w	r3, r2, r3
 80012c6:	43da      	mvns	r2, r3
 80012c8:	68bb      	ldr	r3, [r7, #8]
 80012ca:	401a      	ands	r2, r3
 80012cc:	697b      	ldr	r3, [r7, #20]
 80012ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012d0:	f04f 31ff 	mov.w	r1, #4294967295
 80012d4:	697b      	ldr	r3, [r7, #20]
 80012d6:	fa01 f303 	lsl.w	r3, r1, r3
 80012da:	43d9      	mvns	r1, r3
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012e0:	4313      	orrs	r3, r2
         );
}
 80012e2:	4618      	mov	r0, r3
 80012e4:	3724      	adds	r7, #36	@ 0x24
 80012e6:	46bd      	mov	sp, r7
 80012e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ec:	4770      	bx	lr
	...

080012f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b082      	sub	sp, #8
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	3b01      	subs	r3, #1
 80012fc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001300:	d301      	bcc.n	8001306 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001302:	2301      	movs	r3, #1
 8001304:	e00f      	b.n	8001326 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001306:	4a0a      	ldr	r2, [pc, #40]	@ (8001330 <SysTick_Config+0x40>)
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	3b01      	subs	r3, #1
 800130c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800130e:	210f      	movs	r1, #15
 8001310:	f04f 30ff 	mov.w	r0, #4294967295
 8001314:	f7ff ff8e 	bl	8001234 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001318:	4b05      	ldr	r3, [pc, #20]	@ (8001330 <SysTick_Config+0x40>)
 800131a:	2200      	movs	r2, #0
 800131c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800131e:	4b04      	ldr	r3, [pc, #16]	@ (8001330 <SysTick_Config+0x40>)
 8001320:	2207      	movs	r2, #7
 8001322:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001324:	2300      	movs	r3, #0
}
 8001326:	4618      	mov	r0, r3
 8001328:	3708      	adds	r7, #8
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}
 800132e:	bf00      	nop
 8001330:	e000e010 	.word	0xe000e010

08001334 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b082      	sub	sp, #8
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800133c:	6878      	ldr	r0, [r7, #4]
 800133e:	f7ff ff29 	bl	8001194 <__NVIC_SetPriorityGrouping>
}
 8001342:	bf00      	nop
 8001344:	3708      	adds	r7, #8
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}

0800134a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800134a:	b580      	push	{r7, lr}
 800134c:	b086      	sub	sp, #24
 800134e:	af00      	add	r7, sp, #0
 8001350:	4603      	mov	r3, r0
 8001352:	60b9      	str	r1, [r7, #8]
 8001354:	607a      	str	r2, [r7, #4]
 8001356:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001358:	f7ff ff40 	bl	80011dc <__NVIC_GetPriorityGrouping>
 800135c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800135e:	687a      	ldr	r2, [r7, #4]
 8001360:	68b9      	ldr	r1, [r7, #8]
 8001362:	6978      	ldr	r0, [r7, #20]
 8001364:	f7ff ff90 	bl	8001288 <NVIC_EncodePriority>
 8001368:	4602      	mov	r2, r0
 800136a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800136e:	4611      	mov	r1, r2
 8001370:	4618      	mov	r0, r3
 8001372:	f7ff ff5f 	bl	8001234 <__NVIC_SetPriority>
}
 8001376:	bf00      	nop
 8001378:	3718      	adds	r7, #24
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}

0800137e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800137e:	b580      	push	{r7, lr}
 8001380:	b082      	sub	sp, #8
 8001382:	af00      	add	r7, sp, #0
 8001384:	4603      	mov	r3, r0
 8001386:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001388:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800138c:	4618      	mov	r0, r3
 800138e:	f7ff ff33 	bl	80011f8 <__NVIC_EnableIRQ>
}
 8001392:	bf00      	nop
 8001394:	3708      	adds	r7, #8
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}

0800139a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800139a:	b580      	push	{r7, lr}
 800139c:	b082      	sub	sp, #8
 800139e:	af00      	add	r7, sp, #0
 80013a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013a2:	6878      	ldr	r0, [r7, #4]
 80013a4:	f7ff ffa4 	bl	80012f0 <SysTick_Config>
 80013a8:	4603      	mov	r3, r0
}
 80013aa:	4618      	mov	r0, r3
 80013ac:	3708      	adds	r7, #8
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}
	...

080013b4 <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 80013b4:	b480      	push	{r7}
 80013b6:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 80013b8:	4b07      	ldr	r3, [pc, #28]	@ (80013d8 <HAL_GetCurrentCPUID+0x24>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	091b      	lsrs	r3, r3, #4
 80013be:	f003 030f 	and.w	r3, r3, #15
 80013c2:	2b07      	cmp	r3, #7
 80013c4:	d101      	bne.n	80013ca <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 80013c6:	2303      	movs	r3, #3
 80013c8:	e000      	b.n	80013cc <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 80013ca:	2301      	movs	r3, #1
  }
}
 80013cc:	4618      	mov	r0, r3
 80013ce:	46bd      	mov	sp, r7
 80013d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d4:	4770      	bx	lr
 80013d6:	bf00      	nop
 80013d8:	e000ed00 	.word	0xe000ed00

080013dc <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 80013dc:	b480      	push	{r7}
 80013de:	b087      	sub	sp, #28
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	60f8      	str	r0, [r7, #12]
 80013e4:	460b      	mov	r3, r1
 80013e6:	607a      	str	r2, [r7, #4]
 80013e8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 80013ea:	2300      	movs	r3, #0
 80013ec:	75fb      	strb	r3, [r7, #23]

  /* Check null pointer */
  if (hexti == NULL)
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d101      	bne.n	80013f8 <HAL_EXTI_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 80013f4:	2301      	movs	r3, #1
 80013f6:	e00a      	b.n	800140e <HAL_EXTI_RegisterCallback+0x32>
  }

  switch (CallbackID)
 80013f8:	7afb      	ldrb	r3, [r7, #11]
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d103      	bne.n	8001406 <HAL_EXTI_RegisterCallback+0x2a>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	687a      	ldr	r2, [r7, #4]
 8001402:	605a      	str	r2, [r3, #4]
      break;
 8001404:	e002      	b.n	800140c <HAL_EXTI_RegisterCallback+0x30>

    default:
      status = HAL_ERROR;
 8001406:	2301      	movs	r3, #1
 8001408:	75fb      	strb	r3, [r7, #23]
      break;
 800140a:	bf00      	nop
  }

  return status;
 800140c:	7dfb      	ldrb	r3, [r7, #23]
}
 800140e:	4618      	mov	r0, r3
 8001410:	371c      	adds	r7, #28
 8001412:	46bd      	mov	sp, r7
 8001414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001418:	4770      	bx	lr

0800141a <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 800141a:	b480      	push	{r7}
 800141c:	b083      	sub	sp, #12
 800141e:	af00      	add	r7, sp, #0
 8001420:	6078      	str	r0, [r7, #4]
 8001422:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	2b00      	cmp	r3, #0
 8001428:	d101      	bne.n	800142e <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 800142a:	2301      	movs	r3, #1
 800142c:	e003      	b.n	8001436 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	683a      	ldr	r2, [r7, #0]
 8001432:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8001434:	2300      	movs	r3, #0
  }
}
 8001436:	4618      	mov	r0, r3
 8001438:	370c      	adds	r7, #12
 800143a:	46bd      	mov	sp, r7
 800143c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001440:	4770      	bx	lr
	...

08001444 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b086      	sub	sp, #24
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	0c1b      	lsrs	r3, r3, #16
 8001452:	f003 0303 	and.w	r3, r3, #3
 8001456:	613b      	str	r3, [r7, #16]
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	f003 031f 	and.w	r3, r3, #31
 8001460:	2201      	movs	r2, #1
 8001462:	fa02 f303 	lsl.w	r3, r2, r3
 8001466:	60fb      	str	r3, [r7, #12]

#if defined(DUAL_CORE)
  if (HAL_GetCurrentCPUID() == CM7_CPUID)
 8001468:	f7ff ffa4 	bl	80013b4 <HAL_GetCurrentCPUID>
 800146c:	4603      	mov	r3, r0
 800146e:	2b03      	cmp	r3, #3
 8001470:	d105      	bne.n	800147e <HAL_EXTI_IRQHandler+0x3a>
  {
    /* Get pending register address */
    regaddr = (__IO uint32_t *)(&EXTI->PR1 + (EXTI_MODE_OFFSET * offset));
 8001472:	693b      	ldr	r3, [r7, #16]
 8001474:	011a      	lsls	r2, r3, #4
 8001476:	4b0f      	ldr	r3, [pc, #60]	@ (80014b4 <HAL_EXTI_IRQHandler+0x70>)
 8001478:	4413      	add	r3, r2
 800147a:	617b      	str	r3, [r7, #20]
 800147c:	e004      	b.n	8001488 <HAL_EXTI_IRQHandler+0x44>
  }
  else /* Cortex-M4*/
  {
    /* Get pending register address */
    regaddr = (__IO uint32_t *)(&EXTI->C2PR1 + (EXTI_MODE_OFFSET * offset));
 800147e:	693b      	ldr	r3, [r7, #16]
 8001480:	011a      	lsls	r2, r3, #4
 8001482:	4b0d      	ldr	r3, [pc, #52]	@ (80014b8 <HAL_EXTI_IRQHandler+0x74>)
 8001484:	4413      	add	r3, r2
 8001486:	617b      	str	r3, [r7, #20]
#else
  regaddr = (__IO uint32_t *)(&EXTI->PR1 + (EXTI_MODE_OFFSET * offset));
#endif /* DUAL_CORE */

  /* Get pending bit  */
  regval = (*regaddr & maskline);
 8001488:	697b      	ldr	r3, [r7, #20]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	68fa      	ldr	r2, [r7, #12]
 800148e:	4013      	ands	r3, r2
 8001490:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00U)
 8001492:	68bb      	ldr	r3, [r7, #8]
 8001494:	2b00      	cmp	r3, #0
 8001496:	d009      	beq.n	80014ac <HAL_EXTI_IRQHandler+0x68>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8001498:	697b      	ldr	r3, [r7, #20]
 800149a:	68fa      	ldr	r2, [r7, #12]
 800149c:	601a      	str	r2, [r3, #0]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	685b      	ldr	r3, [r3, #4]
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d002      	beq.n	80014ac <HAL_EXTI_IRQHandler+0x68>
    {
      hexti->PendingCallback();
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	685b      	ldr	r3, [r3, #4]
 80014aa:	4798      	blx	r3
    }
  }
}
 80014ac:	bf00      	nop
 80014ae:	3718      	adds	r7, #24
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bd80      	pop	{r7, pc}
 80014b4:	58000088 	.word	0x58000088
 80014b8:	580000c8 	.word	0x580000c8

080014bc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014bc:	b480      	push	{r7}
 80014be:	b089      	sub	sp, #36	@ 0x24
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
 80014c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80014c6:	2300      	movs	r3, #0
 80014c8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80014ca:	4b89      	ldr	r3, [pc, #548]	@ (80016f0 <HAL_GPIO_Init+0x234>)
 80014cc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80014ce:	e194      	b.n	80017fa <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80014d0:	683b      	ldr	r3, [r7, #0]
 80014d2:	681a      	ldr	r2, [r3, #0]
 80014d4:	2101      	movs	r1, #1
 80014d6:	69fb      	ldr	r3, [r7, #28]
 80014d8:	fa01 f303 	lsl.w	r3, r1, r3
 80014dc:	4013      	ands	r3, r2
 80014de:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80014e0:	693b      	ldr	r3, [r7, #16]
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	f000 8186 	beq.w	80017f4 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80014e8:	683b      	ldr	r3, [r7, #0]
 80014ea:	685b      	ldr	r3, [r3, #4]
 80014ec:	f003 0303 	and.w	r3, r3, #3
 80014f0:	2b01      	cmp	r3, #1
 80014f2:	d005      	beq.n	8001500 <HAL_GPIO_Init+0x44>
 80014f4:	683b      	ldr	r3, [r7, #0]
 80014f6:	685b      	ldr	r3, [r3, #4]
 80014f8:	f003 0303 	and.w	r3, r3, #3
 80014fc:	2b02      	cmp	r3, #2
 80014fe:	d130      	bne.n	8001562 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	689b      	ldr	r3, [r3, #8]
 8001504:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001506:	69fb      	ldr	r3, [r7, #28]
 8001508:	005b      	lsls	r3, r3, #1
 800150a:	2203      	movs	r2, #3
 800150c:	fa02 f303 	lsl.w	r3, r2, r3
 8001510:	43db      	mvns	r3, r3
 8001512:	69ba      	ldr	r2, [r7, #24]
 8001514:	4013      	ands	r3, r2
 8001516:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	68da      	ldr	r2, [r3, #12]
 800151c:	69fb      	ldr	r3, [r7, #28]
 800151e:	005b      	lsls	r3, r3, #1
 8001520:	fa02 f303 	lsl.w	r3, r2, r3
 8001524:	69ba      	ldr	r2, [r7, #24]
 8001526:	4313      	orrs	r3, r2
 8001528:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	69ba      	ldr	r2, [r7, #24]
 800152e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	685b      	ldr	r3, [r3, #4]
 8001534:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001536:	2201      	movs	r2, #1
 8001538:	69fb      	ldr	r3, [r7, #28]
 800153a:	fa02 f303 	lsl.w	r3, r2, r3
 800153e:	43db      	mvns	r3, r3
 8001540:	69ba      	ldr	r2, [r7, #24]
 8001542:	4013      	ands	r3, r2
 8001544:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001546:	683b      	ldr	r3, [r7, #0]
 8001548:	685b      	ldr	r3, [r3, #4]
 800154a:	091b      	lsrs	r3, r3, #4
 800154c:	f003 0201 	and.w	r2, r3, #1
 8001550:	69fb      	ldr	r3, [r7, #28]
 8001552:	fa02 f303 	lsl.w	r3, r2, r3
 8001556:	69ba      	ldr	r2, [r7, #24]
 8001558:	4313      	orrs	r3, r2
 800155a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	69ba      	ldr	r2, [r7, #24]
 8001560:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001562:	683b      	ldr	r3, [r7, #0]
 8001564:	685b      	ldr	r3, [r3, #4]
 8001566:	f003 0303 	and.w	r3, r3, #3
 800156a:	2b03      	cmp	r3, #3
 800156c:	d017      	beq.n	800159e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	68db      	ldr	r3, [r3, #12]
 8001572:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001574:	69fb      	ldr	r3, [r7, #28]
 8001576:	005b      	lsls	r3, r3, #1
 8001578:	2203      	movs	r2, #3
 800157a:	fa02 f303 	lsl.w	r3, r2, r3
 800157e:	43db      	mvns	r3, r3
 8001580:	69ba      	ldr	r2, [r7, #24]
 8001582:	4013      	ands	r3, r2
 8001584:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001586:	683b      	ldr	r3, [r7, #0]
 8001588:	689a      	ldr	r2, [r3, #8]
 800158a:	69fb      	ldr	r3, [r7, #28]
 800158c:	005b      	lsls	r3, r3, #1
 800158e:	fa02 f303 	lsl.w	r3, r2, r3
 8001592:	69ba      	ldr	r2, [r7, #24]
 8001594:	4313      	orrs	r3, r2
 8001596:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	69ba      	ldr	r2, [r7, #24]
 800159c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	685b      	ldr	r3, [r3, #4]
 80015a2:	f003 0303 	and.w	r3, r3, #3
 80015a6:	2b02      	cmp	r3, #2
 80015a8:	d123      	bne.n	80015f2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80015aa:	69fb      	ldr	r3, [r7, #28]
 80015ac:	08da      	lsrs	r2, r3, #3
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	3208      	adds	r2, #8
 80015b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80015b8:	69fb      	ldr	r3, [r7, #28]
 80015ba:	f003 0307 	and.w	r3, r3, #7
 80015be:	009b      	lsls	r3, r3, #2
 80015c0:	220f      	movs	r2, #15
 80015c2:	fa02 f303 	lsl.w	r3, r2, r3
 80015c6:	43db      	mvns	r3, r3
 80015c8:	69ba      	ldr	r2, [r7, #24]
 80015ca:	4013      	ands	r3, r2
 80015cc:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80015ce:	683b      	ldr	r3, [r7, #0]
 80015d0:	691a      	ldr	r2, [r3, #16]
 80015d2:	69fb      	ldr	r3, [r7, #28]
 80015d4:	f003 0307 	and.w	r3, r3, #7
 80015d8:	009b      	lsls	r3, r3, #2
 80015da:	fa02 f303 	lsl.w	r3, r2, r3
 80015de:	69ba      	ldr	r2, [r7, #24]
 80015e0:	4313      	orrs	r3, r2
 80015e2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80015e4:	69fb      	ldr	r3, [r7, #28]
 80015e6:	08da      	lsrs	r2, r3, #3
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	3208      	adds	r2, #8
 80015ec:	69b9      	ldr	r1, [r7, #24]
 80015ee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80015f8:	69fb      	ldr	r3, [r7, #28]
 80015fa:	005b      	lsls	r3, r3, #1
 80015fc:	2203      	movs	r2, #3
 80015fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001602:	43db      	mvns	r3, r3
 8001604:	69ba      	ldr	r2, [r7, #24]
 8001606:	4013      	ands	r3, r2
 8001608:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800160a:	683b      	ldr	r3, [r7, #0]
 800160c:	685b      	ldr	r3, [r3, #4]
 800160e:	f003 0203 	and.w	r2, r3, #3
 8001612:	69fb      	ldr	r3, [r7, #28]
 8001614:	005b      	lsls	r3, r3, #1
 8001616:	fa02 f303 	lsl.w	r3, r2, r3
 800161a:	69ba      	ldr	r2, [r7, #24]
 800161c:	4313      	orrs	r3, r2
 800161e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	69ba      	ldr	r2, [r7, #24]
 8001624:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	685b      	ldr	r3, [r3, #4]
 800162a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800162e:	2b00      	cmp	r3, #0
 8001630:	f000 80e0 	beq.w	80017f4 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001634:	4b2f      	ldr	r3, [pc, #188]	@ (80016f4 <HAL_GPIO_Init+0x238>)
 8001636:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800163a:	4a2e      	ldr	r2, [pc, #184]	@ (80016f4 <HAL_GPIO_Init+0x238>)
 800163c:	f043 0302 	orr.w	r3, r3, #2
 8001640:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001644:	4b2b      	ldr	r3, [pc, #172]	@ (80016f4 <HAL_GPIO_Init+0x238>)
 8001646:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800164a:	f003 0302 	and.w	r3, r3, #2
 800164e:	60fb      	str	r3, [r7, #12]
 8001650:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001652:	4a29      	ldr	r2, [pc, #164]	@ (80016f8 <HAL_GPIO_Init+0x23c>)
 8001654:	69fb      	ldr	r3, [r7, #28]
 8001656:	089b      	lsrs	r3, r3, #2
 8001658:	3302      	adds	r3, #2
 800165a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800165e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001660:	69fb      	ldr	r3, [r7, #28]
 8001662:	f003 0303 	and.w	r3, r3, #3
 8001666:	009b      	lsls	r3, r3, #2
 8001668:	220f      	movs	r2, #15
 800166a:	fa02 f303 	lsl.w	r3, r2, r3
 800166e:	43db      	mvns	r3, r3
 8001670:	69ba      	ldr	r2, [r7, #24]
 8001672:	4013      	ands	r3, r2
 8001674:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	4a20      	ldr	r2, [pc, #128]	@ (80016fc <HAL_GPIO_Init+0x240>)
 800167a:	4293      	cmp	r3, r2
 800167c:	d052      	beq.n	8001724 <HAL_GPIO_Init+0x268>
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	4a1f      	ldr	r2, [pc, #124]	@ (8001700 <HAL_GPIO_Init+0x244>)
 8001682:	4293      	cmp	r3, r2
 8001684:	d031      	beq.n	80016ea <HAL_GPIO_Init+0x22e>
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	4a1e      	ldr	r2, [pc, #120]	@ (8001704 <HAL_GPIO_Init+0x248>)
 800168a:	4293      	cmp	r3, r2
 800168c:	d02b      	beq.n	80016e6 <HAL_GPIO_Init+0x22a>
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	4a1d      	ldr	r2, [pc, #116]	@ (8001708 <HAL_GPIO_Init+0x24c>)
 8001692:	4293      	cmp	r3, r2
 8001694:	d025      	beq.n	80016e2 <HAL_GPIO_Init+0x226>
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	4a1c      	ldr	r2, [pc, #112]	@ (800170c <HAL_GPIO_Init+0x250>)
 800169a:	4293      	cmp	r3, r2
 800169c:	d01f      	beq.n	80016de <HAL_GPIO_Init+0x222>
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	4a1b      	ldr	r2, [pc, #108]	@ (8001710 <HAL_GPIO_Init+0x254>)
 80016a2:	4293      	cmp	r3, r2
 80016a4:	d019      	beq.n	80016da <HAL_GPIO_Init+0x21e>
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	4a1a      	ldr	r2, [pc, #104]	@ (8001714 <HAL_GPIO_Init+0x258>)
 80016aa:	4293      	cmp	r3, r2
 80016ac:	d013      	beq.n	80016d6 <HAL_GPIO_Init+0x21a>
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	4a19      	ldr	r2, [pc, #100]	@ (8001718 <HAL_GPIO_Init+0x25c>)
 80016b2:	4293      	cmp	r3, r2
 80016b4:	d00d      	beq.n	80016d2 <HAL_GPIO_Init+0x216>
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	4a18      	ldr	r2, [pc, #96]	@ (800171c <HAL_GPIO_Init+0x260>)
 80016ba:	4293      	cmp	r3, r2
 80016bc:	d007      	beq.n	80016ce <HAL_GPIO_Init+0x212>
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	4a17      	ldr	r2, [pc, #92]	@ (8001720 <HAL_GPIO_Init+0x264>)
 80016c2:	4293      	cmp	r3, r2
 80016c4:	d101      	bne.n	80016ca <HAL_GPIO_Init+0x20e>
 80016c6:	2309      	movs	r3, #9
 80016c8:	e02d      	b.n	8001726 <HAL_GPIO_Init+0x26a>
 80016ca:	230a      	movs	r3, #10
 80016cc:	e02b      	b.n	8001726 <HAL_GPIO_Init+0x26a>
 80016ce:	2308      	movs	r3, #8
 80016d0:	e029      	b.n	8001726 <HAL_GPIO_Init+0x26a>
 80016d2:	2307      	movs	r3, #7
 80016d4:	e027      	b.n	8001726 <HAL_GPIO_Init+0x26a>
 80016d6:	2306      	movs	r3, #6
 80016d8:	e025      	b.n	8001726 <HAL_GPIO_Init+0x26a>
 80016da:	2305      	movs	r3, #5
 80016dc:	e023      	b.n	8001726 <HAL_GPIO_Init+0x26a>
 80016de:	2304      	movs	r3, #4
 80016e0:	e021      	b.n	8001726 <HAL_GPIO_Init+0x26a>
 80016e2:	2303      	movs	r3, #3
 80016e4:	e01f      	b.n	8001726 <HAL_GPIO_Init+0x26a>
 80016e6:	2302      	movs	r3, #2
 80016e8:	e01d      	b.n	8001726 <HAL_GPIO_Init+0x26a>
 80016ea:	2301      	movs	r3, #1
 80016ec:	e01b      	b.n	8001726 <HAL_GPIO_Init+0x26a>
 80016ee:	bf00      	nop
 80016f0:	58000080 	.word	0x58000080
 80016f4:	58024400 	.word	0x58024400
 80016f8:	58000400 	.word	0x58000400
 80016fc:	58020000 	.word	0x58020000
 8001700:	58020400 	.word	0x58020400
 8001704:	58020800 	.word	0x58020800
 8001708:	58020c00 	.word	0x58020c00
 800170c:	58021000 	.word	0x58021000
 8001710:	58021400 	.word	0x58021400
 8001714:	58021800 	.word	0x58021800
 8001718:	58021c00 	.word	0x58021c00
 800171c:	58022000 	.word	0x58022000
 8001720:	58022400 	.word	0x58022400
 8001724:	2300      	movs	r3, #0
 8001726:	69fa      	ldr	r2, [r7, #28]
 8001728:	f002 0203 	and.w	r2, r2, #3
 800172c:	0092      	lsls	r2, r2, #2
 800172e:	4093      	lsls	r3, r2
 8001730:	69ba      	ldr	r2, [r7, #24]
 8001732:	4313      	orrs	r3, r2
 8001734:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001736:	4938      	ldr	r1, [pc, #224]	@ (8001818 <HAL_GPIO_Init+0x35c>)
 8001738:	69fb      	ldr	r3, [r7, #28]
 800173a:	089b      	lsrs	r3, r3, #2
 800173c:	3302      	adds	r3, #2
 800173e:	69ba      	ldr	r2, [r7, #24]
 8001740:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001744:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800174c:	693b      	ldr	r3, [r7, #16]
 800174e:	43db      	mvns	r3, r3
 8001750:	69ba      	ldr	r2, [r7, #24]
 8001752:	4013      	ands	r3, r2
 8001754:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001756:	683b      	ldr	r3, [r7, #0]
 8001758:	685b      	ldr	r3, [r3, #4]
 800175a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800175e:	2b00      	cmp	r3, #0
 8001760:	d003      	beq.n	800176a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001762:	69ba      	ldr	r2, [r7, #24]
 8001764:	693b      	ldr	r3, [r7, #16]
 8001766:	4313      	orrs	r3, r2
 8001768:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800176a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800176e:	69bb      	ldr	r3, [r7, #24]
 8001770:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001772:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001776:	685b      	ldr	r3, [r3, #4]
 8001778:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800177a:	693b      	ldr	r3, [r7, #16]
 800177c:	43db      	mvns	r3, r3
 800177e:	69ba      	ldr	r2, [r7, #24]
 8001780:	4013      	ands	r3, r2
 8001782:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	685b      	ldr	r3, [r3, #4]
 8001788:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800178c:	2b00      	cmp	r3, #0
 800178e:	d003      	beq.n	8001798 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001790:	69ba      	ldr	r2, [r7, #24]
 8001792:	693b      	ldr	r3, [r7, #16]
 8001794:	4313      	orrs	r3, r2
 8001796:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001798:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800179c:	69bb      	ldr	r3, [r7, #24]
 800179e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80017a0:	697b      	ldr	r3, [r7, #20]
 80017a2:	685b      	ldr	r3, [r3, #4]
 80017a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80017a6:	693b      	ldr	r3, [r7, #16]
 80017a8:	43db      	mvns	r3, r3
 80017aa:	69ba      	ldr	r2, [r7, #24]
 80017ac:	4013      	ands	r3, r2
 80017ae:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	685b      	ldr	r3, [r3, #4]
 80017b4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d003      	beq.n	80017c4 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80017bc:	69ba      	ldr	r2, [r7, #24]
 80017be:	693b      	ldr	r3, [r7, #16]
 80017c0:	4313      	orrs	r3, r2
 80017c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80017c4:	697b      	ldr	r3, [r7, #20]
 80017c6:	69ba      	ldr	r2, [r7, #24]
 80017c8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80017ca:	697b      	ldr	r3, [r7, #20]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80017d0:	693b      	ldr	r3, [r7, #16]
 80017d2:	43db      	mvns	r3, r3
 80017d4:	69ba      	ldr	r2, [r7, #24]
 80017d6:	4013      	ands	r3, r2
 80017d8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80017da:	683b      	ldr	r3, [r7, #0]
 80017dc:	685b      	ldr	r3, [r3, #4]
 80017de:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d003      	beq.n	80017ee <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80017e6:	69ba      	ldr	r2, [r7, #24]
 80017e8:	693b      	ldr	r3, [r7, #16]
 80017ea:	4313      	orrs	r3, r2
 80017ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80017ee:	697b      	ldr	r3, [r7, #20]
 80017f0:	69ba      	ldr	r2, [r7, #24]
 80017f2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80017f4:	69fb      	ldr	r3, [r7, #28]
 80017f6:	3301      	adds	r3, #1
 80017f8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80017fa:	683b      	ldr	r3, [r7, #0]
 80017fc:	681a      	ldr	r2, [r3, #0]
 80017fe:	69fb      	ldr	r3, [r7, #28]
 8001800:	fa22 f303 	lsr.w	r3, r2, r3
 8001804:	2b00      	cmp	r3, #0
 8001806:	f47f ae63 	bne.w	80014d0 <HAL_GPIO_Init+0x14>
  }
}
 800180a:	bf00      	nop
 800180c:	bf00      	nop
 800180e:	3724      	adds	r7, #36	@ 0x24
 8001810:	46bd      	mov	sp, r7
 8001812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001816:	4770      	bx	lr
 8001818:	58000400 	.word	0x58000400

0800181c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800181c:	b480      	push	{r7}
 800181e:	b083      	sub	sp, #12
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
 8001824:	460b      	mov	r3, r1
 8001826:	807b      	strh	r3, [r7, #2]
 8001828:	4613      	mov	r3, r2
 800182a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800182c:	787b      	ldrb	r3, [r7, #1]
 800182e:	2b00      	cmp	r3, #0
 8001830:	d003      	beq.n	800183a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001832:	887a      	ldrh	r2, [r7, #2]
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001838:	e003      	b.n	8001842 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800183a:	887b      	ldrh	r3, [r7, #2]
 800183c:	041a      	lsls	r2, r3, #16
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	619a      	str	r2, [r3, #24]
}
 8001842:	bf00      	nop
 8001844:	370c      	adds	r7, #12
 8001846:	46bd      	mov	sp, r7
 8001848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184c:	4770      	bx	lr

0800184e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800184e:	b480      	push	{r7}
 8001850:	b085      	sub	sp, #20
 8001852:	af00      	add	r7, sp, #0
 8001854:	6078      	str	r0, [r7, #4]
 8001856:	460b      	mov	r3, r1
 8001858:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	695b      	ldr	r3, [r3, #20]
 800185e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001860:	887a      	ldrh	r2, [r7, #2]
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	4013      	ands	r3, r2
 8001866:	041a      	lsls	r2, r3, #16
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	43d9      	mvns	r1, r3
 800186c:	887b      	ldrh	r3, [r7, #2]
 800186e:	400b      	ands	r3, r1
 8001870:	431a      	orrs	r2, r3
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	619a      	str	r2, [r3, #24]
}
 8001876:	bf00      	nop
 8001878:	3714      	adds	r7, #20
 800187a:	46bd      	mov	sp, r7
 800187c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001880:	4770      	bx	lr
	...

08001884 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8001884:	b480      	push	{r7}
 8001886:	b083      	sub	sp, #12
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 800188c:	4a08      	ldr	r2, [pc, #32]	@ (80018b0 <HAL_HSEM_FastTake+0x2c>)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	3320      	adds	r3, #32
 8001892:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001896:	4a07      	ldr	r2, [pc, #28]	@ (80018b4 <HAL_HSEM_FastTake+0x30>)
 8001898:	4293      	cmp	r3, r2
 800189a:	d101      	bne.n	80018a0 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 800189c:	2300      	movs	r3, #0
 800189e:	e000      	b.n	80018a2 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 80018a0:	2301      	movs	r3, #1
}
 80018a2:	4618      	mov	r0, r3
 80018a4:	370c      	adds	r7, #12
 80018a6:	46bd      	mov	sp, r7
 80018a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ac:	4770      	bx	lr
 80018ae:	bf00      	nop
 80018b0:	58026400 	.word	0x58026400
 80018b4:	80000300 	.word	0x80000300

080018b8 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 80018b8:	b480      	push	{r7}
 80018ba:	b083      	sub	sp, #12
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
 80018c0:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 80018c2:	4906      	ldr	r1, [pc, #24]	@ (80018dc <HAL_HSEM_Release+0x24>)
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	f443 7240 	orr.w	r2, r3, #768	@ 0x300
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 80018d0:	bf00      	nop
 80018d2:	370c      	adds	r7, #12
 80018d4:	46bd      	mov	sp, r7
 80018d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018da:	4770      	bx	lr
 80018dc:	58026400 	.word	0x58026400

080018e0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b084      	sub	sp, #16
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80018e8:	4b29      	ldr	r3, [pc, #164]	@ (8001990 <HAL_PWREx_ConfigSupply+0xb0>)
 80018ea:	68db      	ldr	r3, [r3, #12]
 80018ec:	f003 0307 	and.w	r3, r3, #7
 80018f0:	2b06      	cmp	r3, #6
 80018f2:	d00a      	beq.n	800190a <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80018f4:	4b26      	ldr	r3, [pc, #152]	@ (8001990 <HAL_PWREx_ConfigSupply+0xb0>)
 80018f6:	68db      	ldr	r3, [r3, #12]
 80018f8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80018fc:	687a      	ldr	r2, [r7, #4]
 80018fe:	429a      	cmp	r2, r3
 8001900:	d001      	beq.n	8001906 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8001902:	2301      	movs	r3, #1
 8001904:	e040      	b.n	8001988 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8001906:	2300      	movs	r3, #0
 8001908:	e03e      	b.n	8001988 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800190a:	4b21      	ldr	r3, [pc, #132]	@ (8001990 <HAL_PWREx_ConfigSupply+0xb0>)
 800190c:	68db      	ldr	r3, [r3, #12]
 800190e:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 8001912:	491f      	ldr	r1, [pc, #124]	@ (8001990 <HAL_PWREx_ConfigSupply+0xb0>)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	4313      	orrs	r3, r2
 8001918:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800191a:	f7ff fc23 	bl	8001164 <HAL_GetTick>
 800191e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001920:	e009      	b.n	8001936 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001922:	f7ff fc1f 	bl	8001164 <HAL_GetTick>
 8001926:	4602      	mov	r2, r0
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	1ad3      	subs	r3, r2, r3
 800192c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001930:	d901      	bls.n	8001936 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8001932:	2301      	movs	r3, #1
 8001934:	e028      	b.n	8001988 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001936:	4b16      	ldr	r3, [pc, #88]	@ (8001990 <HAL_PWREx_ConfigSupply+0xb0>)
 8001938:	685b      	ldr	r3, [r3, #4]
 800193a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800193e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001942:	d1ee      	bne.n	8001922 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	2b1e      	cmp	r3, #30
 8001948:	d008      	beq.n	800195c <HAL_PWREx_ConfigSupply+0x7c>
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	2b2e      	cmp	r3, #46	@ 0x2e
 800194e:	d005      	beq.n	800195c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	2b1d      	cmp	r3, #29
 8001954:	d002      	beq.n	800195c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	2b2d      	cmp	r3, #45	@ 0x2d
 800195a:	d114      	bne.n	8001986 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 800195c:	f7ff fc02 	bl	8001164 <HAL_GetTick>
 8001960:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001962:	e009      	b.n	8001978 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001964:	f7ff fbfe 	bl	8001164 <HAL_GetTick>
 8001968:	4602      	mov	r2, r0
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	1ad3      	subs	r3, r2, r3
 800196e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001972:	d901      	bls.n	8001978 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8001974:	2301      	movs	r3, #1
 8001976:	e007      	b.n	8001988 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001978:	4b05      	ldr	r3, [pc, #20]	@ (8001990 <HAL_PWREx_ConfigSupply+0xb0>)
 800197a:	68db      	ldr	r3, [r3, #12]
 800197c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001980:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001984:	d1ee      	bne.n	8001964 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8001986:	2300      	movs	r3, #0
}
 8001988:	4618      	mov	r0, r3
 800198a:	3710      	adds	r7, #16
 800198c:	46bd      	mov	sp, r7
 800198e:	bd80      	pop	{r7, pc}
 8001990:	58024800 	.word	0x58024800

08001994 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b08c      	sub	sp, #48	@ 0x30
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d102      	bne.n	80019a8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80019a2:	2301      	movs	r3, #1
 80019a4:	f000 bc48 	b.w	8002238 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f003 0301 	and.w	r3, r3, #1
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	f000 8088 	beq.w	8001ac6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80019b6:	4b99      	ldr	r3, [pc, #612]	@ (8001c1c <HAL_RCC_OscConfig+0x288>)
 80019b8:	691b      	ldr	r3, [r3, #16]
 80019ba:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80019be:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80019c0:	4b96      	ldr	r3, [pc, #600]	@ (8001c1c <HAL_RCC_OscConfig+0x288>)
 80019c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019c4:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80019c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80019c8:	2b10      	cmp	r3, #16
 80019ca:	d007      	beq.n	80019dc <HAL_RCC_OscConfig+0x48>
 80019cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80019ce:	2b18      	cmp	r3, #24
 80019d0:	d111      	bne.n	80019f6 <HAL_RCC_OscConfig+0x62>
 80019d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80019d4:	f003 0303 	and.w	r3, r3, #3
 80019d8:	2b02      	cmp	r3, #2
 80019da:	d10c      	bne.n	80019f6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019dc:	4b8f      	ldr	r3, [pc, #572]	@ (8001c1c <HAL_RCC_OscConfig+0x288>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d06d      	beq.n	8001ac4 <HAL_RCC_OscConfig+0x130>
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d169      	bne.n	8001ac4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80019f0:	2301      	movs	r3, #1
 80019f2:	f000 bc21 	b.w	8002238 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	685b      	ldr	r3, [r3, #4]
 80019fa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80019fe:	d106      	bne.n	8001a0e <HAL_RCC_OscConfig+0x7a>
 8001a00:	4b86      	ldr	r3, [pc, #536]	@ (8001c1c <HAL_RCC_OscConfig+0x288>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	4a85      	ldr	r2, [pc, #532]	@ (8001c1c <HAL_RCC_OscConfig+0x288>)
 8001a06:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001a0a:	6013      	str	r3, [r2, #0]
 8001a0c:	e02e      	b.n	8001a6c <HAL_RCC_OscConfig+0xd8>
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	685b      	ldr	r3, [r3, #4]
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d10c      	bne.n	8001a30 <HAL_RCC_OscConfig+0x9c>
 8001a16:	4b81      	ldr	r3, [pc, #516]	@ (8001c1c <HAL_RCC_OscConfig+0x288>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	4a80      	ldr	r2, [pc, #512]	@ (8001c1c <HAL_RCC_OscConfig+0x288>)
 8001a1c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001a20:	6013      	str	r3, [r2, #0]
 8001a22:	4b7e      	ldr	r3, [pc, #504]	@ (8001c1c <HAL_RCC_OscConfig+0x288>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	4a7d      	ldr	r2, [pc, #500]	@ (8001c1c <HAL_RCC_OscConfig+0x288>)
 8001a28:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001a2c:	6013      	str	r3, [r2, #0]
 8001a2e:	e01d      	b.n	8001a6c <HAL_RCC_OscConfig+0xd8>
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	685b      	ldr	r3, [r3, #4]
 8001a34:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001a38:	d10c      	bne.n	8001a54 <HAL_RCC_OscConfig+0xc0>
 8001a3a:	4b78      	ldr	r3, [pc, #480]	@ (8001c1c <HAL_RCC_OscConfig+0x288>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	4a77      	ldr	r2, [pc, #476]	@ (8001c1c <HAL_RCC_OscConfig+0x288>)
 8001a40:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001a44:	6013      	str	r3, [r2, #0]
 8001a46:	4b75      	ldr	r3, [pc, #468]	@ (8001c1c <HAL_RCC_OscConfig+0x288>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	4a74      	ldr	r2, [pc, #464]	@ (8001c1c <HAL_RCC_OscConfig+0x288>)
 8001a4c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001a50:	6013      	str	r3, [r2, #0]
 8001a52:	e00b      	b.n	8001a6c <HAL_RCC_OscConfig+0xd8>
 8001a54:	4b71      	ldr	r3, [pc, #452]	@ (8001c1c <HAL_RCC_OscConfig+0x288>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	4a70      	ldr	r2, [pc, #448]	@ (8001c1c <HAL_RCC_OscConfig+0x288>)
 8001a5a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001a5e:	6013      	str	r3, [r2, #0]
 8001a60:	4b6e      	ldr	r3, [pc, #440]	@ (8001c1c <HAL_RCC_OscConfig+0x288>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	4a6d      	ldr	r2, [pc, #436]	@ (8001c1c <HAL_RCC_OscConfig+0x288>)
 8001a66:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001a6a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	685b      	ldr	r3, [r3, #4]
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d013      	beq.n	8001a9c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a74:	f7ff fb76 	bl	8001164 <HAL_GetTick>
 8001a78:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001a7a:	e008      	b.n	8001a8e <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a7c:	f7ff fb72 	bl	8001164 <HAL_GetTick>
 8001a80:	4602      	mov	r2, r0
 8001a82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a84:	1ad3      	subs	r3, r2, r3
 8001a86:	2b64      	cmp	r3, #100	@ 0x64
 8001a88:	d901      	bls.n	8001a8e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001a8a:	2303      	movs	r3, #3
 8001a8c:	e3d4      	b.n	8002238 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001a8e:	4b63      	ldr	r3, [pc, #396]	@ (8001c1c <HAL_RCC_OscConfig+0x288>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d0f0      	beq.n	8001a7c <HAL_RCC_OscConfig+0xe8>
 8001a9a:	e014      	b.n	8001ac6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a9c:	f7ff fb62 	bl	8001164 <HAL_GetTick>
 8001aa0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001aa2:	e008      	b.n	8001ab6 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001aa4:	f7ff fb5e 	bl	8001164 <HAL_GetTick>
 8001aa8:	4602      	mov	r2, r0
 8001aaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001aac:	1ad3      	subs	r3, r2, r3
 8001aae:	2b64      	cmp	r3, #100	@ 0x64
 8001ab0:	d901      	bls.n	8001ab6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001ab2:	2303      	movs	r3, #3
 8001ab4:	e3c0      	b.n	8002238 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001ab6:	4b59      	ldr	r3, [pc, #356]	@ (8001c1c <HAL_RCC_OscConfig+0x288>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d1f0      	bne.n	8001aa4 <HAL_RCC_OscConfig+0x110>
 8001ac2:	e000      	b.n	8001ac6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ac4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f003 0302 	and.w	r3, r3, #2
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	f000 80ca 	beq.w	8001c68 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001ad4:	4b51      	ldr	r3, [pc, #324]	@ (8001c1c <HAL_RCC_OscConfig+0x288>)
 8001ad6:	691b      	ldr	r3, [r3, #16]
 8001ad8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001adc:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001ade:	4b4f      	ldr	r3, [pc, #316]	@ (8001c1c <HAL_RCC_OscConfig+0x288>)
 8001ae0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ae2:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001ae4:	6a3b      	ldr	r3, [r7, #32]
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d007      	beq.n	8001afa <HAL_RCC_OscConfig+0x166>
 8001aea:	6a3b      	ldr	r3, [r7, #32]
 8001aec:	2b18      	cmp	r3, #24
 8001aee:	d156      	bne.n	8001b9e <HAL_RCC_OscConfig+0x20a>
 8001af0:	69fb      	ldr	r3, [r7, #28]
 8001af2:	f003 0303 	and.w	r3, r3, #3
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d151      	bne.n	8001b9e <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001afa:	4b48      	ldr	r3, [pc, #288]	@ (8001c1c <HAL_RCC_OscConfig+0x288>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f003 0304 	and.w	r3, r3, #4
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d005      	beq.n	8001b12 <HAL_RCC_OscConfig+0x17e>
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	68db      	ldr	r3, [r3, #12]
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d101      	bne.n	8001b12 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8001b0e:	2301      	movs	r3, #1
 8001b10:	e392      	b.n	8002238 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001b12:	4b42      	ldr	r3, [pc, #264]	@ (8001c1c <HAL_RCC_OscConfig+0x288>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f023 0219 	bic.w	r2, r3, #25
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	68db      	ldr	r3, [r3, #12]
 8001b1e:	493f      	ldr	r1, [pc, #252]	@ (8001c1c <HAL_RCC_OscConfig+0x288>)
 8001b20:	4313      	orrs	r3, r2
 8001b22:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b24:	f7ff fb1e 	bl	8001164 <HAL_GetTick>
 8001b28:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001b2a:	e008      	b.n	8001b3e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b2c:	f7ff fb1a 	bl	8001164 <HAL_GetTick>
 8001b30:	4602      	mov	r2, r0
 8001b32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b34:	1ad3      	subs	r3, r2, r3
 8001b36:	2b02      	cmp	r3, #2
 8001b38:	d901      	bls.n	8001b3e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001b3a:	2303      	movs	r3, #3
 8001b3c:	e37c      	b.n	8002238 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001b3e:	4b37      	ldr	r3, [pc, #220]	@ (8001c1c <HAL_RCC_OscConfig+0x288>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f003 0304 	and.w	r3, r3, #4
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d0f0      	beq.n	8001b2c <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b4a:	f7ff fb17 	bl	800117c <HAL_GetREVID>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001b54:	4293      	cmp	r3, r2
 8001b56:	d817      	bhi.n	8001b88 <HAL_RCC_OscConfig+0x1f4>
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	691b      	ldr	r3, [r3, #16]
 8001b5c:	2b40      	cmp	r3, #64	@ 0x40
 8001b5e:	d108      	bne.n	8001b72 <HAL_RCC_OscConfig+0x1de>
 8001b60:	4b2e      	ldr	r3, [pc, #184]	@ (8001c1c <HAL_RCC_OscConfig+0x288>)
 8001b62:	685b      	ldr	r3, [r3, #4]
 8001b64:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8001b68:	4a2c      	ldr	r2, [pc, #176]	@ (8001c1c <HAL_RCC_OscConfig+0x288>)
 8001b6a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001b6e:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001b70:	e07a      	b.n	8001c68 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b72:	4b2a      	ldr	r3, [pc, #168]	@ (8001c1c <HAL_RCC_OscConfig+0x288>)
 8001b74:	685b      	ldr	r3, [r3, #4]
 8001b76:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	691b      	ldr	r3, [r3, #16]
 8001b7e:	031b      	lsls	r3, r3, #12
 8001b80:	4926      	ldr	r1, [pc, #152]	@ (8001c1c <HAL_RCC_OscConfig+0x288>)
 8001b82:	4313      	orrs	r3, r2
 8001b84:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001b86:	e06f      	b.n	8001c68 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b88:	4b24      	ldr	r3, [pc, #144]	@ (8001c1c <HAL_RCC_OscConfig+0x288>)
 8001b8a:	685b      	ldr	r3, [r3, #4]
 8001b8c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	691b      	ldr	r3, [r3, #16]
 8001b94:	061b      	lsls	r3, r3, #24
 8001b96:	4921      	ldr	r1, [pc, #132]	@ (8001c1c <HAL_RCC_OscConfig+0x288>)
 8001b98:	4313      	orrs	r3, r2
 8001b9a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001b9c:	e064      	b.n	8001c68 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	68db      	ldr	r3, [r3, #12]
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d047      	beq.n	8001c36 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001ba6:	4b1d      	ldr	r3, [pc, #116]	@ (8001c1c <HAL_RCC_OscConfig+0x288>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f023 0219 	bic.w	r2, r3, #25
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	68db      	ldr	r3, [r3, #12]
 8001bb2:	491a      	ldr	r1, [pc, #104]	@ (8001c1c <HAL_RCC_OscConfig+0x288>)
 8001bb4:	4313      	orrs	r3, r2
 8001bb6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bb8:	f7ff fad4 	bl	8001164 <HAL_GetTick>
 8001bbc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001bbe:	e008      	b.n	8001bd2 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001bc0:	f7ff fad0 	bl	8001164 <HAL_GetTick>
 8001bc4:	4602      	mov	r2, r0
 8001bc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bc8:	1ad3      	subs	r3, r2, r3
 8001bca:	2b02      	cmp	r3, #2
 8001bcc:	d901      	bls.n	8001bd2 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8001bce:	2303      	movs	r3, #3
 8001bd0:	e332      	b.n	8002238 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001bd2:	4b12      	ldr	r3, [pc, #72]	@ (8001c1c <HAL_RCC_OscConfig+0x288>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f003 0304 	and.w	r3, r3, #4
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d0f0      	beq.n	8001bc0 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bde:	f7ff facd 	bl	800117c <HAL_GetREVID>
 8001be2:	4603      	mov	r3, r0
 8001be4:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001be8:	4293      	cmp	r3, r2
 8001bea:	d819      	bhi.n	8001c20 <HAL_RCC_OscConfig+0x28c>
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	691b      	ldr	r3, [r3, #16]
 8001bf0:	2b40      	cmp	r3, #64	@ 0x40
 8001bf2:	d108      	bne.n	8001c06 <HAL_RCC_OscConfig+0x272>
 8001bf4:	4b09      	ldr	r3, [pc, #36]	@ (8001c1c <HAL_RCC_OscConfig+0x288>)
 8001bf6:	685b      	ldr	r3, [r3, #4]
 8001bf8:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8001bfc:	4a07      	ldr	r2, [pc, #28]	@ (8001c1c <HAL_RCC_OscConfig+0x288>)
 8001bfe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001c02:	6053      	str	r3, [r2, #4]
 8001c04:	e030      	b.n	8001c68 <HAL_RCC_OscConfig+0x2d4>
 8001c06:	4b05      	ldr	r3, [pc, #20]	@ (8001c1c <HAL_RCC_OscConfig+0x288>)
 8001c08:	685b      	ldr	r3, [r3, #4]
 8001c0a:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	691b      	ldr	r3, [r3, #16]
 8001c12:	031b      	lsls	r3, r3, #12
 8001c14:	4901      	ldr	r1, [pc, #4]	@ (8001c1c <HAL_RCC_OscConfig+0x288>)
 8001c16:	4313      	orrs	r3, r2
 8001c18:	604b      	str	r3, [r1, #4]
 8001c1a:	e025      	b.n	8001c68 <HAL_RCC_OscConfig+0x2d4>
 8001c1c:	58024400 	.word	0x58024400
 8001c20:	4b9a      	ldr	r3, [pc, #616]	@ (8001e8c <HAL_RCC_OscConfig+0x4f8>)
 8001c22:	685b      	ldr	r3, [r3, #4]
 8001c24:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	691b      	ldr	r3, [r3, #16]
 8001c2c:	061b      	lsls	r3, r3, #24
 8001c2e:	4997      	ldr	r1, [pc, #604]	@ (8001e8c <HAL_RCC_OscConfig+0x4f8>)
 8001c30:	4313      	orrs	r3, r2
 8001c32:	604b      	str	r3, [r1, #4]
 8001c34:	e018      	b.n	8001c68 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c36:	4b95      	ldr	r3, [pc, #596]	@ (8001e8c <HAL_RCC_OscConfig+0x4f8>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	4a94      	ldr	r2, [pc, #592]	@ (8001e8c <HAL_RCC_OscConfig+0x4f8>)
 8001c3c:	f023 0301 	bic.w	r3, r3, #1
 8001c40:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c42:	f7ff fa8f 	bl	8001164 <HAL_GetTick>
 8001c46:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001c48:	e008      	b.n	8001c5c <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c4a:	f7ff fa8b 	bl	8001164 <HAL_GetTick>
 8001c4e:	4602      	mov	r2, r0
 8001c50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c52:	1ad3      	subs	r3, r2, r3
 8001c54:	2b02      	cmp	r3, #2
 8001c56:	d901      	bls.n	8001c5c <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8001c58:	2303      	movs	r3, #3
 8001c5a:	e2ed      	b.n	8002238 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001c5c:	4b8b      	ldr	r3, [pc, #556]	@ (8001e8c <HAL_RCC_OscConfig+0x4f8>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f003 0304 	and.w	r3, r3, #4
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d1f0      	bne.n	8001c4a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f003 0310 	and.w	r3, r3, #16
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	f000 80a9 	beq.w	8001dc8 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c76:	4b85      	ldr	r3, [pc, #532]	@ (8001e8c <HAL_RCC_OscConfig+0x4f8>)
 8001c78:	691b      	ldr	r3, [r3, #16]
 8001c7a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001c7e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001c80:	4b82      	ldr	r3, [pc, #520]	@ (8001e8c <HAL_RCC_OscConfig+0x4f8>)
 8001c82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c84:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001c86:	69bb      	ldr	r3, [r7, #24]
 8001c88:	2b08      	cmp	r3, #8
 8001c8a:	d007      	beq.n	8001c9c <HAL_RCC_OscConfig+0x308>
 8001c8c:	69bb      	ldr	r3, [r7, #24]
 8001c8e:	2b18      	cmp	r3, #24
 8001c90:	d13a      	bne.n	8001d08 <HAL_RCC_OscConfig+0x374>
 8001c92:	697b      	ldr	r3, [r7, #20]
 8001c94:	f003 0303 	and.w	r3, r3, #3
 8001c98:	2b01      	cmp	r3, #1
 8001c9a:	d135      	bne.n	8001d08 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001c9c:	4b7b      	ldr	r3, [pc, #492]	@ (8001e8c <HAL_RCC_OscConfig+0x4f8>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d005      	beq.n	8001cb4 <HAL_RCC_OscConfig+0x320>
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	69db      	ldr	r3, [r3, #28]
 8001cac:	2b80      	cmp	r3, #128	@ 0x80
 8001cae:	d001      	beq.n	8001cb4 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8001cb0:	2301      	movs	r3, #1
 8001cb2:	e2c1      	b.n	8002238 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001cb4:	f7ff fa62 	bl	800117c <HAL_GetREVID>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001cbe:	4293      	cmp	r3, r2
 8001cc0:	d817      	bhi.n	8001cf2 <HAL_RCC_OscConfig+0x35e>
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	6a1b      	ldr	r3, [r3, #32]
 8001cc6:	2b20      	cmp	r3, #32
 8001cc8:	d108      	bne.n	8001cdc <HAL_RCC_OscConfig+0x348>
 8001cca:	4b70      	ldr	r3, [pc, #448]	@ (8001e8c <HAL_RCC_OscConfig+0x4f8>)
 8001ccc:	685b      	ldr	r3, [r3, #4]
 8001cce:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8001cd2:	4a6e      	ldr	r2, [pc, #440]	@ (8001e8c <HAL_RCC_OscConfig+0x4f8>)
 8001cd4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001cd8:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001cda:	e075      	b.n	8001dc8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001cdc:	4b6b      	ldr	r3, [pc, #428]	@ (8001e8c <HAL_RCC_OscConfig+0x4f8>)
 8001cde:	685b      	ldr	r3, [r3, #4]
 8001ce0:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	6a1b      	ldr	r3, [r3, #32]
 8001ce8:	069b      	lsls	r3, r3, #26
 8001cea:	4968      	ldr	r1, [pc, #416]	@ (8001e8c <HAL_RCC_OscConfig+0x4f8>)
 8001cec:	4313      	orrs	r3, r2
 8001cee:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001cf0:	e06a      	b.n	8001dc8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001cf2:	4b66      	ldr	r3, [pc, #408]	@ (8001e8c <HAL_RCC_OscConfig+0x4f8>)
 8001cf4:	68db      	ldr	r3, [r3, #12]
 8001cf6:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	6a1b      	ldr	r3, [r3, #32]
 8001cfe:	061b      	lsls	r3, r3, #24
 8001d00:	4962      	ldr	r1, [pc, #392]	@ (8001e8c <HAL_RCC_OscConfig+0x4f8>)
 8001d02:	4313      	orrs	r3, r2
 8001d04:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001d06:	e05f      	b.n	8001dc8 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	69db      	ldr	r3, [r3, #28]
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d042      	beq.n	8001d96 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001d10:	4b5e      	ldr	r3, [pc, #376]	@ (8001e8c <HAL_RCC_OscConfig+0x4f8>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	4a5d      	ldr	r2, [pc, #372]	@ (8001e8c <HAL_RCC_OscConfig+0x4f8>)
 8001d16:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001d1a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d1c:	f7ff fa22 	bl	8001164 <HAL_GetTick>
 8001d20:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001d22:	e008      	b.n	8001d36 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001d24:	f7ff fa1e 	bl	8001164 <HAL_GetTick>
 8001d28:	4602      	mov	r2, r0
 8001d2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d2c:	1ad3      	subs	r3, r2, r3
 8001d2e:	2b02      	cmp	r3, #2
 8001d30:	d901      	bls.n	8001d36 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8001d32:	2303      	movs	r3, #3
 8001d34:	e280      	b.n	8002238 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001d36:	4b55      	ldr	r3, [pc, #340]	@ (8001e8c <HAL_RCC_OscConfig+0x4f8>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d0f0      	beq.n	8001d24 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001d42:	f7ff fa1b 	bl	800117c <HAL_GetREVID>
 8001d46:	4603      	mov	r3, r0
 8001d48:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001d4c:	4293      	cmp	r3, r2
 8001d4e:	d817      	bhi.n	8001d80 <HAL_RCC_OscConfig+0x3ec>
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	6a1b      	ldr	r3, [r3, #32]
 8001d54:	2b20      	cmp	r3, #32
 8001d56:	d108      	bne.n	8001d6a <HAL_RCC_OscConfig+0x3d6>
 8001d58:	4b4c      	ldr	r3, [pc, #304]	@ (8001e8c <HAL_RCC_OscConfig+0x4f8>)
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8001d60:	4a4a      	ldr	r2, [pc, #296]	@ (8001e8c <HAL_RCC_OscConfig+0x4f8>)
 8001d62:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001d66:	6053      	str	r3, [r2, #4]
 8001d68:	e02e      	b.n	8001dc8 <HAL_RCC_OscConfig+0x434>
 8001d6a:	4b48      	ldr	r3, [pc, #288]	@ (8001e8c <HAL_RCC_OscConfig+0x4f8>)
 8001d6c:	685b      	ldr	r3, [r3, #4]
 8001d6e:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	6a1b      	ldr	r3, [r3, #32]
 8001d76:	069b      	lsls	r3, r3, #26
 8001d78:	4944      	ldr	r1, [pc, #272]	@ (8001e8c <HAL_RCC_OscConfig+0x4f8>)
 8001d7a:	4313      	orrs	r3, r2
 8001d7c:	604b      	str	r3, [r1, #4]
 8001d7e:	e023      	b.n	8001dc8 <HAL_RCC_OscConfig+0x434>
 8001d80:	4b42      	ldr	r3, [pc, #264]	@ (8001e8c <HAL_RCC_OscConfig+0x4f8>)
 8001d82:	68db      	ldr	r3, [r3, #12]
 8001d84:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	6a1b      	ldr	r3, [r3, #32]
 8001d8c:	061b      	lsls	r3, r3, #24
 8001d8e:	493f      	ldr	r1, [pc, #252]	@ (8001e8c <HAL_RCC_OscConfig+0x4f8>)
 8001d90:	4313      	orrs	r3, r2
 8001d92:	60cb      	str	r3, [r1, #12]
 8001d94:	e018      	b.n	8001dc8 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001d96:	4b3d      	ldr	r3, [pc, #244]	@ (8001e8c <HAL_RCC_OscConfig+0x4f8>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	4a3c      	ldr	r2, [pc, #240]	@ (8001e8c <HAL_RCC_OscConfig+0x4f8>)
 8001d9c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001da0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001da2:	f7ff f9df 	bl	8001164 <HAL_GetTick>
 8001da6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001da8:	e008      	b.n	8001dbc <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001daa:	f7ff f9db 	bl	8001164 <HAL_GetTick>
 8001dae:	4602      	mov	r2, r0
 8001db0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001db2:	1ad3      	subs	r3, r2, r3
 8001db4:	2b02      	cmp	r3, #2
 8001db6:	d901      	bls.n	8001dbc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001db8:	2303      	movs	r3, #3
 8001dba:	e23d      	b.n	8002238 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001dbc:	4b33      	ldr	r3, [pc, #204]	@ (8001e8c <HAL_RCC_OscConfig+0x4f8>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d1f0      	bne.n	8001daa <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f003 0308 	and.w	r3, r3, #8
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d036      	beq.n	8001e42 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	695b      	ldr	r3, [r3, #20]
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d019      	beq.n	8001e10 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ddc:	4b2b      	ldr	r3, [pc, #172]	@ (8001e8c <HAL_RCC_OscConfig+0x4f8>)
 8001dde:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001de0:	4a2a      	ldr	r2, [pc, #168]	@ (8001e8c <HAL_RCC_OscConfig+0x4f8>)
 8001de2:	f043 0301 	orr.w	r3, r3, #1
 8001de6:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001de8:	f7ff f9bc 	bl	8001164 <HAL_GetTick>
 8001dec:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001dee:	e008      	b.n	8001e02 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001df0:	f7ff f9b8 	bl	8001164 <HAL_GetTick>
 8001df4:	4602      	mov	r2, r0
 8001df6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001df8:	1ad3      	subs	r3, r2, r3
 8001dfa:	2b02      	cmp	r3, #2
 8001dfc:	d901      	bls.n	8001e02 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8001dfe:	2303      	movs	r3, #3
 8001e00:	e21a      	b.n	8002238 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001e02:	4b22      	ldr	r3, [pc, #136]	@ (8001e8c <HAL_RCC_OscConfig+0x4f8>)
 8001e04:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001e06:	f003 0302 	and.w	r3, r3, #2
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d0f0      	beq.n	8001df0 <HAL_RCC_OscConfig+0x45c>
 8001e0e:	e018      	b.n	8001e42 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e10:	4b1e      	ldr	r3, [pc, #120]	@ (8001e8c <HAL_RCC_OscConfig+0x4f8>)
 8001e12:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001e14:	4a1d      	ldr	r2, [pc, #116]	@ (8001e8c <HAL_RCC_OscConfig+0x4f8>)
 8001e16:	f023 0301 	bic.w	r3, r3, #1
 8001e1a:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e1c:	f7ff f9a2 	bl	8001164 <HAL_GetTick>
 8001e20:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001e22:	e008      	b.n	8001e36 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e24:	f7ff f99e 	bl	8001164 <HAL_GetTick>
 8001e28:	4602      	mov	r2, r0
 8001e2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e2c:	1ad3      	subs	r3, r2, r3
 8001e2e:	2b02      	cmp	r3, #2
 8001e30:	d901      	bls.n	8001e36 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8001e32:	2303      	movs	r3, #3
 8001e34:	e200      	b.n	8002238 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001e36:	4b15      	ldr	r3, [pc, #84]	@ (8001e8c <HAL_RCC_OscConfig+0x4f8>)
 8001e38:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001e3a:	f003 0302 	and.w	r3, r3, #2
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d1f0      	bne.n	8001e24 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f003 0320 	and.w	r3, r3, #32
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d039      	beq.n	8001ec2 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	699b      	ldr	r3, [r3, #24]
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d01c      	beq.n	8001e90 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001e56:	4b0d      	ldr	r3, [pc, #52]	@ (8001e8c <HAL_RCC_OscConfig+0x4f8>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	4a0c      	ldr	r2, [pc, #48]	@ (8001e8c <HAL_RCC_OscConfig+0x4f8>)
 8001e5c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001e60:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001e62:	f7ff f97f 	bl	8001164 <HAL_GetTick>
 8001e66:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001e68:	e008      	b.n	8001e7c <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001e6a:	f7ff f97b 	bl	8001164 <HAL_GetTick>
 8001e6e:	4602      	mov	r2, r0
 8001e70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e72:	1ad3      	subs	r3, r2, r3
 8001e74:	2b02      	cmp	r3, #2
 8001e76:	d901      	bls.n	8001e7c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8001e78:	2303      	movs	r3, #3
 8001e7a:	e1dd      	b.n	8002238 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001e7c:	4b03      	ldr	r3, [pc, #12]	@ (8001e8c <HAL_RCC_OscConfig+0x4f8>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d0f0      	beq.n	8001e6a <HAL_RCC_OscConfig+0x4d6>
 8001e88:	e01b      	b.n	8001ec2 <HAL_RCC_OscConfig+0x52e>
 8001e8a:	bf00      	nop
 8001e8c:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001e90:	4b9b      	ldr	r3, [pc, #620]	@ (8002100 <HAL_RCC_OscConfig+0x76c>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	4a9a      	ldr	r2, [pc, #616]	@ (8002100 <HAL_RCC_OscConfig+0x76c>)
 8001e96:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001e9a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001e9c:	f7ff f962 	bl	8001164 <HAL_GetTick>
 8001ea0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001ea2:	e008      	b.n	8001eb6 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001ea4:	f7ff f95e 	bl	8001164 <HAL_GetTick>
 8001ea8:	4602      	mov	r2, r0
 8001eaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001eac:	1ad3      	subs	r3, r2, r3
 8001eae:	2b02      	cmp	r3, #2
 8001eb0:	d901      	bls.n	8001eb6 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8001eb2:	2303      	movs	r3, #3
 8001eb4:	e1c0      	b.n	8002238 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001eb6:	4b92      	ldr	r3, [pc, #584]	@ (8002100 <HAL_RCC_OscConfig+0x76c>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d1f0      	bne.n	8001ea4 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f003 0304 	and.w	r3, r3, #4
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	f000 8081 	beq.w	8001fd2 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001ed0:	4b8c      	ldr	r3, [pc, #560]	@ (8002104 <HAL_RCC_OscConfig+0x770>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4a8b      	ldr	r2, [pc, #556]	@ (8002104 <HAL_RCC_OscConfig+0x770>)
 8001ed6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001eda:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001edc:	f7ff f942 	bl	8001164 <HAL_GetTick>
 8001ee0:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001ee2:	e008      	b.n	8001ef6 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ee4:	f7ff f93e 	bl	8001164 <HAL_GetTick>
 8001ee8:	4602      	mov	r2, r0
 8001eea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001eec:	1ad3      	subs	r3, r2, r3
 8001eee:	2b64      	cmp	r3, #100	@ 0x64
 8001ef0:	d901      	bls.n	8001ef6 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8001ef2:	2303      	movs	r3, #3
 8001ef4:	e1a0      	b.n	8002238 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001ef6:	4b83      	ldr	r3, [pc, #524]	@ (8002104 <HAL_RCC_OscConfig+0x770>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d0f0      	beq.n	8001ee4 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	689b      	ldr	r3, [r3, #8]
 8001f06:	2b01      	cmp	r3, #1
 8001f08:	d106      	bne.n	8001f18 <HAL_RCC_OscConfig+0x584>
 8001f0a:	4b7d      	ldr	r3, [pc, #500]	@ (8002100 <HAL_RCC_OscConfig+0x76c>)
 8001f0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f0e:	4a7c      	ldr	r2, [pc, #496]	@ (8002100 <HAL_RCC_OscConfig+0x76c>)
 8001f10:	f043 0301 	orr.w	r3, r3, #1
 8001f14:	6713      	str	r3, [r2, #112]	@ 0x70
 8001f16:	e02d      	b.n	8001f74 <HAL_RCC_OscConfig+0x5e0>
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	689b      	ldr	r3, [r3, #8]
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d10c      	bne.n	8001f3a <HAL_RCC_OscConfig+0x5a6>
 8001f20:	4b77      	ldr	r3, [pc, #476]	@ (8002100 <HAL_RCC_OscConfig+0x76c>)
 8001f22:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f24:	4a76      	ldr	r2, [pc, #472]	@ (8002100 <HAL_RCC_OscConfig+0x76c>)
 8001f26:	f023 0301 	bic.w	r3, r3, #1
 8001f2a:	6713      	str	r3, [r2, #112]	@ 0x70
 8001f2c:	4b74      	ldr	r3, [pc, #464]	@ (8002100 <HAL_RCC_OscConfig+0x76c>)
 8001f2e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f30:	4a73      	ldr	r2, [pc, #460]	@ (8002100 <HAL_RCC_OscConfig+0x76c>)
 8001f32:	f023 0304 	bic.w	r3, r3, #4
 8001f36:	6713      	str	r3, [r2, #112]	@ 0x70
 8001f38:	e01c      	b.n	8001f74 <HAL_RCC_OscConfig+0x5e0>
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	689b      	ldr	r3, [r3, #8]
 8001f3e:	2b05      	cmp	r3, #5
 8001f40:	d10c      	bne.n	8001f5c <HAL_RCC_OscConfig+0x5c8>
 8001f42:	4b6f      	ldr	r3, [pc, #444]	@ (8002100 <HAL_RCC_OscConfig+0x76c>)
 8001f44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f46:	4a6e      	ldr	r2, [pc, #440]	@ (8002100 <HAL_RCC_OscConfig+0x76c>)
 8001f48:	f043 0304 	orr.w	r3, r3, #4
 8001f4c:	6713      	str	r3, [r2, #112]	@ 0x70
 8001f4e:	4b6c      	ldr	r3, [pc, #432]	@ (8002100 <HAL_RCC_OscConfig+0x76c>)
 8001f50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f52:	4a6b      	ldr	r2, [pc, #428]	@ (8002100 <HAL_RCC_OscConfig+0x76c>)
 8001f54:	f043 0301 	orr.w	r3, r3, #1
 8001f58:	6713      	str	r3, [r2, #112]	@ 0x70
 8001f5a:	e00b      	b.n	8001f74 <HAL_RCC_OscConfig+0x5e0>
 8001f5c:	4b68      	ldr	r3, [pc, #416]	@ (8002100 <HAL_RCC_OscConfig+0x76c>)
 8001f5e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f60:	4a67      	ldr	r2, [pc, #412]	@ (8002100 <HAL_RCC_OscConfig+0x76c>)
 8001f62:	f023 0301 	bic.w	r3, r3, #1
 8001f66:	6713      	str	r3, [r2, #112]	@ 0x70
 8001f68:	4b65      	ldr	r3, [pc, #404]	@ (8002100 <HAL_RCC_OscConfig+0x76c>)
 8001f6a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f6c:	4a64      	ldr	r2, [pc, #400]	@ (8002100 <HAL_RCC_OscConfig+0x76c>)
 8001f6e:	f023 0304 	bic.w	r3, r3, #4
 8001f72:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	689b      	ldr	r3, [r3, #8]
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d015      	beq.n	8001fa8 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f7c:	f7ff f8f2 	bl	8001164 <HAL_GetTick>
 8001f80:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001f82:	e00a      	b.n	8001f9a <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f84:	f7ff f8ee 	bl	8001164 <HAL_GetTick>
 8001f88:	4602      	mov	r2, r0
 8001f8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f8c:	1ad3      	subs	r3, r2, r3
 8001f8e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d901      	bls.n	8001f9a <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8001f96:	2303      	movs	r3, #3
 8001f98:	e14e      	b.n	8002238 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001f9a:	4b59      	ldr	r3, [pc, #356]	@ (8002100 <HAL_RCC_OscConfig+0x76c>)
 8001f9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f9e:	f003 0302 	and.w	r3, r3, #2
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d0ee      	beq.n	8001f84 <HAL_RCC_OscConfig+0x5f0>
 8001fa6:	e014      	b.n	8001fd2 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fa8:	f7ff f8dc 	bl	8001164 <HAL_GetTick>
 8001fac:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001fae:	e00a      	b.n	8001fc6 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fb0:	f7ff f8d8 	bl	8001164 <HAL_GetTick>
 8001fb4:	4602      	mov	r2, r0
 8001fb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fb8:	1ad3      	subs	r3, r2, r3
 8001fba:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d901      	bls.n	8001fc6 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8001fc2:	2303      	movs	r3, #3
 8001fc4:	e138      	b.n	8002238 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001fc6:	4b4e      	ldr	r3, [pc, #312]	@ (8002100 <HAL_RCC_OscConfig+0x76c>)
 8001fc8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001fca:	f003 0302 	and.w	r3, r3, #2
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d1ee      	bne.n	8001fb0 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	f000 812d 	beq.w	8002236 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8001fdc:	4b48      	ldr	r3, [pc, #288]	@ (8002100 <HAL_RCC_OscConfig+0x76c>)
 8001fde:	691b      	ldr	r3, [r3, #16]
 8001fe0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001fe4:	2b18      	cmp	r3, #24
 8001fe6:	f000 80bd 	beq.w	8002164 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fee:	2b02      	cmp	r3, #2
 8001ff0:	f040 809e 	bne.w	8002130 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ff4:	4b42      	ldr	r3, [pc, #264]	@ (8002100 <HAL_RCC_OscConfig+0x76c>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4a41      	ldr	r2, [pc, #260]	@ (8002100 <HAL_RCC_OscConfig+0x76c>)
 8001ffa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001ffe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002000:	f7ff f8b0 	bl	8001164 <HAL_GetTick>
 8002004:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002006:	e008      	b.n	800201a <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002008:	f7ff f8ac 	bl	8001164 <HAL_GetTick>
 800200c:	4602      	mov	r2, r0
 800200e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002010:	1ad3      	subs	r3, r2, r3
 8002012:	2b02      	cmp	r3, #2
 8002014:	d901      	bls.n	800201a <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8002016:	2303      	movs	r3, #3
 8002018:	e10e      	b.n	8002238 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800201a:	4b39      	ldr	r3, [pc, #228]	@ (8002100 <HAL_RCC_OscConfig+0x76c>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002022:	2b00      	cmp	r3, #0
 8002024:	d1f0      	bne.n	8002008 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002026:	4b36      	ldr	r3, [pc, #216]	@ (8002100 <HAL_RCC_OscConfig+0x76c>)
 8002028:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800202a:	4b37      	ldr	r3, [pc, #220]	@ (8002108 <HAL_RCC_OscConfig+0x774>)
 800202c:	4013      	ands	r3, r2
 800202e:	687a      	ldr	r2, [r7, #4]
 8002030:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8002032:	687a      	ldr	r2, [r7, #4]
 8002034:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002036:	0112      	lsls	r2, r2, #4
 8002038:	430a      	orrs	r2, r1
 800203a:	4931      	ldr	r1, [pc, #196]	@ (8002100 <HAL_RCC_OscConfig+0x76c>)
 800203c:	4313      	orrs	r3, r2
 800203e:	628b      	str	r3, [r1, #40]	@ 0x28
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002044:	3b01      	subs	r3, #1
 8002046:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800204e:	3b01      	subs	r3, #1
 8002050:	025b      	lsls	r3, r3, #9
 8002052:	b29b      	uxth	r3, r3
 8002054:	431a      	orrs	r2, r3
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800205a:	3b01      	subs	r3, #1
 800205c:	041b      	lsls	r3, r3, #16
 800205e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8002062:	431a      	orrs	r2, r3
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002068:	3b01      	subs	r3, #1
 800206a:	061b      	lsls	r3, r3, #24
 800206c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8002070:	4923      	ldr	r1, [pc, #140]	@ (8002100 <HAL_RCC_OscConfig+0x76c>)
 8002072:	4313      	orrs	r3, r2
 8002074:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8002076:	4b22      	ldr	r3, [pc, #136]	@ (8002100 <HAL_RCC_OscConfig+0x76c>)
 8002078:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800207a:	4a21      	ldr	r2, [pc, #132]	@ (8002100 <HAL_RCC_OscConfig+0x76c>)
 800207c:	f023 0301 	bic.w	r3, r3, #1
 8002080:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002082:	4b1f      	ldr	r3, [pc, #124]	@ (8002100 <HAL_RCC_OscConfig+0x76c>)
 8002084:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002086:	4b21      	ldr	r3, [pc, #132]	@ (800210c <HAL_RCC_OscConfig+0x778>)
 8002088:	4013      	ands	r3, r2
 800208a:	687a      	ldr	r2, [r7, #4]
 800208c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800208e:	00d2      	lsls	r2, r2, #3
 8002090:	491b      	ldr	r1, [pc, #108]	@ (8002100 <HAL_RCC_OscConfig+0x76c>)
 8002092:	4313      	orrs	r3, r2
 8002094:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002096:	4b1a      	ldr	r3, [pc, #104]	@ (8002100 <HAL_RCC_OscConfig+0x76c>)
 8002098:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800209a:	f023 020c 	bic.w	r2, r3, #12
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020a2:	4917      	ldr	r1, [pc, #92]	@ (8002100 <HAL_RCC_OscConfig+0x76c>)
 80020a4:	4313      	orrs	r3, r2
 80020a6:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80020a8:	4b15      	ldr	r3, [pc, #84]	@ (8002100 <HAL_RCC_OscConfig+0x76c>)
 80020aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020ac:	f023 0202 	bic.w	r2, r3, #2
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020b4:	4912      	ldr	r1, [pc, #72]	@ (8002100 <HAL_RCC_OscConfig+0x76c>)
 80020b6:	4313      	orrs	r3, r2
 80020b8:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80020ba:	4b11      	ldr	r3, [pc, #68]	@ (8002100 <HAL_RCC_OscConfig+0x76c>)
 80020bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020be:	4a10      	ldr	r2, [pc, #64]	@ (8002100 <HAL_RCC_OscConfig+0x76c>)
 80020c0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80020c4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80020c6:	4b0e      	ldr	r3, [pc, #56]	@ (8002100 <HAL_RCC_OscConfig+0x76c>)
 80020c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020ca:	4a0d      	ldr	r2, [pc, #52]	@ (8002100 <HAL_RCC_OscConfig+0x76c>)
 80020cc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80020d0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80020d2:	4b0b      	ldr	r3, [pc, #44]	@ (8002100 <HAL_RCC_OscConfig+0x76c>)
 80020d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020d6:	4a0a      	ldr	r2, [pc, #40]	@ (8002100 <HAL_RCC_OscConfig+0x76c>)
 80020d8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80020dc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80020de:	4b08      	ldr	r3, [pc, #32]	@ (8002100 <HAL_RCC_OscConfig+0x76c>)
 80020e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020e2:	4a07      	ldr	r2, [pc, #28]	@ (8002100 <HAL_RCC_OscConfig+0x76c>)
 80020e4:	f043 0301 	orr.w	r3, r3, #1
 80020e8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80020ea:	4b05      	ldr	r3, [pc, #20]	@ (8002100 <HAL_RCC_OscConfig+0x76c>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	4a04      	ldr	r2, [pc, #16]	@ (8002100 <HAL_RCC_OscConfig+0x76c>)
 80020f0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80020f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020f6:	f7ff f835 	bl	8001164 <HAL_GetTick>
 80020fa:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80020fc:	e011      	b.n	8002122 <HAL_RCC_OscConfig+0x78e>
 80020fe:	bf00      	nop
 8002100:	58024400 	.word	0x58024400
 8002104:	58024800 	.word	0x58024800
 8002108:	fffffc0c 	.word	0xfffffc0c
 800210c:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002110:	f7ff f828 	bl	8001164 <HAL_GetTick>
 8002114:	4602      	mov	r2, r0
 8002116:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002118:	1ad3      	subs	r3, r2, r3
 800211a:	2b02      	cmp	r3, #2
 800211c:	d901      	bls.n	8002122 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800211e:	2303      	movs	r3, #3
 8002120:	e08a      	b.n	8002238 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002122:	4b47      	ldr	r3, [pc, #284]	@ (8002240 <HAL_RCC_OscConfig+0x8ac>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800212a:	2b00      	cmp	r3, #0
 800212c:	d0f0      	beq.n	8002110 <HAL_RCC_OscConfig+0x77c>
 800212e:	e082      	b.n	8002236 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002130:	4b43      	ldr	r3, [pc, #268]	@ (8002240 <HAL_RCC_OscConfig+0x8ac>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	4a42      	ldr	r2, [pc, #264]	@ (8002240 <HAL_RCC_OscConfig+0x8ac>)
 8002136:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800213a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800213c:	f7ff f812 	bl	8001164 <HAL_GetTick>
 8002140:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002142:	e008      	b.n	8002156 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002144:	f7ff f80e 	bl	8001164 <HAL_GetTick>
 8002148:	4602      	mov	r2, r0
 800214a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800214c:	1ad3      	subs	r3, r2, r3
 800214e:	2b02      	cmp	r3, #2
 8002150:	d901      	bls.n	8002156 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8002152:	2303      	movs	r3, #3
 8002154:	e070      	b.n	8002238 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002156:	4b3a      	ldr	r3, [pc, #232]	@ (8002240 <HAL_RCC_OscConfig+0x8ac>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800215e:	2b00      	cmp	r3, #0
 8002160:	d1f0      	bne.n	8002144 <HAL_RCC_OscConfig+0x7b0>
 8002162:	e068      	b.n	8002236 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002164:	4b36      	ldr	r3, [pc, #216]	@ (8002240 <HAL_RCC_OscConfig+0x8ac>)
 8002166:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002168:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800216a:	4b35      	ldr	r3, [pc, #212]	@ (8002240 <HAL_RCC_OscConfig+0x8ac>)
 800216c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800216e:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002174:	2b01      	cmp	r3, #1
 8002176:	d031      	beq.n	80021dc <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002178:	693b      	ldr	r3, [r7, #16]
 800217a:	f003 0203 	and.w	r2, r3, #3
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002182:	429a      	cmp	r2, r3
 8002184:	d12a      	bne.n	80021dc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002186:	693b      	ldr	r3, [r7, #16]
 8002188:	091b      	lsrs	r3, r3, #4
 800218a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002192:	429a      	cmp	r2, r3
 8002194:	d122      	bne.n	80021dc <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021a0:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80021a2:	429a      	cmp	r2, r3
 80021a4:	d11a      	bne.n	80021dc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	0a5b      	lsrs	r3, r3, #9
 80021aa:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80021b2:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80021b4:	429a      	cmp	r2, r3
 80021b6:	d111      	bne.n	80021dc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	0c1b      	lsrs	r3, r3, #16
 80021bc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80021c4:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80021c6:	429a      	cmp	r2, r3
 80021c8:	d108      	bne.n	80021dc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	0e1b      	lsrs	r3, r3, #24
 80021ce:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80021d6:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80021d8:	429a      	cmp	r2, r3
 80021da:	d001      	beq.n	80021e0 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80021dc:	2301      	movs	r3, #1
 80021de:	e02b      	b.n	8002238 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80021e0:	4b17      	ldr	r3, [pc, #92]	@ (8002240 <HAL_RCC_OscConfig+0x8ac>)
 80021e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80021e4:	08db      	lsrs	r3, r3, #3
 80021e6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80021ea:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80021f0:	693a      	ldr	r2, [r7, #16]
 80021f2:	429a      	cmp	r2, r3
 80021f4:	d01f      	beq.n	8002236 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80021f6:	4b12      	ldr	r3, [pc, #72]	@ (8002240 <HAL_RCC_OscConfig+0x8ac>)
 80021f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021fa:	4a11      	ldr	r2, [pc, #68]	@ (8002240 <HAL_RCC_OscConfig+0x8ac>)
 80021fc:	f023 0301 	bic.w	r3, r3, #1
 8002200:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002202:	f7fe ffaf 	bl	8001164 <HAL_GetTick>
 8002206:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8002208:	bf00      	nop
 800220a:	f7fe ffab 	bl	8001164 <HAL_GetTick>
 800220e:	4602      	mov	r2, r0
 8002210:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002212:	4293      	cmp	r3, r2
 8002214:	d0f9      	beq.n	800220a <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002216:	4b0a      	ldr	r3, [pc, #40]	@ (8002240 <HAL_RCC_OscConfig+0x8ac>)
 8002218:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800221a:	4b0a      	ldr	r3, [pc, #40]	@ (8002244 <HAL_RCC_OscConfig+0x8b0>)
 800221c:	4013      	ands	r3, r2
 800221e:	687a      	ldr	r2, [r7, #4]
 8002220:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002222:	00d2      	lsls	r2, r2, #3
 8002224:	4906      	ldr	r1, [pc, #24]	@ (8002240 <HAL_RCC_OscConfig+0x8ac>)
 8002226:	4313      	orrs	r3, r2
 8002228:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800222a:	4b05      	ldr	r3, [pc, #20]	@ (8002240 <HAL_RCC_OscConfig+0x8ac>)
 800222c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800222e:	4a04      	ldr	r2, [pc, #16]	@ (8002240 <HAL_RCC_OscConfig+0x8ac>)
 8002230:	f043 0301 	orr.w	r3, r3, #1
 8002234:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8002236:	2300      	movs	r3, #0
}
 8002238:	4618      	mov	r0, r3
 800223a:	3730      	adds	r7, #48	@ 0x30
 800223c:	46bd      	mov	sp, r7
 800223e:	bd80      	pop	{r7, pc}
 8002240:	58024400 	.word	0x58024400
 8002244:	ffff0007 	.word	0xffff0007

08002248 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b086      	sub	sp, #24
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
 8002250:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	2b00      	cmp	r3, #0
 8002256:	d101      	bne.n	800225c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002258:	2301      	movs	r3, #1
 800225a:	e19c      	b.n	8002596 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800225c:	4b8a      	ldr	r3, [pc, #552]	@ (8002488 <HAL_RCC_ClockConfig+0x240>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f003 030f 	and.w	r3, r3, #15
 8002264:	683a      	ldr	r2, [r7, #0]
 8002266:	429a      	cmp	r2, r3
 8002268:	d910      	bls.n	800228c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800226a:	4b87      	ldr	r3, [pc, #540]	@ (8002488 <HAL_RCC_ClockConfig+0x240>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f023 020f 	bic.w	r2, r3, #15
 8002272:	4985      	ldr	r1, [pc, #532]	@ (8002488 <HAL_RCC_ClockConfig+0x240>)
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	4313      	orrs	r3, r2
 8002278:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800227a:	4b83      	ldr	r3, [pc, #524]	@ (8002488 <HAL_RCC_ClockConfig+0x240>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f003 030f 	and.w	r3, r3, #15
 8002282:	683a      	ldr	r2, [r7, #0]
 8002284:	429a      	cmp	r2, r3
 8002286:	d001      	beq.n	800228c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002288:	2301      	movs	r3, #1
 800228a:	e184      	b.n	8002596 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f003 0304 	and.w	r3, r3, #4
 8002294:	2b00      	cmp	r3, #0
 8002296:	d010      	beq.n	80022ba <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	691a      	ldr	r2, [r3, #16]
 800229c:	4b7b      	ldr	r3, [pc, #492]	@ (800248c <HAL_RCC_ClockConfig+0x244>)
 800229e:	699b      	ldr	r3, [r3, #24]
 80022a0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80022a4:	429a      	cmp	r2, r3
 80022a6:	d908      	bls.n	80022ba <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80022a8:	4b78      	ldr	r3, [pc, #480]	@ (800248c <HAL_RCC_ClockConfig+0x244>)
 80022aa:	699b      	ldr	r3, [r3, #24]
 80022ac:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	691b      	ldr	r3, [r3, #16]
 80022b4:	4975      	ldr	r1, [pc, #468]	@ (800248c <HAL_RCC_ClockConfig+0x244>)
 80022b6:	4313      	orrs	r3, r2
 80022b8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f003 0308 	and.w	r3, r3, #8
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d010      	beq.n	80022e8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	695a      	ldr	r2, [r3, #20]
 80022ca:	4b70      	ldr	r3, [pc, #448]	@ (800248c <HAL_RCC_ClockConfig+0x244>)
 80022cc:	69db      	ldr	r3, [r3, #28]
 80022ce:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80022d2:	429a      	cmp	r2, r3
 80022d4:	d908      	bls.n	80022e8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80022d6:	4b6d      	ldr	r3, [pc, #436]	@ (800248c <HAL_RCC_ClockConfig+0x244>)
 80022d8:	69db      	ldr	r3, [r3, #28]
 80022da:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	695b      	ldr	r3, [r3, #20]
 80022e2:	496a      	ldr	r1, [pc, #424]	@ (800248c <HAL_RCC_ClockConfig+0x244>)
 80022e4:	4313      	orrs	r3, r2
 80022e6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f003 0310 	and.w	r3, r3, #16
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d010      	beq.n	8002316 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	699a      	ldr	r2, [r3, #24]
 80022f8:	4b64      	ldr	r3, [pc, #400]	@ (800248c <HAL_RCC_ClockConfig+0x244>)
 80022fa:	69db      	ldr	r3, [r3, #28]
 80022fc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002300:	429a      	cmp	r2, r3
 8002302:	d908      	bls.n	8002316 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002304:	4b61      	ldr	r3, [pc, #388]	@ (800248c <HAL_RCC_ClockConfig+0x244>)
 8002306:	69db      	ldr	r3, [r3, #28]
 8002308:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	699b      	ldr	r3, [r3, #24]
 8002310:	495e      	ldr	r1, [pc, #376]	@ (800248c <HAL_RCC_ClockConfig+0x244>)
 8002312:	4313      	orrs	r3, r2
 8002314:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f003 0320 	and.w	r3, r3, #32
 800231e:	2b00      	cmp	r3, #0
 8002320:	d010      	beq.n	8002344 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	69da      	ldr	r2, [r3, #28]
 8002326:	4b59      	ldr	r3, [pc, #356]	@ (800248c <HAL_RCC_ClockConfig+0x244>)
 8002328:	6a1b      	ldr	r3, [r3, #32]
 800232a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800232e:	429a      	cmp	r2, r3
 8002330:	d908      	bls.n	8002344 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002332:	4b56      	ldr	r3, [pc, #344]	@ (800248c <HAL_RCC_ClockConfig+0x244>)
 8002334:	6a1b      	ldr	r3, [r3, #32]
 8002336:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	69db      	ldr	r3, [r3, #28]
 800233e:	4953      	ldr	r1, [pc, #332]	@ (800248c <HAL_RCC_ClockConfig+0x244>)
 8002340:	4313      	orrs	r3, r2
 8002342:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f003 0302 	and.w	r3, r3, #2
 800234c:	2b00      	cmp	r3, #0
 800234e:	d010      	beq.n	8002372 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	68da      	ldr	r2, [r3, #12]
 8002354:	4b4d      	ldr	r3, [pc, #308]	@ (800248c <HAL_RCC_ClockConfig+0x244>)
 8002356:	699b      	ldr	r3, [r3, #24]
 8002358:	f003 030f 	and.w	r3, r3, #15
 800235c:	429a      	cmp	r2, r3
 800235e:	d908      	bls.n	8002372 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002360:	4b4a      	ldr	r3, [pc, #296]	@ (800248c <HAL_RCC_ClockConfig+0x244>)
 8002362:	699b      	ldr	r3, [r3, #24]
 8002364:	f023 020f 	bic.w	r2, r3, #15
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	68db      	ldr	r3, [r3, #12]
 800236c:	4947      	ldr	r1, [pc, #284]	@ (800248c <HAL_RCC_ClockConfig+0x244>)
 800236e:	4313      	orrs	r3, r2
 8002370:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f003 0301 	and.w	r3, r3, #1
 800237a:	2b00      	cmp	r3, #0
 800237c:	d055      	beq.n	800242a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800237e:	4b43      	ldr	r3, [pc, #268]	@ (800248c <HAL_RCC_ClockConfig+0x244>)
 8002380:	699b      	ldr	r3, [r3, #24]
 8002382:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	689b      	ldr	r3, [r3, #8]
 800238a:	4940      	ldr	r1, [pc, #256]	@ (800248c <HAL_RCC_ClockConfig+0x244>)
 800238c:	4313      	orrs	r3, r2
 800238e:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	685b      	ldr	r3, [r3, #4]
 8002394:	2b02      	cmp	r3, #2
 8002396:	d107      	bne.n	80023a8 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002398:	4b3c      	ldr	r3, [pc, #240]	@ (800248c <HAL_RCC_ClockConfig+0x244>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d121      	bne.n	80023e8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80023a4:	2301      	movs	r3, #1
 80023a6:	e0f6      	b.n	8002596 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	685b      	ldr	r3, [r3, #4]
 80023ac:	2b03      	cmp	r3, #3
 80023ae:	d107      	bne.n	80023c0 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80023b0:	4b36      	ldr	r3, [pc, #216]	@ (800248c <HAL_RCC_ClockConfig+0x244>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d115      	bne.n	80023e8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80023bc:	2301      	movs	r3, #1
 80023be:	e0ea      	b.n	8002596 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	685b      	ldr	r3, [r3, #4]
 80023c4:	2b01      	cmp	r3, #1
 80023c6:	d107      	bne.n	80023d8 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80023c8:	4b30      	ldr	r3, [pc, #192]	@ (800248c <HAL_RCC_ClockConfig+0x244>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d109      	bne.n	80023e8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80023d4:	2301      	movs	r3, #1
 80023d6:	e0de      	b.n	8002596 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80023d8:	4b2c      	ldr	r3, [pc, #176]	@ (800248c <HAL_RCC_ClockConfig+0x244>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f003 0304 	and.w	r3, r3, #4
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d101      	bne.n	80023e8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80023e4:	2301      	movs	r3, #1
 80023e6:	e0d6      	b.n	8002596 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80023e8:	4b28      	ldr	r3, [pc, #160]	@ (800248c <HAL_RCC_ClockConfig+0x244>)
 80023ea:	691b      	ldr	r3, [r3, #16]
 80023ec:	f023 0207 	bic.w	r2, r3, #7
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	685b      	ldr	r3, [r3, #4]
 80023f4:	4925      	ldr	r1, [pc, #148]	@ (800248c <HAL_RCC_ClockConfig+0x244>)
 80023f6:	4313      	orrs	r3, r2
 80023f8:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80023fa:	f7fe feb3 	bl	8001164 <HAL_GetTick>
 80023fe:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002400:	e00a      	b.n	8002418 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002402:	f7fe feaf 	bl	8001164 <HAL_GetTick>
 8002406:	4602      	mov	r2, r0
 8002408:	697b      	ldr	r3, [r7, #20]
 800240a:	1ad3      	subs	r3, r2, r3
 800240c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002410:	4293      	cmp	r3, r2
 8002412:	d901      	bls.n	8002418 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8002414:	2303      	movs	r3, #3
 8002416:	e0be      	b.n	8002596 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002418:	4b1c      	ldr	r3, [pc, #112]	@ (800248c <HAL_RCC_ClockConfig+0x244>)
 800241a:	691b      	ldr	r3, [r3, #16]
 800241c:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	685b      	ldr	r3, [r3, #4]
 8002424:	00db      	lsls	r3, r3, #3
 8002426:	429a      	cmp	r2, r3
 8002428:	d1eb      	bne.n	8002402 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f003 0302 	and.w	r3, r3, #2
 8002432:	2b00      	cmp	r3, #0
 8002434:	d010      	beq.n	8002458 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	68da      	ldr	r2, [r3, #12]
 800243a:	4b14      	ldr	r3, [pc, #80]	@ (800248c <HAL_RCC_ClockConfig+0x244>)
 800243c:	699b      	ldr	r3, [r3, #24]
 800243e:	f003 030f 	and.w	r3, r3, #15
 8002442:	429a      	cmp	r2, r3
 8002444:	d208      	bcs.n	8002458 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002446:	4b11      	ldr	r3, [pc, #68]	@ (800248c <HAL_RCC_ClockConfig+0x244>)
 8002448:	699b      	ldr	r3, [r3, #24]
 800244a:	f023 020f 	bic.w	r2, r3, #15
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	68db      	ldr	r3, [r3, #12]
 8002452:	490e      	ldr	r1, [pc, #56]	@ (800248c <HAL_RCC_ClockConfig+0x244>)
 8002454:	4313      	orrs	r3, r2
 8002456:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002458:	4b0b      	ldr	r3, [pc, #44]	@ (8002488 <HAL_RCC_ClockConfig+0x240>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f003 030f 	and.w	r3, r3, #15
 8002460:	683a      	ldr	r2, [r7, #0]
 8002462:	429a      	cmp	r2, r3
 8002464:	d214      	bcs.n	8002490 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002466:	4b08      	ldr	r3, [pc, #32]	@ (8002488 <HAL_RCC_ClockConfig+0x240>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f023 020f 	bic.w	r2, r3, #15
 800246e:	4906      	ldr	r1, [pc, #24]	@ (8002488 <HAL_RCC_ClockConfig+0x240>)
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	4313      	orrs	r3, r2
 8002474:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002476:	4b04      	ldr	r3, [pc, #16]	@ (8002488 <HAL_RCC_ClockConfig+0x240>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f003 030f 	and.w	r3, r3, #15
 800247e:	683a      	ldr	r2, [r7, #0]
 8002480:	429a      	cmp	r2, r3
 8002482:	d005      	beq.n	8002490 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002484:	2301      	movs	r3, #1
 8002486:	e086      	b.n	8002596 <HAL_RCC_ClockConfig+0x34e>
 8002488:	52002000 	.word	0x52002000
 800248c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f003 0304 	and.w	r3, r3, #4
 8002498:	2b00      	cmp	r3, #0
 800249a:	d010      	beq.n	80024be <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	691a      	ldr	r2, [r3, #16]
 80024a0:	4b3f      	ldr	r3, [pc, #252]	@ (80025a0 <HAL_RCC_ClockConfig+0x358>)
 80024a2:	699b      	ldr	r3, [r3, #24]
 80024a4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80024a8:	429a      	cmp	r2, r3
 80024aa:	d208      	bcs.n	80024be <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80024ac:	4b3c      	ldr	r3, [pc, #240]	@ (80025a0 <HAL_RCC_ClockConfig+0x358>)
 80024ae:	699b      	ldr	r3, [r3, #24]
 80024b0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	691b      	ldr	r3, [r3, #16]
 80024b8:	4939      	ldr	r1, [pc, #228]	@ (80025a0 <HAL_RCC_ClockConfig+0x358>)
 80024ba:	4313      	orrs	r3, r2
 80024bc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f003 0308 	and.w	r3, r3, #8
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d010      	beq.n	80024ec <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	695a      	ldr	r2, [r3, #20]
 80024ce:	4b34      	ldr	r3, [pc, #208]	@ (80025a0 <HAL_RCC_ClockConfig+0x358>)
 80024d0:	69db      	ldr	r3, [r3, #28]
 80024d2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80024d6:	429a      	cmp	r2, r3
 80024d8:	d208      	bcs.n	80024ec <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80024da:	4b31      	ldr	r3, [pc, #196]	@ (80025a0 <HAL_RCC_ClockConfig+0x358>)
 80024dc:	69db      	ldr	r3, [r3, #28]
 80024de:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	695b      	ldr	r3, [r3, #20]
 80024e6:	492e      	ldr	r1, [pc, #184]	@ (80025a0 <HAL_RCC_ClockConfig+0x358>)
 80024e8:	4313      	orrs	r3, r2
 80024ea:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f003 0310 	and.w	r3, r3, #16
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d010      	beq.n	800251a <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	699a      	ldr	r2, [r3, #24]
 80024fc:	4b28      	ldr	r3, [pc, #160]	@ (80025a0 <HAL_RCC_ClockConfig+0x358>)
 80024fe:	69db      	ldr	r3, [r3, #28]
 8002500:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002504:	429a      	cmp	r2, r3
 8002506:	d208      	bcs.n	800251a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002508:	4b25      	ldr	r3, [pc, #148]	@ (80025a0 <HAL_RCC_ClockConfig+0x358>)
 800250a:	69db      	ldr	r3, [r3, #28]
 800250c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	699b      	ldr	r3, [r3, #24]
 8002514:	4922      	ldr	r1, [pc, #136]	@ (80025a0 <HAL_RCC_ClockConfig+0x358>)
 8002516:	4313      	orrs	r3, r2
 8002518:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f003 0320 	and.w	r3, r3, #32
 8002522:	2b00      	cmp	r3, #0
 8002524:	d010      	beq.n	8002548 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	69da      	ldr	r2, [r3, #28]
 800252a:	4b1d      	ldr	r3, [pc, #116]	@ (80025a0 <HAL_RCC_ClockConfig+0x358>)
 800252c:	6a1b      	ldr	r3, [r3, #32]
 800252e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002532:	429a      	cmp	r2, r3
 8002534:	d208      	bcs.n	8002548 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002536:	4b1a      	ldr	r3, [pc, #104]	@ (80025a0 <HAL_RCC_ClockConfig+0x358>)
 8002538:	6a1b      	ldr	r3, [r3, #32]
 800253a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	69db      	ldr	r3, [r3, #28]
 8002542:	4917      	ldr	r1, [pc, #92]	@ (80025a0 <HAL_RCC_ClockConfig+0x358>)
 8002544:	4313      	orrs	r3, r2
 8002546:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002548:	f000 f834 	bl	80025b4 <HAL_RCC_GetSysClockFreq>
 800254c:	4602      	mov	r2, r0
 800254e:	4b14      	ldr	r3, [pc, #80]	@ (80025a0 <HAL_RCC_ClockConfig+0x358>)
 8002550:	699b      	ldr	r3, [r3, #24]
 8002552:	0a1b      	lsrs	r3, r3, #8
 8002554:	f003 030f 	and.w	r3, r3, #15
 8002558:	4912      	ldr	r1, [pc, #72]	@ (80025a4 <HAL_RCC_ClockConfig+0x35c>)
 800255a:	5ccb      	ldrb	r3, [r1, r3]
 800255c:	f003 031f 	and.w	r3, r3, #31
 8002560:	fa22 f303 	lsr.w	r3, r2, r3
 8002564:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002566:	4b0e      	ldr	r3, [pc, #56]	@ (80025a0 <HAL_RCC_ClockConfig+0x358>)
 8002568:	699b      	ldr	r3, [r3, #24]
 800256a:	f003 030f 	and.w	r3, r3, #15
 800256e:	4a0d      	ldr	r2, [pc, #52]	@ (80025a4 <HAL_RCC_ClockConfig+0x35c>)
 8002570:	5cd3      	ldrb	r3, [r2, r3]
 8002572:	f003 031f 	and.w	r3, r3, #31
 8002576:	693a      	ldr	r2, [r7, #16]
 8002578:	fa22 f303 	lsr.w	r3, r2, r3
 800257c:	4a0a      	ldr	r2, [pc, #40]	@ (80025a8 <HAL_RCC_ClockConfig+0x360>)
 800257e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002580:	4a0a      	ldr	r2, [pc, #40]	@ (80025ac <HAL_RCC_ClockConfig+0x364>)
 8002582:	693b      	ldr	r3, [r7, #16]
 8002584:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8002586:	4b0a      	ldr	r3, [pc, #40]	@ (80025b0 <HAL_RCC_ClockConfig+0x368>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	4618      	mov	r0, r3
 800258c:	f7fe fda0 	bl	80010d0 <HAL_InitTick>
 8002590:	4603      	mov	r3, r0
 8002592:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002594:	7bfb      	ldrb	r3, [r7, #15]
}
 8002596:	4618      	mov	r0, r3
 8002598:	3718      	adds	r7, #24
 800259a:	46bd      	mov	sp, r7
 800259c:	bd80      	pop	{r7, pc}
 800259e:	bf00      	nop
 80025a0:	58024400 	.word	0x58024400
 80025a4:	08004e50 	.word	0x08004e50
 80025a8:	24000004 	.word	0x24000004
 80025ac:	24000000 	.word	0x24000000
 80025b0:	24000024 	.word	0x24000024

080025b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80025b4:	b480      	push	{r7}
 80025b6:	b089      	sub	sp, #36	@ 0x24
 80025b8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80025ba:	4bb3      	ldr	r3, [pc, #716]	@ (8002888 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80025bc:	691b      	ldr	r3, [r3, #16]
 80025be:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80025c2:	2b18      	cmp	r3, #24
 80025c4:	f200 8155 	bhi.w	8002872 <HAL_RCC_GetSysClockFreq+0x2be>
 80025c8:	a201      	add	r2, pc, #4	@ (adr r2, 80025d0 <HAL_RCC_GetSysClockFreq+0x1c>)
 80025ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025ce:	bf00      	nop
 80025d0:	08002635 	.word	0x08002635
 80025d4:	08002873 	.word	0x08002873
 80025d8:	08002873 	.word	0x08002873
 80025dc:	08002873 	.word	0x08002873
 80025e0:	08002873 	.word	0x08002873
 80025e4:	08002873 	.word	0x08002873
 80025e8:	08002873 	.word	0x08002873
 80025ec:	08002873 	.word	0x08002873
 80025f0:	0800265b 	.word	0x0800265b
 80025f4:	08002873 	.word	0x08002873
 80025f8:	08002873 	.word	0x08002873
 80025fc:	08002873 	.word	0x08002873
 8002600:	08002873 	.word	0x08002873
 8002604:	08002873 	.word	0x08002873
 8002608:	08002873 	.word	0x08002873
 800260c:	08002873 	.word	0x08002873
 8002610:	08002661 	.word	0x08002661
 8002614:	08002873 	.word	0x08002873
 8002618:	08002873 	.word	0x08002873
 800261c:	08002873 	.word	0x08002873
 8002620:	08002873 	.word	0x08002873
 8002624:	08002873 	.word	0x08002873
 8002628:	08002873 	.word	0x08002873
 800262c:	08002873 	.word	0x08002873
 8002630:	08002667 	.word	0x08002667
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002634:	4b94      	ldr	r3, [pc, #592]	@ (8002888 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f003 0320 	and.w	r3, r3, #32
 800263c:	2b00      	cmp	r3, #0
 800263e:	d009      	beq.n	8002654 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002640:	4b91      	ldr	r3, [pc, #580]	@ (8002888 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	08db      	lsrs	r3, r3, #3
 8002646:	f003 0303 	and.w	r3, r3, #3
 800264a:	4a90      	ldr	r2, [pc, #576]	@ (800288c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800264c:	fa22 f303 	lsr.w	r3, r2, r3
 8002650:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8002652:	e111      	b.n	8002878 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002654:	4b8d      	ldr	r3, [pc, #564]	@ (800288c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002656:	61bb      	str	r3, [r7, #24]
      break;
 8002658:	e10e      	b.n	8002878 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800265a:	4b8d      	ldr	r3, [pc, #564]	@ (8002890 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800265c:	61bb      	str	r3, [r7, #24]
      break;
 800265e:	e10b      	b.n	8002878 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8002660:	4b8c      	ldr	r3, [pc, #560]	@ (8002894 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8002662:	61bb      	str	r3, [r7, #24]
      break;
 8002664:	e108      	b.n	8002878 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002666:	4b88      	ldr	r3, [pc, #544]	@ (8002888 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002668:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800266a:	f003 0303 	and.w	r3, r3, #3
 800266e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8002670:	4b85      	ldr	r3, [pc, #532]	@ (8002888 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002672:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002674:	091b      	lsrs	r3, r3, #4
 8002676:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800267a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800267c:	4b82      	ldr	r3, [pc, #520]	@ (8002888 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800267e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002680:	f003 0301 	and.w	r3, r3, #1
 8002684:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8002686:	4b80      	ldr	r3, [pc, #512]	@ (8002888 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002688:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800268a:	08db      	lsrs	r3, r3, #3
 800268c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002690:	68fa      	ldr	r2, [r7, #12]
 8002692:	fb02 f303 	mul.w	r3, r2, r3
 8002696:	ee07 3a90 	vmov	s15, r3
 800269a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800269e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80026a2:	693b      	ldr	r3, [r7, #16]
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	f000 80e1 	beq.w	800286c <HAL_RCC_GetSysClockFreq+0x2b8>
 80026aa:	697b      	ldr	r3, [r7, #20]
 80026ac:	2b02      	cmp	r3, #2
 80026ae:	f000 8083 	beq.w	80027b8 <HAL_RCC_GetSysClockFreq+0x204>
 80026b2:	697b      	ldr	r3, [r7, #20]
 80026b4:	2b02      	cmp	r3, #2
 80026b6:	f200 80a1 	bhi.w	80027fc <HAL_RCC_GetSysClockFreq+0x248>
 80026ba:	697b      	ldr	r3, [r7, #20]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d003      	beq.n	80026c8 <HAL_RCC_GetSysClockFreq+0x114>
 80026c0:	697b      	ldr	r3, [r7, #20]
 80026c2:	2b01      	cmp	r3, #1
 80026c4:	d056      	beq.n	8002774 <HAL_RCC_GetSysClockFreq+0x1c0>
 80026c6:	e099      	b.n	80027fc <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80026c8:	4b6f      	ldr	r3, [pc, #444]	@ (8002888 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f003 0320 	and.w	r3, r3, #32
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d02d      	beq.n	8002730 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80026d4:	4b6c      	ldr	r3, [pc, #432]	@ (8002888 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	08db      	lsrs	r3, r3, #3
 80026da:	f003 0303 	and.w	r3, r3, #3
 80026de:	4a6b      	ldr	r2, [pc, #428]	@ (800288c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80026e0:	fa22 f303 	lsr.w	r3, r2, r3
 80026e4:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	ee07 3a90 	vmov	s15, r3
 80026ec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80026f0:	693b      	ldr	r3, [r7, #16]
 80026f2:	ee07 3a90 	vmov	s15, r3
 80026f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80026fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80026fe:	4b62      	ldr	r3, [pc, #392]	@ (8002888 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002700:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002702:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002706:	ee07 3a90 	vmov	s15, r3
 800270a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800270e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002712:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8002898 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002716:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800271a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800271e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002722:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002726:	ee67 7a27 	vmul.f32	s15, s14, s15
 800272a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800272e:	e087      	b.n	8002840 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002730:	693b      	ldr	r3, [r7, #16]
 8002732:	ee07 3a90 	vmov	s15, r3
 8002736:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800273a:	eddf 6a58 	vldr	s13, [pc, #352]	@ 800289c <HAL_RCC_GetSysClockFreq+0x2e8>
 800273e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002742:	4b51      	ldr	r3, [pc, #324]	@ (8002888 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002744:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002746:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800274a:	ee07 3a90 	vmov	s15, r3
 800274e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002752:	ed97 6a02 	vldr	s12, [r7, #8]
 8002756:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8002898 <HAL_RCC_GetSysClockFreq+0x2e4>
 800275a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800275e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002762:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002766:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800276a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800276e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002772:	e065      	b.n	8002840 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002774:	693b      	ldr	r3, [r7, #16]
 8002776:	ee07 3a90 	vmov	s15, r3
 800277a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800277e:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80028a0 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002782:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002786:	4b40      	ldr	r3, [pc, #256]	@ (8002888 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002788:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800278a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800278e:	ee07 3a90 	vmov	s15, r3
 8002792:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002796:	ed97 6a02 	vldr	s12, [r7, #8]
 800279a:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8002898 <HAL_RCC_GetSysClockFreq+0x2e4>
 800279e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80027a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80027a6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80027aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80027ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027b2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80027b6:	e043      	b.n	8002840 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80027b8:	693b      	ldr	r3, [r7, #16]
 80027ba:	ee07 3a90 	vmov	s15, r3
 80027be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80027c2:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80028a4 <HAL_RCC_GetSysClockFreq+0x2f0>
 80027c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80027ca:	4b2f      	ldr	r3, [pc, #188]	@ (8002888 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80027cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80027d2:	ee07 3a90 	vmov	s15, r3
 80027d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80027da:	ed97 6a02 	vldr	s12, [r7, #8]
 80027de:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8002898 <HAL_RCC_GetSysClockFreq+0x2e4>
 80027e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80027e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80027ea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80027ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80027f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027f6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80027fa:	e021      	b.n	8002840 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80027fc:	693b      	ldr	r3, [r7, #16]
 80027fe:	ee07 3a90 	vmov	s15, r3
 8002802:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002806:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80028a0 <HAL_RCC_GetSysClockFreq+0x2ec>
 800280a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800280e:	4b1e      	ldr	r3, [pc, #120]	@ (8002888 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002810:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002812:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002816:	ee07 3a90 	vmov	s15, r3
 800281a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800281e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002822:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8002898 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002826:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800282a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800282e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002832:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002836:	ee67 7a27 	vmul.f32	s15, s14, s15
 800283a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800283e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8002840:	4b11      	ldr	r3, [pc, #68]	@ (8002888 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002842:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002844:	0a5b      	lsrs	r3, r3, #9
 8002846:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800284a:	3301      	adds	r3, #1
 800284c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	ee07 3a90 	vmov	s15, r3
 8002854:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002858:	edd7 6a07 	vldr	s13, [r7, #28]
 800285c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002860:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002864:	ee17 3a90 	vmov	r3, s15
 8002868:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800286a:	e005      	b.n	8002878 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800286c:	2300      	movs	r3, #0
 800286e:	61bb      	str	r3, [r7, #24]
      break;
 8002870:	e002      	b.n	8002878 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8002872:	4b07      	ldr	r3, [pc, #28]	@ (8002890 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002874:	61bb      	str	r3, [r7, #24]
      break;
 8002876:	bf00      	nop
  }

  return sysclockfreq;
 8002878:	69bb      	ldr	r3, [r7, #24]
}
 800287a:	4618      	mov	r0, r3
 800287c:	3724      	adds	r7, #36	@ 0x24
 800287e:	46bd      	mov	sp, r7
 8002880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002884:	4770      	bx	lr
 8002886:	bf00      	nop
 8002888:	58024400 	.word	0x58024400
 800288c:	03d09000 	.word	0x03d09000
 8002890:	003d0900 	.word	0x003d0900
 8002894:	017d7840 	.word	0x017d7840
 8002898:	46000000 	.word	0x46000000
 800289c:	4c742400 	.word	0x4c742400
 80028a0:	4a742400 	.word	0x4a742400
 80028a4:	4bbebc20 	.word	0x4bbebc20

080028a8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b082      	sub	sp, #8
 80028ac:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80028ae:	f7ff fe81 	bl	80025b4 <HAL_RCC_GetSysClockFreq>
 80028b2:	4602      	mov	r2, r0
 80028b4:	4b10      	ldr	r3, [pc, #64]	@ (80028f8 <HAL_RCC_GetHCLKFreq+0x50>)
 80028b6:	699b      	ldr	r3, [r3, #24]
 80028b8:	0a1b      	lsrs	r3, r3, #8
 80028ba:	f003 030f 	and.w	r3, r3, #15
 80028be:	490f      	ldr	r1, [pc, #60]	@ (80028fc <HAL_RCC_GetHCLKFreq+0x54>)
 80028c0:	5ccb      	ldrb	r3, [r1, r3]
 80028c2:	f003 031f 	and.w	r3, r3, #31
 80028c6:	fa22 f303 	lsr.w	r3, r2, r3
 80028ca:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80028cc:	4b0a      	ldr	r3, [pc, #40]	@ (80028f8 <HAL_RCC_GetHCLKFreq+0x50>)
 80028ce:	699b      	ldr	r3, [r3, #24]
 80028d0:	f003 030f 	and.w	r3, r3, #15
 80028d4:	4a09      	ldr	r2, [pc, #36]	@ (80028fc <HAL_RCC_GetHCLKFreq+0x54>)
 80028d6:	5cd3      	ldrb	r3, [r2, r3]
 80028d8:	f003 031f 	and.w	r3, r3, #31
 80028dc:	687a      	ldr	r2, [r7, #4]
 80028de:	fa22 f303 	lsr.w	r3, r2, r3
 80028e2:	4a07      	ldr	r2, [pc, #28]	@ (8002900 <HAL_RCC_GetHCLKFreq+0x58>)
 80028e4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80028e6:	4a07      	ldr	r2, [pc, #28]	@ (8002904 <HAL_RCC_GetHCLKFreq+0x5c>)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80028ec:	4b04      	ldr	r3, [pc, #16]	@ (8002900 <HAL_RCC_GetHCLKFreq+0x58>)
 80028ee:	681b      	ldr	r3, [r3, #0]
}
 80028f0:	4618      	mov	r0, r3
 80028f2:	3708      	adds	r7, #8
 80028f4:	46bd      	mov	sp, r7
 80028f6:	bd80      	pop	{r7, pc}
 80028f8:	58024400 	.word	0x58024400
 80028fc:	08004e50 	.word	0x08004e50
 8002900:	24000004 	.word	0x24000004
 8002904:	24000000 	.word	0x24000000

08002908 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800290c:	f7ff ffcc 	bl	80028a8 <HAL_RCC_GetHCLKFreq>
 8002910:	4602      	mov	r2, r0
 8002912:	4b06      	ldr	r3, [pc, #24]	@ (800292c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002914:	69db      	ldr	r3, [r3, #28]
 8002916:	091b      	lsrs	r3, r3, #4
 8002918:	f003 0307 	and.w	r3, r3, #7
 800291c:	4904      	ldr	r1, [pc, #16]	@ (8002930 <HAL_RCC_GetPCLK1Freq+0x28>)
 800291e:	5ccb      	ldrb	r3, [r1, r3]
 8002920:	f003 031f 	and.w	r3, r3, #31
 8002924:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8002928:	4618      	mov	r0, r3
 800292a:	bd80      	pop	{r7, pc}
 800292c:	58024400 	.word	0x58024400
 8002930:	08004e50 	.word	0x08004e50

08002934 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8002938:	f7ff ffb6 	bl	80028a8 <HAL_RCC_GetHCLKFreq>
 800293c:	4602      	mov	r2, r0
 800293e:	4b06      	ldr	r3, [pc, #24]	@ (8002958 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002940:	69db      	ldr	r3, [r3, #28]
 8002942:	0a1b      	lsrs	r3, r3, #8
 8002944:	f003 0307 	and.w	r3, r3, #7
 8002948:	4904      	ldr	r1, [pc, #16]	@ (800295c <HAL_RCC_GetPCLK2Freq+0x28>)
 800294a:	5ccb      	ldrb	r3, [r1, r3]
 800294c:	f003 031f 	and.w	r3, r3, #31
 8002950:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8002954:	4618      	mov	r0, r3
 8002956:	bd80      	pop	{r7, pc}
 8002958:	58024400 	.word	0x58024400
 800295c:	08004e50 	.word	0x08004e50

08002960 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8002964:	f7ff ffa0 	bl	80028a8 <HAL_RCC_GetHCLKFreq>
 8002968:	4602      	mov	r2, r0
 800296a:	4b06      	ldr	r3, [pc, #24]	@ (8002984 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800296c:	6a1b      	ldr	r3, [r3, #32]
 800296e:	091b      	lsrs	r3, r3, #4
 8002970:	f003 0307 	and.w	r3, r3, #7
 8002974:	4904      	ldr	r1, [pc, #16]	@ (8002988 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8002976:	5ccb      	ldrb	r3, [r1, r3]
 8002978:	f003 031f 	and.w	r3, r3, #31
 800297c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8002980:	4618      	mov	r0, r3
 8002982:	bd80      	pop	{r7, pc}
 8002984:	58024400 	.word	0x58024400
 8002988:	08004e50 	.word	0x08004e50

0800298c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800298c:	b480      	push	{r7}
 800298e:	b089      	sub	sp, #36	@ 0x24
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002994:	4ba1      	ldr	r3, [pc, #644]	@ (8002c1c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8002996:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002998:	f003 0303 	and.w	r3, r3, #3
 800299c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800299e:	4b9f      	ldr	r3, [pc, #636]	@ (8002c1c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80029a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029a2:	0b1b      	lsrs	r3, r3, #12
 80029a4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80029a8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80029aa:	4b9c      	ldr	r3, [pc, #624]	@ (8002c1c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80029ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029ae:	091b      	lsrs	r3, r3, #4
 80029b0:	f003 0301 	and.w	r3, r3, #1
 80029b4:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80029b6:	4b99      	ldr	r3, [pc, #612]	@ (8002c1c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80029b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80029ba:	08db      	lsrs	r3, r3, #3
 80029bc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80029c0:	693a      	ldr	r2, [r7, #16]
 80029c2:	fb02 f303 	mul.w	r3, r2, r3
 80029c6:	ee07 3a90 	vmov	s15, r3
 80029ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80029ce:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80029d2:	697b      	ldr	r3, [r7, #20]
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	f000 8111 	beq.w	8002bfc <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80029da:	69bb      	ldr	r3, [r7, #24]
 80029dc:	2b02      	cmp	r3, #2
 80029de:	f000 8083 	beq.w	8002ae8 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80029e2:	69bb      	ldr	r3, [r7, #24]
 80029e4:	2b02      	cmp	r3, #2
 80029e6:	f200 80a1 	bhi.w	8002b2c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80029ea:	69bb      	ldr	r3, [r7, #24]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d003      	beq.n	80029f8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80029f0:	69bb      	ldr	r3, [r7, #24]
 80029f2:	2b01      	cmp	r3, #1
 80029f4:	d056      	beq.n	8002aa4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80029f6:	e099      	b.n	8002b2c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80029f8:	4b88      	ldr	r3, [pc, #544]	@ (8002c1c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f003 0320 	and.w	r3, r3, #32
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d02d      	beq.n	8002a60 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002a04:	4b85      	ldr	r3, [pc, #532]	@ (8002c1c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	08db      	lsrs	r3, r3, #3
 8002a0a:	f003 0303 	and.w	r3, r3, #3
 8002a0e:	4a84      	ldr	r2, [pc, #528]	@ (8002c20 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8002a10:	fa22 f303 	lsr.w	r3, r2, r3
 8002a14:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8002a16:	68bb      	ldr	r3, [r7, #8]
 8002a18:	ee07 3a90 	vmov	s15, r3
 8002a1c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002a20:	697b      	ldr	r3, [r7, #20]
 8002a22:	ee07 3a90 	vmov	s15, r3
 8002a26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002a2e:	4b7b      	ldr	r3, [pc, #492]	@ (8002c1c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8002a30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a36:	ee07 3a90 	vmov	s15, r3
 8002a3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002a3e:	ed97 6a03 	vldr	s12, [r7, #12]
 8002a42:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8002c24 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8002a46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002a4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002a4e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002a52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002a56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a5a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8002a5e:	e087      	b.n	8002b70 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8002a60:	697b      	ldr	r3, [r7, #20]
 8002a62:	ee07 3a90 	vmov	s15, r3
 8002a66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a6a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8002c28 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8002a6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002a72:	4b6a      	ldr	r3, [pc, #424]	@ (8002c1c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8002a74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a7a:	ee07 3a90 	vmov	s15, r3
 8002a7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002a82:	ed97 6a03 	vldr	s12, [r7, #12]
 8002a86:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8002c24 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8002a8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002a8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002a92:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002a96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002a9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a9e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002aa2:	e065      	b.n	8002b70 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8002aa4:	697b      	ldr	r3, [r7, #20]
 8002aa6:	ee07 3a90 	vmov	s15, r3
 8002aaa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002aae:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8002c2c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8002ab2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002ab6:	4b59      	ldr	r3, [pc, #356]	@ (8002c1c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8002ab8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002aba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002abe:	ee07 3a90 	vmov	s15, r3
 8002ac2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002ac6:	ed97 6a03 	vldr	s12, [r7, #12]
 8002aca:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8002c24 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8002ace:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002ad2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002ad6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002ada:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002ade:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ae2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002ae6:	e043      	b.n	8002b70 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8002ae8:	697b      	ldr	r3, [r7, #20]
 8002aea:	ee07 3a90 	vmov	s15, r3
 8002aee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002af2:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8002c30 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8002af6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002afa:	4b48      	ldr	r3, [pc, #288]	@ (8002c1c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8002afc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002afe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b02:	ee07 3a90 	vmov	s15, r3
 8002b06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002b0a:	ed97 6a03 	vldr	s12, [r7, #12]
 8002b0e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8002c24 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8002b12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002b16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002b1a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002b1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002b22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b26:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002b2a:	e021      	b.n	8002b70 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8002b2c:	697b      	ldr	r3, [r7, #20]
 8002b2e:	ee07 3a90 	vmov	s15, r3
 8002b32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b36:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8002c2c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8002b3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002b3e:	4b37      	ldr	r3, [pc, #220]	@ (8002c1c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8002b40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b46:	ee07 3a90 	vmov	s15, r3
 8002b4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002b4e:	ed97 6a03 	vldr	s12, [r7, #12]
 8002b52:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8002c24 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8002b56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002b5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002b5e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002b62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002b66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b6a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002b6e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8002b70:	4b2a      	ldr	r3, [pc, #168]	@ (8002c1c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8002b72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b74:	0a5b      	lsrs	r3, r3, #9
 8002b76:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002b7a:	ee07 3a90 	vmov	s15, r3
 8002b7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b82:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002b86:	ee37 7a87 	vadd.f32	s14, s15, s14
 8002b8a:	edd7 6a07 	vldr	s13, [r7, #28]
 8002b8e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002b92:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002b96:	ee17 2a90 	vmov	r2, s15
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8002b9e:	4b1f      	ldr	r3, [pc, #124]	@ (8002c1c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8002ba0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ba2:	0c1b      	lsrs	r3, r3, #16
 8002ba4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002ba8:	ee07 3a90 	vmov	s15, r3
 8002bac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002bb0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002bb4:	ee37 7a87 	vadd.f32	s14, s15, s14
 8002bb8:	edd7 6a07 	vldr	s13, [r7, #28]
 8002bbc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002bc0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002bc4:	ee17 2a90 	vmov	r2, s15
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8002bcc:	4b13      	ldr	r3, [pc, #76]	@ (8002c1c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8002bce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002bd0:	0e1b      	lsrs	r3, r3, #24
 8002bd2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002bd6:	ee07 3a90 	vmov	s15, r3
 8002bda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002bde:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002be2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8002be6:	edd7 6a07 	vldr	s13, [r7, #28]
 8002bea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002bee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002bf2:	ee17 2a90 	vmov	r2, s15
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8002bfa:	e008      	b.n	8002c0e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2200      	movs	r2, #0
 8002c00:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	2200      	movs	r2, #0
 8002c06:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	609a      	str	r2, [r3, #8]
}
 8002c0e:	bf00      	nop
 8002c10:	3724      	adds	r7, #36	@ 0x24
 8002c12:	46bd      	mov	sp, r7
 8002c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c18:	4770      	bx	lr
 8002c1a:	bf00      	nop
 8002c1c:	58024400 	.word	0x58024400
 8002c20:	03d09000 	.word	0x03d09000
 8002c24:	46000000 	.word	0x46000000
 8002c28:	4c742400 	.word	0x4c742400
 8002c2c:	4a742400 	.word	0x4a742400
 8002c30:	4bbebc20 	.word	0x4bbebc20

08002c34 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8002c34:	b480      	push	{r7}
 8002c36:	b089      	sub	sp, #36	@ 0x24
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002c3c:	4ba1      	ldr	r3, [pc, #644]	@ (8002ec4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8002c3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c40:	f003 0303 	and.w	r3, r3, #3
 8002c44:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8002c46:	4b9f      	ldr	r3, [pc, #636]	@ (8002ec4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8002c48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c4a:	0d1b      	lsrs	r3, r3, #20
 8002c4c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002c50:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8002c52:	4b9c      	ldr	r3, [pc, #624]	@ (8002ec4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8002c54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c56:	0a1b      	lsrs	r3, r3, #8
 8002c58:	f003 0301 	and.w	r3, r3, #1
 8002c5c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8002c5e:	4b99      	ldr	r3, [pc, #612]	@ (8002ec4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8002c60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c62:	08db      	lsrs	r3, r3, #3
 8002c64:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002c68:	693a      	ldr	r2, [r7, #16]
 8002c6a:	fb02 f303 	mul.w	r3, r2, r3
 8002c6e:	ee07 3a90 	vmov	s15, r3
 8002c72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c76:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8002c7a:	697b      	ldr	r3, [r7, #20]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	f000 8111 	beq.w	8002ea4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8002c82:	69bb      	ldr	r3, [r7, #24]
 8002c84:	2b02      	cmp	r3, #2
 8002c86:	f000 8083 	beq.w	8002d90 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8002c8a:	69bb      	ldr	r3, [r7, #24]
 8002c8c:	2b02      	cmp	r3, #2
 8002c8e:	f200 80a1 	bhi.w	8002dd4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8002c92:	69bb      	ldr	r3, [r7, #24]
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d003      	beq.n	8002ca0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8002c98:	69bb      	ldr	r3, [r7, #24]
 8002c9a:	2b01      	cmp	r3, #1
 8002c9c:	d056      	beq.n	8002d4c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8002c9e:	e099      	b.n	8002dd4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002ca0:	4b88      	ldr	r3, [pc, #544]	@ (8002ec4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f003 0320 	and.w	r3, r3, #32
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d02d      	beq.n	8002d08 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002cac:	4b85      	ldr	r3, [pc, #532]	@ (8002ec4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	08db      	lsrs	r3, r3, #3
 8002cb2:	f003 0303 	and.w	r3, r3, #3
 8002cb6:	4a84      	ldr	r2, [pc, #528]	@ (8002ec8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8002cb8:	fa22 f303 	lsr.w	r3, r2, r3
 8002cbc:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8002cbe:	68bb      	ldr	r3, [r7, #8]
 8002cc0:	ee07 3a90 	vmov	s15, r3
 8002cc4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002cc8:	697b      	ldr	r3, [r7, #20]
 8002cca:	ee07 3a90 	vmov	s15, r3
 8002cce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002cd2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002cd6:	4b7b      	ldr	r3, [pc, #492]	@ (8002ec4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8002cd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002cde:	ee07 3a90 	vmov	s15, r3
 8002ce2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002ce6:	ed97 6a03 	vldr	s12, [r7, #12]
 8002cea:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8002ecc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8002cee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002cf2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002cf6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002cfa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002cfe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d02:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8002d06:	e087      	b.n	8002e18 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8002d08:	697b      	ldr	r3, [r7, #20]
 8002d0a:	ee07 3a90 	vmov	s15, r3
 8002d0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d12:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8002ed0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8002d16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002d1a:	4b6a      	ldr	r3, [pc, #424]	@ (8002ec4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8002d1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d22:	ee07 3a90 	vmov	s15, r3
 8002d26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002d2a:	ed97 6a03 	vldr	s12, [r7, #12]
 8002d2e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8002ecc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8002d32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002d36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002d3a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002d3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002d42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d46:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002d4a:	e065      	b.n	8002e18 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8002d4c:	697b      	ldr	r3, [r7, #20]
 8002d4e:	ee07 3a90 	vmov	s15, r3
 8002d52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d56:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8002ed4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8002d5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002d5e:	4b59      	ldr	r3, [pc, #356]	@ (8002ec4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8002d60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d66:	ee07 3a90 	vmov	s15, r3
 8002d6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002d6e:	ed97 6a03 	vldr	s12, [r7, #12]
 8002d72:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8002ecc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8002d76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002d7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002d7e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002d82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002d86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d8a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002d8e:	e043      	b.n	8002e18 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8002d90:	697b      	ldr	r3, [r7, #20]
 8002d92:	ee07 3a90 	vmov	s15, r3
 8002d96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d9a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8002ed8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8002d9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002da2:	4b48      	ldr	r3, [pc, #288]	@ (8002ec4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8002da4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002da6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002daa:	ee07 3a90 	vmov	s15, r3
 8002dae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002db2:	ed97 6a03 	vldr	s12, [r7, #12]
 8002db6:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8002ecc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8002dba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002dbe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002dc2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002dc6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002dca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002dce:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002dd2:	e021      	b.n	8002e18 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8002dd4:	697b      	ldr	r3, [r7, #20]
 8002dd6:	ee07 3a90 	vmov	s15, r3
 8002dda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002dde:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8002ed4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8002de2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002de6:	4b37      	ldr	r3, [pc, #220]	@ (8002ec4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8002de8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002dee:	ee07 3a90 	vmov	s15, r3
 8002df2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002df6:	ed97 6a03 	vldr	s12, [r7, #12]
 8002dfa:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8002ecc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8002dfe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002e02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002e06:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002e0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002e0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e12:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002e16:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8002e18:	4b2a      	ldr	r3, [pc, #168]	@ (8002ec4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8002e1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e1c:	0a5b      	lsrs	r3, r3, #9
 8002e1e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002e22:	ee07 3a90 	vmov	s15, r3
 8002e26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e2a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002e2e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8002e32:	edd7 6a07 	vldr	s13, [r7, #28]
 8002e36:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002e3a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002e3e:	ee17 2a90 	vmov	r2, s15
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8002e46:	4b1f      	ldr	r3, [pc, #124]	@ (8002ec4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8002e48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e4a:	0c1b      	lsrs	r3, r3, #16
 8002e4c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002e50:	ee07 3a90 	vmov	s15, r3
 8002e54:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e58:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002e5c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8002e60:	edd7 6a07 	vldr	s13, [r7, #28]
 8002e64:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002e68:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002e6c:	ee17 2a90 	vmov	r2, s15
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8002e74:	4b13      	ldr	r3, [pc, #76]	@ (8002ec4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8002e76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e78:	0e1b      	lsrs	r3, r3, #24
 8002e7a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002e7e:	ee07 3a90 	vmov	s15, r3
 8002e82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e86:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002e8a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8002e8e:	edd7 6a07 	vldr	s13, [r7, #28]
 8002e92:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002e96:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002e9a:	ee17 2a90 	vmov	r2, s15
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8002ea2:	e008      	b.n	8002eb6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	2200      	movs	r2, #0
 8002eae:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	609a      	str	r2, [r3, #8]
}
 8002eb6:	bf00      	nop
 8002eb8:	3724      	adds	r7, #36	@ 0x24
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec0:	4770      	bx	lr
 8002ec2:	bf00      	nop
 8002ec4:	58024400 	.word	0x58024400
 8002ec8:	03d09000 	.word	0x03d09000
 8002ecc:	46000000 	.word	0x46000000
 8002ed0:	4c742400 	.word	0x4c742400
 8002ed4:	4a742400 	.word	0x4a742400
 8002ed8:	4bbebc20 	.word	0x4bbebc20

08002edc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b082      	sub	sp, #8
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d101      	bne.n	8002eee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002eea:	2301      	movs	r3, #1
 8002eec:	e042      	b.n	8002f74 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d106      	bne.n	8002f06 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2200      	movs	r2, #0
 8002efc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002f00:	6878      	ldr	r0, [r7, #4]
 8002f02:	f000 f83b 	bl	8002f7c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	2224      	movs	r2, #36	@ 0x24
 8002f0a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	681a      	ldr	r2, [r3, #0]
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f022 0201 	bic.w	r2, r2, #1
 8002f1c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d002      	beq.n	8002f2c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8002f26:	6878      	ldr	r0, [r7, #4]
 8002f28:	f000 fe28 	bl	8003b7c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002f2c:	6878      	ldr	r0, [r7, #4]
 8002f2e:	f000 f8bd 	bl	80030ac <UART_SetConfig>
 8002f32:	4603      	mov	r3, r0
 8002f34:	2b01      	cmp	r3, #1
 8002f36:	d101      	bne.n	8002f3c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8002f38:	2301      	movs	r3, #1
 8002f3a:	e01b      	b.n	8002f74 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	685a      	ldr	r2, [r3, #4]
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002f4a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	689a      	ldr	r2, [r3, #8]
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002f5a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	681a      	ldr	r2, [r3, #0]
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f042 0201 	orr.w	r2, r2, #1
 8002f6a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002f6c:	6878      	ldr	r0, [r7, #4]
 8002f6e:	f000 fea7 	bl	8003cc0 <UART_CheckIdleState>
 8002f72:	4603      	mov	r3, r0
}
 8002f74:	4618      	mov	r0, r3
 8002f76:	3708      	adds	r7, #8
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	bd80      	pop	{r7, pc}

08002f7c <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8002f7c:	b480      	push	{r7}
 8002f7e:	b083      	sub	sp, #12
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 8002f84:	bf00      	nop
 8002f86:	370c      	adds	r7, #12
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8e:	4770      	bx	lr

08002f90 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b08a      	sub	sp, #40	@ 0x28
 8002f94:	af02      	add	r7, sp, #8
 8002f96:	60f8      	str	r0, [r7, #12]
 8002f98:	60b9      	str	r1, [r7, #8]
 8002f9a:	603b      	str	r3, [r7, #0]
 8002f9c:	4613      	mov	r3, r2
 8002f9e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002fa6:	2b20      	cmp	r3, #32
 8002fa8:	d17b      	bne.n	80030a2 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8002faa:	68bb      	ldr	r3, [r7, #8]
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d002      	beq.n	8002fb6 <HAL_UART_Transmit+0x26>
 8002fb0:	88fb      	ldrh	r3, [r7, #6]
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d101      	bne.n	8002fba <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8002fb6:	2301      	movs	r3, #1
 8002fb8:	e074      	b.n	80030a4 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	2221      	movs	r2, #33	@ 0x21
 8002fc6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002fca:	f7fe f8cb 	bl	8001164 <HAL_GetTick>
 8002fce:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	88fa      	ldrh	r2, [r7, #6]
 8002fd4:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	88fa      	ldrh	r2, [r7, #6]
 8002fdc:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	689b      	ldr	r3, [r3, #8]
 8002fe4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002fe8:	d108      	bne.n	8002ffc <HAL_UART_Transmit+0x6c>
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	691b      	ldr	r3, [r3, #16]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d104      	bne.n	8002ffc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002ff6:	68bb      	ldr	r3, [r7, #8]
 8002ff8:	61bb      	str	r3, [r7, #24]
 8002ffa:	e003      	b.n	8003004 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002ffc:	68bb      	ldr	r3, [r7, #8]
 8002ffe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003000:	2300      	movs	r3, #0
 8003002:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003004:	e030      	b.n	8003068 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003006:	683b      	ldr	r3, [r7, #0]
 8003008:	9300      	str	r3, [sp, #0]
 800300a:	697b      	ldr	r3, [r7, #20]
 800300c:	2200      	movs	r2, #0
 800300e:	2180      	movs	r1, #128	@ 0x80
 8003010:	68f8      	ldr	r0, [r7, #12]
 8003012:	f000 feff 	bl	8003e14 <UART_WaitOnFlagUntilTimeout>
 8003016:	4603      	mov	r3, r0
 8003018:	2b00      	cmp	r3, #0
 800301a:	d005      	beq.n	8003028 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	2220      	movs	r2, #32
 8003020:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8003024:	2303      	movs	r3, #3
 8003026:	e03d      	b.n	80030a4 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8003028:	69fb      	ldr	r3, [r7, #28]
 800302a:	2b00      	cmp	r3, #0
 800302c:	d10b      	bne.n	8003046 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800302e:	69bb      	ldr	r3, [r7, #24]
 8003030:	881b      	ldrh	r3, [r3, #0]
 8003032:	461a      	mov	r2, r3
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800303c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800303e:	69bb      	ldr	r3, [r7, #24]
 8003040:	3302      	adds	r3, #2
 8003042:	61bb      	str	r3, [r7, #24]
 8003044:	e007      	b.n	8003056 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003046:	69fb      	ldr	r3, [r7, #28]
 8003048:	781a      	ldrb	r2, [r3, #0]
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8003050:	69fb      	ldr	r3, [r7, #28]
 8003052:	3301      	adds	r3, #1
 8003054:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800305c:	b29b      	uxth	r3, r3
 800305e:	3b01      	subs	r3, #1
 8003060:	b29a      	uxth	r2, r3
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800306e:	b29b      	uxth	r3, r3
 8003070:	2b00      	cmp	r3, #0
 8003072:	d1c8      	bne.n	8003006 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	9300      	str	r3, [sp, #0]
 8003078:	697b      	ldr	r3, [r7, #20]
 800307a:	2200      	movs	r2, #0
 800307c:	2140      	movs	r1, #64	@ 0x40
 800307e:	68f8      	ldr	r0, [r7, #12]
 8003080:	f000 fec8 	bl	8003e14 <UART_WaitOnFlagUntilTimeout>
 8003084:	4603      	mov	r3, r0
 8003086:	2b00      	cmp	r3, #0
 8003088:	d005      	beq.n	8003096 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	2220      	movs	r2, #32
 800308e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8003092:	2303      	movs	r3, #3
 8003094:	e006      	b.n	80030a4 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	2220      	movs	r2, #32
 800309a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800309e:	2300      	movs	r3, #0
 80030a0:	e000      	b.n	80030a4 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80030a2:	2302      	movs	r3, #2
  }
}
 80030a4:	4618      	mov	r0, r3
 80030a6:	3720      	adds	r7, #32
 80030a8:	46bd      	mov	sp, r7
 80030aa:	bd80      	pop	{r7, pc}

080030ac <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80030ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80030b0:	b092      	sub	sp, #72	@ 0x48
 80030b2:	af00      	add	r7, sp, #0
 80030b4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80030b6:	2300      	movs	r3, #0
 80030b8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80030bc:	697b      	ldr	r3, [r7, #20]
 80030be:	689a      	ldr	r2, [r3, #8]
 80030c0:	697b      	ldr	r3, [r7, #20]
 80030c2:	691b      	ldr	r3, [r3, #16]
 80030c4:	431a      	orrs	r2, r3
 80030c6:	697b      	ldr	r3, [r7, #20]
 80030c8:	695b      	ldr	r3, [r3, #20]
 80030ca:	431a      	orrs	r2, r3
 80030cc:	697b      	ldr	r3, [r7, #20]
 80030ce:	69db      	ldr	r3, [r3, #28]
 80030d0:	4313      	orrs	r3, r2
 80030d2:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80030d4:	697b      	ldr	r3, [r7, #20]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	681a      	ldr	r2, [r3, #0]
 80030da:	4bbe      	ldr	r3, [pc, #760]	@ (80033d4 <UART_SetConfig+0x328>)
 80030dc:	4013      	ands	r3, r2
 80030de:	697a      	ldr	r2, [r7, #20]
 80030e0:	6812      	ldr	r2, [r2, #0]
 80030e2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80030e4:	430b      	orrs	r3, r1
 80030e6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80030e8:	697b      	ldr	r3, [r7, #20]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	685b      	ldr	r3, [r3, #4]
 80030ee:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80030f2:	697b      	ldr	r3, [r7, #20]
 80030f4:	68da      	ldr	r2, [r3, #12]
 80030f6:	697b      	ldr	r3, [r7, #20]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	430a      	orrs	r2, r1
 80030fc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80030fe:	697b      	ldr	r3, [r7, #20]
 8003100:	699b      	ldr	r3, [r3, #24]
 8003102:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003104:	697b      	ldr	r3, [r7, #20]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	4ab3      	ldr	r2, [pc, #716]	@ (80033d8 <UART_SetConfig+0x32c>)
 800310a:	4293      	cmp	r3, r2
 800310c:	d004      	beq.n	8003118 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800310e:	697b      	ldr	r3, [r7, #20]
 8003110:	6a1b      	ldr	r3, [r3, #32]
 8003112:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003114:	4313      	orrs	r3, r2
 8003116:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003118:	697b      	ldr	r3, [r7, #20]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	689a      	ldr	r2, [r3, #8]
 800311e:	4baf      	ldr	r3, [pc, #700]	@ (80033dc <UART_SetConfig+0x330>)
 8003120:	4013      	ands	r3, r2
 8003122:	697a      	ldr	r2, [r7, #20]
 8003124:	6812      	ldr	r2, [r2, #0]
 8003126:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8003128:	430b      	orrs	r3, r1
 800312a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800312c:	697b      	ldr	r3, [r7, #20]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003132:	f023 010f 	bic.w	r1, r3, #15
 8003136:	697b      	ldr	r3, [r7, #20]
 8003138:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800313a:	697b      	ldr	r3, [r7, #20]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	430a      	orrs	r2, r1
 8003140:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003142:	697b      	ldr	r3, [r7, #20]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	4aa6      	ldr	r2, [pc, #664]	@ (80033e0 <UART_SetConfig+0x334>)
 8003148:	4293      	cmp	r3, r2
 800314a:	d177      	bne.n	800323c <UART_SetConfig+0x190>
 800314c:	4ba5      	ldr	r3, [pc, #660]	@ (80033e4 <UART_SetConfig+0x338>)
 800314e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003150:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003154:	2b28      	cmp	r3, #40	@ 0x28
 8003156:	d86d      	bhi.n	8003234 <UART_SetConfig+0x188>
 8003158:	a201      	add	r2, pc, #4	@ (adr r2, 8003160 <UART_SetConfig+0xb4>)
 800315a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800315e:	bf00      	nop
 8003160:	08003205 	.word	0x08003205
 8003164:	08003235 	.word	0x08003235
 8003168:	08003235 	.word	0x08003235
 800316c:	08003235 	.word	0x08003235
 8003170:	08003235 	.word	0x08003235
 8003174:	08003235 	.word	0x08003235
 8003178:	08003235 	.word	0x08003235
 800317c:	08003235 	.word	0x08003235
 8003180:	0800320d 	.word	0x0800320d
 8003184:	08003235 	.word	0x08003235
 8003188:	08003235 	.word	0x08003235
 800318c:	08003235 	.word	0x08003235
 8003190:	08003235 	.word	0x08003235
 8003194:	08003235 	.word	0x08003235
 8003198:	08003235 	.word	0x08003235
 800319c:	08003235 	.word	0x08003235
 80031a0:	08003215 	.word	0x08003215
 80031a4:	08003235 	.word	0x08003235
 80031a8:	08003235 	.word	0x08003235
 80031ac:	08003235 	.word	0x08003235
 80031b0:	08003235 	.word	0x08003235
 80031b4:	08003235 	.word	0x08003235
 80031b8:	08003235 	.word	0x08003235
 80031bc:	08003235 	.word	0x08003235
 80031c0:	0800321d 	.word	0x0800321d
 80031c4:	08003235 	.word	0x08003235
 80031c8:	08003235 	.word	0x08003235
 80031cc:	08003235 	.word	0x08003235
 80031d0:	08003235 	.word	0x08003235
 80031d4:	08003235 	.word	0x08003235
 80031d8:	08003235 	.word	0x08003235
 80031dc:	08003235 	.word	0x08003235
 80031e0:	08003225 	.word	0x08003225
 80031e4:	08003235 	.word	0x08003235
 80031e8:	08003235 	.word	0x08003235
 80031ec:	08003235 	.word	0x08003235
 80031f0:	08003235 	.word	0x08003235
 80031f4:	08003235 	.word	0x08003235
 80031f8:	08003235 	.word	0x08003235
 80031fc:	08003235 	.word	0x08003235
 8003200:	0800322d 	.word	0x0800322d
 8003204:	2301      	movs	r3, #1
 8003206:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800320a:	e222      	b.n	8003652 <UART_SetConfig+0x5a6>
 800320c:	2304      	movs	r3, #4
 800320e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003212:	e21e      	b.n	8003652 <UART_SetConfig+0x5a6>
 8003214:	2308      	movs	r3, #8
 8003216:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800321a:	e21a      	b.n	8003652 <UART_SetConfig+0x5a6>
 800321c:	2310      	movs	r3, #16
 800321e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003222:	e216      	b.n	8003652 <UART_SetConfig+0x5a6>
 8003224:	2320      	movs	r3, #32
 8003226:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800322a:	e212      	b.n	8003652 <UART_SetConfig+0x5a6>
 800322c:	2340      	movs	r3, #64	@ 0x40
 800322e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003232:	e20e      	b.n	8003652 <UART_SetConfig+0x5a6>
 8003234:	2380      	movs	r3, #128	@ 0x80
 8003236:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800323a:	e20a      	b.n	8003652 <UART_SetConfig+0x5a6>
 800323c:	697b      	ldr	r3, [r7, #20]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	4a69      	ldr	r2, [pc, #420]	@ (80033e8 <UART_SetConfig+0x33c>)
 8003242:	4293      	cmp	r3, r2
 8003244:	d130      	bne.n	80032a8 <UART_SetConfig+0x1fc>
 8003246:	4b67      	ldr	r3, [pc, #412]	@ (80033e4 <UART_SetConfig+0x338>)
 8003248:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800324a:	f003 0307 	and.w	r3, r3, #7
 800324e:	2b05      	cmp	r3, #5
 8003250:	d826      	bhi.n	80032a0 <UART_SetConfig+0x1f4>
 8003252:	a201      	add	r2, pc, #4	@ (adr r2, 8003258 <UART_SetConfig+0x1ac>)
 8003254:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003258:	08003271 	.word	0x08003271
 800325c:	08003279 	.word	0x08003279
 8003260:	08003281 	.word	0x08003281
 8003264:	08003289 	.word	0x08003289
 8003268:	08003291 	.word	0x08003291
 800326c:	08003299 	.word	0x08003299
 8003270:	2300      	movs	r3, #0
 8003272:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003276:	e1ec      	b.n	8003652 <UART_SetConfig+0x5a6>
 8003278:	2304      	movs	r3, #4
 800327a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800327e:	e1e8      	b.n	8003652 <UART_SetConfig+0x5a6>
 8003280:	2308      	movs	r3, #8
 8003282:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003286:	e1e4      	b.n	8003652 <UART_SetConfig+0x5a6>
 8003288:	2310      	movs	r3, #16
 800328a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800328e:	e1e0      	b.n	8003652 <UART_SetConfig+0x5a6>
 8003290:	2320      	movs	r3, #32
 8003292:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003296:	e1dc      	b.n	8003652 <UART_SetConfig+0x5a6>
 8003298:	2340      	movs	r3, #64	@ 0x40
 800329a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800329e:	e1d8      	b.n	8003652 <UART_SetConfig+0x5a6>
 80032a0:	2380      	movs	r3, #128	@ 0x80
 80032a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80032a6:	e1d4      	b.n	8003652 <UART_SetConfig+0x5a6>
 80032a8:	697b      	ldr	r3, [r7, #20]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	4a4f      	ldr	r2, [pc, #316]	@ (80033ec <UART_SetConfig+0x340>)
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d130      	bne.n	8003314 <UART_SetConfig+0x268>
 80032b2:	4b4c      	ldr	r3, [pc, #304]	@ (80033e4 <UART_SetConfig+0x338>)
 80032b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032b6:	f003 0307 	and.w	r3, r3, #7
 80032ba:	2b05      	cmp	r3, #5
 80032bc:	d826      	bhi.n	800330c <UART_SetConfig+0x260>
 80032be:	a201      	add	r2, pc, #4	@ (adr r2, 80032c4 <UART_SetConfig+0x218>)
 80032c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032c4:	080032dd 	.word	0x080032dd
 80032c8:	080032e5 	.word	0x080032e5
 80032cc:	080032ed 	.word	0x080032ed
 80032d0:	080032f5 	.word	0x080032f5
 80032d4:	080032fd 	.word	0x080032fd
 80032d8:	08003305 	.word	0x08003305
 80032dc:	2300      	movs	r3, #0
 80032de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80032e2:	e1b6      	b.n	8003652 <UART_SetConfig+0x5a6>
 80032e4:	2304      	movs	r3, #4
 80032e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80032ea:	e1b2      	b.n	8003652 <UART_SetConfig+0x5a6>
 80032ec:	2308      	movs	r3, #8
 80032ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80032f2:	e1ae      	b.n	8003652 <UART_SetConfig+0x5a6>
 80032f4:	2310      	movs	r3, #16
 80032f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80032fa:	e1aa      	b.n	8003652 <UART_SetConfig+0x5a6>
 80032fc:	2320      	movs	r3, #32
 80032fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003302:	e1a6      	b.n	8003652 <UART_SetConfig+0x5a6>
 8003304:	2340      	movs	r3, #64	@ 0x40
 8003306:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800330a:	e1a2      	b.n	8003652 <UART_SetConfig+0x5a6>
 800330c:	2380      	movs	r3, #128	@ 0x80
 800330e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003312:	e19e      	b.n	8003652 <UART_SetConfig+0x5a6>
 8003314:	697b      	ldr	r3, [r7, #20]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	4a35      	ldr	r2, [pc, #212]	@ (80033f0 <UART_SetConfig+0x344>)
 800331a:	4293      	cmp	r3, r2
 800331c:	d130      	bne.n	8003380 <UART_SetConfig+0x2d4>
 800331e:	4b31      	ldr	r3, [pc, #196]	@ (80033e4 <UART_SetConfig+0x338>)
 8003320:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003322:	f003 0307 	and.w	r3, r3, #7
 8003326:	2b05      	cmp	r3, #5
 8003328:	d826      	bhi.n	8003378 <UART_SetConfig+0x2cc>
 800332a:	a201      	add	r2, pc, #4	@ (adr r2, 8003330 <UART_SetConfig+0x284>)
 800332c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003330:	08003349 	.word	0x08003349
 8003334:	08003351 	.word	0x08003351
 8003338:	08003359 	.word	0x08003359
 800333c:	08003361 	.word	0x08003361
 8003340:	08003369 	.word	0x08003369
 8003344:	08003371 	.word	0x08003371
 8003348:	2300      	movs	r3, #0
 800334a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800334e:	e180      	b.n	8003652 <UART_SetConfig+0x5a6>
 8003350:	2304      	movs	r3, #4
 8003352:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003356:	e17c      	b.n	8003652 <UART_SetConfig+0x5a6>
 8003358:	2308      	movs	r3, #8
 800335a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800335e:	e178      	b.n	8003652 <UART_SetConfig+0x5a6>
 8003360:	2310      	movs	r3, #16
 8003362:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003366:	e174      	b.n	8003652 <UART_SetConfig+0x5a6>
 8003368:	2320      	movs	r3, #32
 800336a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800336e:	e170      	b.n	8003652 <UART_SetConfig+0x5a6>
 8003370:	2340      	movs	r3, #64	@ 0x40
 8003372:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003376:	e16c      	b.n	8003652 <UART_SetConfig+0x5a6>
 8003378:	2380      	movs	r3, #128	@ 0x80
 800337a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800337e:	e168      	b.n	8003652 <UART_SetConfig+0x5a6>
 8003380:	697b      	ldr	r3, [r7, #20]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	4a1b      	ldr	r2, [pc, #108]	@ (80033f4 <UART_SetConfig+0x348>)
 8003386:	4293      	cmp	r3, r2
 8003388:	d142      	bne.n	8003410 <UART_SetConfig+0x364>
 800338a:	4b16      	ldr	r3, [pc, #88]	@ (80033e4 <UART_SetConfig+0x338>)
 800338c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800338e:	f003 0307 	and.w	r3, r3, #7
 8003392:	2b05      	cmp	r3, #5
 8003394:	d838      	bhi.n	8003408 <UART_SetConfig+0x35c>
 8003396:	a201      	add	r2, pc, #4	@ (adr r2, 800339c <UART_SetConfig+0x2f0>)
 8003398:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800339c:	080033b5 	.word	0x080033b5
 80033a0:	080033bd 	.word	0x080033bd
 80033a4:	080033c5 	.word	0x080033c5
 80033a8:	080033cd 	.word	0x080033cd
 80033ac:	080033f9 	.word	0x080033f9
 80033b0:	08003401 	.word	0x08003401
 80033b4:	2300      	movs	r3, #0
 80033b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80033ba:	e14a      	b.n	8003652 <UART_SetConfig+0x5a6>
 80033bc:	2304      	movs	r3, #4
 80033be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80033c2:	e146      	b.n	8003652 <UART_SetConfig+0x5a6>
 80033c4:	2308      	movs	r3, #8
 80033c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80033ca:	e142      	b.n	8003652 <UART_SetConfig+0x5a6>
 80033cc:	2310      	movs	r3, #16
 80033ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80033d2:	e13e      	b.n	8003652 <UART_SetConfig+0x5a6>
 80033d4:	cfff69f3 	.word	0xcfff69f3
 80033d8:	58000c00 	.word	0x58000c00
 80033dc:	11fff4ff 	.word	0x11fff4ff
 80033e0:	40011000 	.word	0x40011000
 80033e4:	58024400 	.word	0x58024400
 80033e8:	40004400 	.word	0x40004400
 80033ec:	40004800 	.word	0x40004800
 80033f0:	40004c00 	.word	0x40004c00
 80033f4:	40005000 	.word	0x40005000
 80033f8:	2320      	movs	r3, #32
 80033fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80033fe:	e128      	b.n	8003652 <UART_SetConfig+0x5a6>
 8003400:	2340      	movs	r3, #64	@ 0x40
 8003402:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003406:	e124      	b.n	8003652 <UART_SetConfig+0x5a6>
 8003408:	2380      	movs	r3, #128	@ 0x80
 800340a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800340e:	e120      	b.n	8003652 <UART_SetConfig+0x5a6>
 8003410:	697b      	ldr	r3, [r7, #20]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	4acb      	ldr	r2, [pc, #812]	@ (8003744 <UART_SetConfig+0x698>)
 8003416:	4293      	cmp	r3, r2
 8003418:	d176      	bne.n	8003508 <UART_SetConfig+0x45c>
 800341a:	4bcb      	ldr	r3, [pc, #812]	@ (8003748 <UART_SetConfig+0x69c>)
 800341c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800341e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003422:	2b28      	cmp	r3, #40	@ 0x28
 8003424:	d86c      	bhi.n	8003500 <UART_SetConfig+0x454>
 8003426:	a201      	add	r2, pc, #4	@ (adr r2, 800342c <UART_SetConfig+0x380>)
 8003428:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800342c:	080034d1 	.word	0x080034d1
 8003430:	08003501 	.word	0x08003501
 8003434:	08003501 	.word	0x08003501
 8003438:	08003501 	.word	0x08003501
 800343c:	08003501 	.word	0x08003501
 8003440:	08003501 	.word	0x08003501
 8003444:	08003501 	.word	0x08003501
 8003448:	08003501 	.word	0x08003501
 800344c:	080034d9 	.word	0x080034d9
 8003450:	08003501 	.word	0x08003501
 8003454:	08003501 	.word	0x08003501
 8003458:	08003501 	.word	0x08003501
 800345c:	08003501 	.word	0x08003501
 8003460:	08003501 	.word	0x08003501
 8003464:	08003501 	.word	0x08003501
 8003468:	08003501 	.word	0x08003501
 800346c:	080034e1 	.word	0x080034e1
 8003470:	08003501 	.word	0x08003501
 8003474:	08003501 	.word	0x08003501
 8003478:	08003501 	.word	0x08003501
 800347c:	08003501 	.word	0x08003501
 8003480:	08003501 	.word	0x08003501
 8003484:	08003501 	.word	0x08003501
 8003488:	08003501 	.word	0x08003501
 800348c:	080034e9 	.word	0x080034e9
 8003490:	08003501 	.word	0x08003501
 8003494:	08003501 	.word	0x08003501
 8003498:	08003501 	.word	0x08003501
 800349c:	08003501 	.word	0x08003501
 80034a0:	08003501 	.word	0x08003501
 80034a4:	08003501 	.word	0x08003501
 80034a8:	08003501 	.word	0x08003501
 80034ac:	080034f1 	.word	0x080034f1
 80034b0:	08003501 	.word	0x08003501
 80034b4:	08003501 	.word	0x08003501
 80034b8:	08003501 	.word	0x08003501
 80034bc:	08003501 	.word	0x08003501
 80034c0:	08003501 	.word	0x08003501
 80034c4:	08003501 	.word	0x08003501
 80034c8:	08003501 	.word	0x08003501
 80034cc:	080034f9 	.word	0x080034f9
 80034d0:	2301      	movs	r3, #1
 80034d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80034d6:	e0bc      	b.n	8003652 <UART_SetConfig+0x5a6>
 80034d8:	2304      	movs	r3, #4
 80034da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80034de:	e0b8      	b.n	8003652 <UART_SetConfig+0x5a6>
 80034e0:	2308      	movs	r3, #8
 80034e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80034e6:	e0b4      	b.n	8003652 <UART_SetConfig+0x5a6>
 80034e8:	2310      	movs	r3, #16
 80034ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80034ee:	e0b0      	b.n	8003652 <UART_SetConfig+0x5a6>
 80034f0:	2320      	movs	r3, #32
 80034f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80034f6:	e0ac      	b.n	8003652 <UART_SetConfig+0x5a6>
 80034f8:	2340      	movs	r3, #64	@ 0x40
 80034fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80034fe:	e0a8      	b.n	8003652 <UART_SetConfig+0x5a6>
 8003500:	2380      	movs	r3, #128	@ 0x80
 8003502:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003506:	e0a4      	b.n	8003652 <UART_SetConfig+0x5a6>
 8003508:	697b      	ldr	r3, [r7, #20]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	4a8f      	ldr	r2, [pc, #572]	@ (800374c <UART_SetConfig+0x6a0>)
 800350e:	4293      	cmp	r3, r2
 8003510:	d130      	bne.n	8003574 <UART_SetConfig+0x4c8>
 8003512:	4b8d      	ldr	r3, [pc, #564]	@ (8003748 <UART_SetConfig+0x69c>)
 8003514:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003516:	f003 0307 	and.w	r3, r3, #7
 800351a:	2b05      	cmp	r3, #5
 800351c:	d826      	bhi.n	800356c <UART_SetConfig+0x4c0>
 800351e:	a201      	add	r2, pc, #4	@ (adr r2, 8003524 <UART_SetConfig+0x478>)
 8003520:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003524:	0800353d 	.word	0x0800353d
 8003528:	08003545 	.word	0x08003545
 800352c:	0800354d 	.word	0x0800354d
 8003530:	08003555 	.word	0x08003555
 8003534:	0800355d 	.word	0x0800355d
 8003538:	08003565 	.word	0x08003565
 800353c:	2300      	movs	r3, #0
 800353e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003542:	e086      	b.n	8003652 <UART_SetConfig+0x5a6>
 8003544:	2304      	movs	r3, #4
 8003546:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800354a:	e082      	b.n	8003652 <UART_SetConfig+0x5a6>
 800354c:	2308      	movs	r3, #8
 800354e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003552:	e07e      	b.n	8003652 <UART_SetConfig+0x5a6>
 8003554:	2310      	movs	r3, #16
 8003556:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800355a:	e07a      	b.n	8003652 <UART_SetConfig+0x5a6>
 800355c:	2320      	movs	r3, #32
 800355e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003562:	e076      	b.n	8003652 <UART_SetConfig+0x5a6>
 8003564:	2340      	movs	r3, #64	@ 0x40
 8003566:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800356a:	e072      	b.n	8003652 <UART_SetConfig+0x5a6>
 800356c:	2380      	movs	r3, #128	@ 0x80
 800356e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003572:	e06e      	b.n	8003652 <UART_SetConfig+0x5a6>
 8003574:	697b      	ldr	r3, [r7, #20]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	4a75      	ldr	r2, [pc, #468]	@ (8003750 <UART_SetConfig+0x6a4>)
 800357a:	4293      	cmp	r3, r2
 800357c:	d130      	bne.n	80035e0 <UART_SetConfig+0x534>
 800357e:	4b72      	ldr	r3, [pc, #456]	@ (8003748 <UART_SetConfig+0x69c>)
 8003580:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003582:	f003 0307 	and.w	r3, r3, #7
 8003586:	2b05      	cmp	r3, #5
 8003588:	d826      	bhi.n	80035d8 <UART_SetConfig+0x52c>
 800358a:	a201      	add	r2, pc, #4	@ (adr r2, 8003590 <UART_SetConfig+0x4e4>)
 800358c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003590:	080035a9 	.word	0x080035a9
 8003594:	080035b1 	.word	0x080035b1
 8003598:	080035b9 	.word	0x080035b9
 800359c:	080035c1 	.word	0x080035c1
 80035a0:	080035c9 	.word	0x080035c9
 80035a4:	080035d1 	.word	0x080035d1
 80035a8:	2300      	movs	r3, #0
 80035aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80035ae:	e050      	b.n	8003652 <UART_SetConfig+0x5a6>
 80035b0:	2304      	movs	r3, #4
 80035b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80035b6:	e04c      	b.n	8003652 <UART_SetConfig+0x5a6>
 80035b8:	2308      	movs	r3, #8
 80035ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80035be:	e048      	b.n	8003652 <UART_SetConfig+0x5a6>
 80035c0:	2310      	movs	r3, #16
 80035c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80035c6:	e044      	b.n	8003652 <UART_SetConfig+0x5a6>
 80035c8:	2320      	movs	r3, #32
 80035ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80035ce:	e040      	b.n	8003652 <UART_SetConfig+0x5a6>
 80035d0:	2340      	movs	r3, #64	@ 0x40
 80035d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80035d6:	e03c      	b.n	8003652 <UART_SetConfig+0x5a6>
 80035d8:	2380      	movs	r3, #128	@ 0x80
 80035da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80035de:	e038      	b.n	8003652 <UART_SetConfig+0x5a6>
 80035e0:	697b      	ldr	r3, [r7, #20]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	4a5b      	ldr	r2, [pc, #364]	@ (8003754 <UART_SetConfig+0x6a8>)
 80035e6:	4293      	cmp	r3, r2
 80035e8:	d130      	bne.n	800364c <UART_SetConfig+0x5a0>
 80035ea:	4b57      	ldr	r3, [pc, #348]	@ (8003748 <UART_SetConfig+0x69c>)
 80035ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035ee:	f003 0307 	and.w	r3, r3, #7
 80035f2:	2b05      	cmp	r3, #5
 80035f4:	d826      	bhi.n	8003644 <UART_SetConfig+0x598>
 80035f6:	a201      	add	r2, pc, #4	@ (adr r2, 80035fc <UART_SetConfig+0x550>)
 80035f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035fc:	08003615 	.word	0x08003615
 8003600:	0800361d 	.word	0x0800361d
 8003604:	08003625 	.word	0x08003625
 8003608:	0800362d 	.word	0x0800362d
 800360c:	08003635 	.word	0x08003635
 8003610:	0800363d 	.word	0x0800363d
 8003614:	2302      	movs	r3, #2
 8003616:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800361a:	e01a      	b.n	8003652 <UART_SetConfig+0x5a6>
 800361c:	2304      	movs	r3, #4
 800361e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003622:	e016      	b.n	8003652 <UART_SetConfig+0x5a6>
 8003624:	2308      	movs	r3, #8
 8003626:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800362a:	e012      	b.n	8003652 <UART_SetConfig+0x5a6>
 800362c:	2310      	movs	r3, #16
 800362e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003632:	e00e      	b.n	8003652 <UART_SetConfig+0x5a6>
 8003634:	2320      	movs	r3, #32
 8003636:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800363a:	e00a      	b.n	8003652 <UART_SetConfig+0x5a6>
 800363c:	2340      	movs	r3, #64	@ 0x40
 800363e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003642:	e006      	b.n	8003652 <UART_SetConfig+0x5a6>
 8003644:	2380      	movs	r3, #128	@ 0x80
 8003646:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800364a:	e002      	b.n	8003652 <UART_SetConfig+0x5a6>
 800364c:	2380      	movs	r3, #128	@ 0x80
 800364e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003652:	697b      	ldr	r3, [r7, #20]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	4a3f      	ldr	r2, [pc, #252]	@ (8003754 <UART_SetConfig+0x6a8>)
 8003658:	4293      	cmp	r3, r2
 800365a:	f040 80f8 	bne.w	800384e <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800365e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8003662:	2b20      	cmp	r3, #32
 8003664:	dc46      	bgt.n	80036f4 <UART_SetConfig+0x648>
 8003666:	2b02      	cmp	r3, #2
 8003668:	f2c0 8082 	blt.w	8003770 <UART_SetConfig+0x6c4>
 800366c:	3b02      	subs	r3, #2
 800366e:	2b1e      	cmp	r3, #30
 8003670:	d87e      	bhi.n	8003770 <UART_SetConfig+0x6c4>
 8003672:	a201      	add	r2, pc, #4	@ (adr r2, 8003678 <UART_SetConfig+0x5cc>)
 8003674:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003678:	080036fb 	.word	0x080036fb
 800367c:	08003771 	.word	0x08003771
 8003680:	08003703 	.word	0x08003703
 8003684:	08003771 	.word	0x08003771
 8003688:	08003771 	.word	0x08003771
 800368c:	08003771 	.word	0x08003771
 8003690:	08003713 	.word	0x08003713
 8003694:	08003771 	.word	0x08003771
 8003698:	08003771 	.word	0x08003771
 800369c:	08003771 	.word	0x08003771
 80036a0:	08003771 	.word	0x08003771
 80036a4:	08003771 	.word	0x08003771
 80036a8:	08003771 	.word	0x08003771
 80036ac:	08003771 	.word	0x08003771
 80036b0:	08003723 	.word	0x08003723
 80036b4:	08003771 	.word	0x08003771
 80036b8:	08003771 	.word	0x08003771
 80036bc:	08003771 	.word	0x08003771
 80036c0:	08003771 	.word	0x08003771
 80036c4:	08003771 	.word	0x08003771
 80036c8:	08003771 	.word	0x08003771
 80036cc:	08003771 	.word	0x08003771
 80036d0:	08003771 	.word	0x08003771
 80036d4:	08003771 	.word	0x08003771
 80036d8:	08003771 	.word	0x08003771
 80036dc:	08003771 	.word	0x08003771
 80036e0:	08003771 	.word	0x08003771
 80036e4:	08003771 	.word	0x08003771
 80036e8:	08003771 	.word	0x08003771
 80036ec:	08003771 	.word	0x08003771
 80036f0:	08003763 	.word	0x08003763
 80036f4:	2b40      	cmp	r3, #64	@ 0x40
 80036f6:	d037      	beq.n	8003768 <UART_SetConfig+0x6bc>
 80036f8:	e03a      	b.n	8003770 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80036fa:	f7ff f931 	bl	8002960 <HAL_RCCEx_GetD3PCLK1Freq>
 80036fe:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8003700:	e03c      	b.n	800377c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8003702:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003706:	4618      	mov	r0, r3
 8003708:	f7ff f940 	bl	800298c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800370c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800370e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8003710:	e034      	b.n	800377c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8003712:	f107 0318 	add.w	r3, r7, #24
 8003716:	4618      	mov	r0, r3
 8003718:	f7ff fa8c 	bl	8002c34 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800371c:	69fb      	ldr	r3, [r7, #28]
 800371e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8003720:	e02c      	b.n	800377c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003722:	4b09      	ldr	r3, [pc, #36]	@ (8003748 <UART_SetConfig+0x69c>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f003 0320 	and.w	r3, r3, #32
 800372a:	2b00      	cmp	r3, #0
 800372c:	d016      	beq.n	800375c <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800372e:	4b06      	ldr	r3, [pc, #24]	@ (8003748 <UART_SetConfig+0x69c>)
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	08db      	lsrs	r3, r3, #3
 8003734:	f003 0303 	and.w	r3, r3, #3
 8003738:	4a07      	ldr	r2, [pc, #28]	@ (8003758 <UART_SetConfig+0x6ac>)
 800373a:	fa22 f303 	lsr.w	r3, r2, r3
 800373e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8003740:	e01c      	b.n	800377c <UART_SetConfig+0x6d0>
 8003742:	bf00      	nop
 8003744:	40011400 	.word	0x40011400
 8003748:	58024400 	.word	0x58024400
 800374c:	40007800 	.word	0x40007800
 8003750:	40007c00 	.word	0x40007c00
 8003754:	58000c00 	.word	0x58000c00
 8003758:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800375c:	4b9d      	ldr	r3, [pc, #628]	@ (80039d4 <UART_SetConfig+0x928>)
 800375e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8003760:	e00c      	b.n	800377c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8003762:	4b9d      	ldr	r3, [pc, #628]	@ (80039d8 <UART_SetConfig+0x92c>)
 8003764:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8003766:	e009      	b.n	800377c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003768:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800376c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800376e:	e005      	b.n	800377c <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8003770:	2300      	movs	r3, #0
 8003772:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8003774:	2301      	movs	r3, #1
 8003776:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800377a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800377c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800377e:	2b00      	cmp	r3, #0
 8003780:	f000 81de 	beq.w	8003b40 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003784:	697b      	ldr	r3, [r7, #20]
 8003786:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003788:	4a94      	ldr	r2, [pc, #592]	@ (80039dc <UART_SetConfig+0x930>)
 800378a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800378e:	461a      	mov	r2, r3
 8003790:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003792:	fbb3 f3f2 	udiv	r3, r3, r2
 8003796:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003798:	697b      	ldr	r3, [r7, #20]
 800379a:	685a      	ldr	r2, [r3, #4]
 800379c:	4613      	mov	r3, r2
 800379e:	005b      	lsls	r3, r3, #1
 80037a0:	4413      	add	r3, r2
 80037a2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80037a4:	429a      	cmp	r2, r3
 80037a6:	d305      	bcc.n	80037b4 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80037a8:	697b      	ldr	r3, [r7, #20]
 80037aa:	685b      	ldr	r3, [r3, #4]
 80037ac:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80037ae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80037b0:	429a      	cmp	r2, r3
 80037b2:	d903      	bls.n	80037bc <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 80037b4:	2301      	movs	r3, #1
 80037b6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80037ba:	e1c1      	b.n	8003b40 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80037bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80037be:	2200      	movs	r2, #0
 80037c0:	60bb      	str	r3, [r7, #8]
 80037c2:	60fa      	str	r2, [r7, #12]
 80037c4:	697b      	ldr	r3, [r7, #20]
 80037c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037c8:	4a84      	ldr	r2, [pc, #528]	@ (80039dc <UART_SetConfig+0x930>)
 80037ca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80037ce:	b29b      	uxth	r3, r3
 80037d0:	2200      	movs	r2, #0
 80037d2:	603b      	str	r3, [r7, #0]
 80037d4:	607a      	str	r2, [r7, #4]
 80037d6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80037da:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80037de:	f7fc fdcf 	bl	8000380 <__aeabi_uldivmod>
 80037e2:	4602      	mov	r2, r0
 80037e4:	460b      	mov	r3, r1
 80037e6:	4610      	mov	r0, r2
 80037e8:	4619      	mov	r1, r3
 80037ea:	f04f 0200 	mov.w	r2, #0
 80037ee:	f04f 0300 	mov.w	r3, #0
 80037f2:	020b      	lsls	r3, r1, #8
 80037f4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80037f8:	0202      	lsls	r2, r0, #8
 80037fa:	6979      	ldr	r1, [r7, #20]
 80037fc:	6849      	ldr	r1, [r1, #4]
 80037fe:	0849      	lsrs	r1, r1, #1
 8003800:	2000      	movs	r0, #0
 8003802:	460c      	mov	r4, r1
 8003804:	4605      	mov	r5, r0
 8003806:	eb12 0804 	adds.w	r8, r2, r4
 800380a:	eb43 0905 	adc.w	r9, r3, r5
 800380e:	697b      	ldr	r3, [r7, #20]
 8003810:	685b      	ldr	r3, [r3, #4]
 8003812:	2200      	movs	r2, #0
 8003814:	469a      	mov	sl, r3
 8003816:	4693      	mov	fp, r2
 8003818:	4652      	mov	r2, sl
 800381a:	465b      	mov	r3, fp
 800381c:	4640      	mov	r0, r8
 800381e:	4649      	mov	r1, r9
 8003820:	f7fc fdae 	bl	8000380 <__aeabi_uldivmod>
 8003824:	4602      	mov	r2, r0
 8003826:	460b      	mov	r3, r1
 8003828:	4613      	mov	r3, r2
 800382a:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800382c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800382e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003832:	d308      	bcc.n	8003846 <UART_SetConfig+0x79a>
 8003834:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003836:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800383a:	d204      	bcs.n	8003846 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800383c:	697b      	ldr	r3, [r7, #20]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003842:	60da      	str	r2, [r3, #12]
 8003844:	e17c      	b.n	8003b40 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8003846:	2301      	movs	r3, #1
 8003848:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800384c:	e178      	b.n	8003b40 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800384e:	697b      	ldr	r3, [r7, #20]
 8003850:	69db      	ldr	r3, [r3, #28]
 8003852:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003856:	f040 80c5 	bne.w	80039e4 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800385a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800385e:	2b20      	cmp	r3, #32
 8003860:	dc48      	bgt.n	80038f4 <UART_SetConfig+0x848>
 8003862:	2b00      	cmp	r3, #0
 8003864:	db7b      	blt.n	800395e <UART_SetConfig+0x8b2>
 8003866:	2b20      	cmp	r3, #32
 8003868:	d879      	bhi.n	800395e <UART_SetConfig+0x8b2>
 800386a:	a201      	add	r2, pc, #4	@ (adr r2, 8003870 <UART_SetConfig+0x7c4>)
 800386c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003870:	080038fb 	.word	0x080038fb
 8003874:	08003903 	.word	0x08003903
 8003878:	0800395f 	.word	0x0800395f
 800387c:	0800395f 	.word	0x0800395f
 8003880:	0800390b 	.word	0x0800390b
 8003884:	0800395f 	.word	0x0800395f
 8003888:	0800395f 	.word	0x0800395f
 800388c:	0800395f 	.word	0x0800395f
 8003890:	0800391b 	.word	0x0800391b
 8003894:	0800395f 	.word	0x0800395f
 8003898:	0800395f 	.word	0x0800395f
 800389c:	0800395f 	.word	0x0800395f
 80038a0:	0800395f 	.word	0x0800395f
 80038a4:	0800395f 	.word	0x0800395f
 80038a8:	0800395f 	.word	0x0800395f
 80038ac:	0800395f 	.word	0x0800395f
 80038b0:	0800392b 	.word	0x0800392b
 80038b4:	0800395f 	.word	0x0800395f
 80038b8:	0800395f 	.word	0x0800395f
 80038bc:	0800395f 	.word	0x0800395f
 80038c0:	0800395f 	.word	0x0800395f
 80038c4:	0800395f 	.word	0x0800395f
 80038c8:	0800395f 	.word	0x0800395f
 80038cc:	0800395f 	.word	0x0800395f
 80038d0:	0800395f 	.word	0x0800395f
 80038d4:	0800395f 	.word	0x0800395f
 80038d8:	0800395f 	.word	0x0800395f
 80038dc:	0800395f 	.word	0x0800395f
 80038e0:	0800395f 	.word	0x0800395f
 80038e4:	0800395f 	.word	0x0800395f
 80038e8:	0800395f 	.word	0x0800395f
 80038ec:	0800395f 	.word	0x0800395f
 80038f0:	08003951 	.word	0x08003951
 80038f4:	2b40      	cmp	r3, #64	@ 0x40
 80038f6:	d02e      	beq.n	8003956 <UART_SetConfig+0x8aa>
 80038f8:	e031      	b.n	800395e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80038fa:	f7ff f805 	bl	8002908 <HAL_RCC_GetPCLK1Freq>
 80038fe:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8003900:	e033      	b.n	800396a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003902:	f7ff f817 	bl	8002934 <HAL_RCC_GetPCLK2Freq>
 8003906:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8003908:	e02f      	b.n	800396a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800390a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800390e:	4618      	mov	r0, r3
 8003910:	f7ff f83c 	bl	800298c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8003914:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003916:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8003918:	e027      	b.n	800396a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800391a:	f107 0318 	add.w	r3, r7, #24
 800391e:	4618      	mov	r0, r3
 8003920:	f7ff f988 	bl	8002c34 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8003924:	69fb      	ldr	r3, [r7, #28]
 8003926:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8003928:	e01f      	b.n	800396a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800392a:	4b2d      	ldr	r3, [pc, #180]	@ (80039e0 <UART_SetConfig+0x934>)
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f003 0320 	and.w	r3, r3, #32
 8003932:	2b00      	cmp	r3, #0
 8003934:	d009      	beq.n	800394a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8003936:	4b2a      	ldr	r3, [pc, #168]	@ (80039e0 <UART_SetConfig+0x934>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	08db      	lsrs	r3, r3, #3
 800393c:	f003 0303 	and.w	r3, r3, #3
 8003940:	4a24      	ldr	r2, [pc, #144]	@ (80039d4 <UART_SetConfig+0x928>)
 8003942:	fa22 f303 	lsr.w	r3, r2, r3
 8003946:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8003948:	e00f      	b.n	800396a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800394a:	4b22      	ldr	r3, [pc, #136]	@ (80039d4 <UART_SetConfig+0x928>)
 800394c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800394e:	e00c      	b.n	800396a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8003950:	4b21      	ldr	r3, [pc, #132]	@ (80039d8 <UART_SetConfig+0x92c>)
 8003952:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8003954:	e009      	b.n	800396a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003956:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800395a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800395c:	e005      	b.n	800396a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800395e:	2300      	movs	r3, #0
 8003960:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8003962:	2301      	movs	r3, #1
 8003964:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8003968:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800396a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800396c:	2b00      	cmp	r3, #0
 800396e:	f000 80e7 	beq.w	8003b40 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003972:	697b      	ldr	r3, [r7, #20]
 8003974:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003976:	4a19      	ldr	r2, [pc, #100]	@ (80039dc <UART_SetConfig+0x930>)
 8003978:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800397c:	461a      	mov	r2, r3
 800397e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003980:	fbb3 f3f2 	udiv	r3, r3, r2
 8003984:	005a      	lsls	r2, r3, #1
 8003986:	697b      	ldr	r3, [r7, #20]
 8003988:	685b      	ldr	r3, [r3, #4]
 800398a:	085b      	lsrs	r3, r3, #1
 800398c:	441a      	add	r2, r3
 800398e:	697b      	ldr	r3, [r7, #20]
 8003990:	685b      	ldr	r3, [r3, #4]
 8003992:	fbb2 f3f3 	udiv	r3, r2, r3
 8003996:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003998:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800399a:	2b0f      	cmp	r3, #15
 800399c:	d916      	bls.n	80039cc <UART_SetConfig+0x920>
 800399e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80039a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80039a4:	d212      	bcs.n	80039cc <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80039a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80039a8:	b29b      	uxth	r3, r3
 80039aa:	f023 030f 	bic.w	r3, r3, #15
 80039ae:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80039b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80039b2:	085b      	lsrs	r3, r3, #1
 80039b4:	b29b      	uxth	r3, r3
 80039b6:	f003 0307 	and.w	r3, r3, #7
 80039ba:	b29a      	uxth	r2, r3
 80039bc:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80039be:	4313      	orrs	r3, r2
 80039c0:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 80039c2:	697b      	ldr	r3, [r7, #20]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 80039c8:	60da      	str	r2, [r3, #12]
 80039ca:	e0b9      	b.n	8003b40 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80039cc:	2301      	movs	r3, #1
 80039ce:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80039d2:	e0b5      	b.n	8003b40 <UART_SetConfig+0xa94>
 80039d4:	03d09000 	.word	0x03d09000
 80039d8:	003d0900 	.word	0x003d0900
 80039dc:	08004e6c 	.word	0x08004e6c
 80039e0:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 80039e4:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80039e8:	2b20      	cmp	r3, #32
 80039ea:	dc49      	bgt.n	8003a80 <UART_SetConfig+0x9d4>
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	db7c      	blt.n	8003aea <UART_SetConfig+0xa3e>
 80039f0:	2b20      	cmp	r3, #32
 80039f2:	d87a      	bhi.n	8003aea <UART_SetConfig+0xa3e>
 80039f4:	a201      	add	r2, pc, #4	@ (adr r2, 80039fc <UART_SetConfig+0x950>)
 80039f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039fa:	bf00      	nop
 80039fc:	08003a87 	.word	0x08003a87
 8003a00:	08003a8f 	.word	0x08003a8f
 8003a04:	08003aeb 	.word	0x08003aeb
 8003a08:	08003aeb 	.word	0x08003aeb
 8003a0c:	08003a97 	.word	0x08003a97
 8003a10:	08003aeb 	.word	0x08003aeb
 8003a14:	08003aeb 	.word	0x08003aeb
 8003a18:	08003aeb 	.word	0x08003aeb
 8003a1c:	08003aa7 	.word	0x08003aa7
 8003a20:	08003aeb 	.word	0x08003aeb
 8003a24:	08003aeb 	.word	0x08003aeb
 8003a28:	08003aeb 	.word	0x08003aeb
 8003a2c:	08003aeb 	.word	0x08003aeb
 8003a30:	08003aeb 	.word	0x08003aeb
 8003a34:	08003aeb 	.word	0x08003aeb
 8003a38:	08003aeb 	.word	0x08003aeb
 8003a3c:	08003ab7 	.word	0x08003ab7
 8003a40:	08003aeb 	.word	0x08003aeb
 8003a44:	08003aeb 	.word	0x08003aeb
 8003a48:	08003aeb 	.word	0x08003aeb
 8003a4c:	08003aeb 	.word	0x08003aeb
 8003a50:	08003aeb 	.word	0x08003aeb
 8003a54:	08003aeb 	.word	0x08003aeb
 8003a58:	08003aeb 	.word	0x08003aeb
 8003a5c:	08003aeb 	.word	0x08003aeb
 8003a60:	08003aeb 	.word	0x08003aeb
 8003a64:	08003aeb 	.word	0x08003aeb
 8003a68:	08003aeb 	.word	0x08003aeb
 8003a6c:	08003aeb 	.word	0x08003aeb
 8003a70:	08003aeb 	.word	0x08003aeb
 8003a74:	08003aeb 	.word	0x08003aeb
 8003a78:	08003aeb 	.word	0x08003aeb
 8003a7c:	08003add 	.word	0x08003add
 8003a80:	2b40      	cmp	r3, #64	@ 0x40
 8003a82:	d02e      	beq.n	8003ae2 <UART_SetConfig+0xa36>
 8003a84:	e031      	b.n	8003aea <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003a86:	f7fe ff3f 	bl	8002908 <HAL_RCC_GetPCLK1Freq>
 8003a8a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8003a8c:	e033      	b.n	8003af6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003a8e:	f7fe ff51 	bl	8002934 <HAL_RCC_GetPCLK2Freq>
 8003a92:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8003a94:	e02f      	b.n	8003af6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8003a96:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	f7fe ff76 	bl	800298c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8003aa0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003aa2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8003aa4:	e027      	b.n	8003af6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8003aa6:	f107 0318 	add.w	r3, r7, #24
 8003aaa:	4618      	mov	r0, r3
 8003aac:	f7ff f8c2 	bl	8002c34 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8003ab0:	69fb      	ldr	r3, [r7, #28]
 8003ab2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8003ab4:	e01f      	b.n	8003af6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003ab6:	4b2d      	ldr	r3, [pc, #180]	@ (8003b6c <UART_SetConfig+0xac0>)
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f003 0320 	and.w	r3, r3, #32
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d009      	beq.n	8003ad6 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8003ac2:	4b2a      	ldr	r3, [pc, #168]	@ (8003b6c <UART_SetConfig+0xac0>)
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	08db      	lsrs	r3, r3, #3
 8003ac8:	f003 0303 	and.w	r3, r3, #3
 8003acc:	4a28      	ldr	r2, [pc, #160]	@ (8003b70 <UART_SetConfig+0xac4>)
 8003ace:	fa22 f303 	lsr.w	r3, r2, r3
 8003ad2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8003ad4:	e00f      	b.n	8003af6 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8003ad6:	4b26      	ldr	r3, [pc, #152]	@ (8003b70 <UART_SetConfig+0xac4>)
 8003ad8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8003ada:	e00c      	b.n	8003af6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8003adc:	4b25      	ldr	r3, [pc, #148]	@ (8003b74 <UART_SetConfig+0xac8>)
 8003ade:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8003ae0:	e009      	b.n	8003af6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003ae2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003ae6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8003ae8:	e005      	b.n	8003af6 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8003aea:	2300      	movs	r3, #0
 8003aec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8003aee:	2301      	movs	r3, #1
 8003af0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8003af4:	bf00      	nop
    }

    if (pclk != 0U)
 8003af6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d021      	beq.n	8003b40 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003afc:	697b      	ldr	r3, [r7, #20]
 8003afe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b00:	4a1d      	ldr	r2, [pc, #116]	@ (8003b78 <UART_SetConfig+0xacc>)
 8003b02:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003b06:	461a      	mov	r2, r3
 8003b08:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003b0a:	fbb3 f2f2 	udiv	r2, r3, r2
 8003b0e:	697b      	ldr	r3, [r7, #20]
 8003b10:	685b      	ldr	r3, [r3, #4]
 8003b12:	085b      	lsrs	r3, r3, #1
 8003b14:	441a      	add	r2, r3
 8003b16:	697b      	ldr	r3, [r7, #20]
 8003b18:	685b      	ldr	r3, [r3, #4]
 8003b1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b1e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003b20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b22:	2b0f      	cmp	r3, #15
 8003b24:	d909      	bls.n	8003b3a <UART_SetConfig+0xa8e>
 8003b26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b28:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003b2c:	d205      	bcs.n	8003b3a <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003b2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b30:	b29a      	uxth	r2, r3
 8003b32:	697b      	ldr	r3, [r7, #20]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	60da      	str	r2, [r3, #12]
 8003b38:	e002      	b.n	8003b40 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8003b3a:	2301      	movs	r3, #1
 8003b3c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003b40:	697b      	ldr	r3, [r7, #20]
 8003b42:	2201      	movs	r2, #1
 8003b44:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8003b48:	697b      	ldr	r3, [r7, #20]
 8003b4a:	2201      	movs	r2, #1
 8003b4c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003b50:	697b      	ldr	r3, [r7, #20]
 8003b52:	2200      	movs	r2, #0
 8003b54:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8003b56:	697b      	ldr	r3, [r7, #20]
 8003b58:	2200      	movs	r2, #0
 8003b5a:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8003b5c:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8003b60:	4618      	mov	r0, r3
 8003b62:	3748      	adds	r7, #72	@ 0x48
 8003b64:	46bd      	mov	sp, r7
 8003b66:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003b6a:	bf00      	nop
 8003b6c:	58024400 	.word	0x58024400
 8003b70:	03d09000 	.word	0x03d09000
 8003b74:	003d0900 	.word	0x003d0900
 8003b78:	08004e6c 	.word	0x08004e6c

08003b7c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003b7c:	b480      	push	{r7}
 8003b7e:	b083      	sub	sp, #12
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b88:	f003 0308 	and.w	r3, r3, #8
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d00a      	beq.n	8003ba6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	685b      	ldr	r3, [r3, #4]
 8003b96:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	430a      	orrs	r2, r1
 8003ba4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003baa:	f003 0301 	and.w	r3, r3, #1
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d00a      	beq.n	8003bc8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	685b      	ldr	r3, [r3, #4]
 8003bb8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	430a      	orrs	r2, r1
 8003bc6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bcc:	f003 0302 	and.w	r3, r3, #2
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d00a      	beq.n	8003bea <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	685b      	ldr	r3, [r3, #4]
 8003bda:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	430a      	orrs	r2, r1
 8003be8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bee:	f003 0304 	and.w	r3, r3, #4
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d00a      	beq.n	8003c0c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	685b      	ldr	r3, [r3, #4]
 8003bfc:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	430a      	orrs	r2, r1
 8003c0a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c10:	f003 0310 	and.w	r3, r3, #16
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d00a      	beq.n	8003c2e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	689b      	ldr	r3, [r3, #8]
 8003c1e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	430a      	orrs	r2, r1
 8003c2c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c32:	f003 0320 	and.w	r3, r3, #32
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d00a      	beq.n	8003c50 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	689b      	ldr	r3, [r3, #8]
 8003c40:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	430a      	orrs	r2, r1
 8003c4e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c54:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d01a      	beq.n	8003c92 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	685b      	ldr	r3, [r3, #4]
 8003c62:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	430a      	orrs	r2, r1
 8003c70:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c76:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003c7a:	d10a      	bne.n	8003c92 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	685b      	ldr	r3, [r3, #4]
 8003c82:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	430a      	orrs	r2, r1
 8003c90:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c96:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d00a      	beq.n	8003cb4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	685b      	ldr	r3, [r3, #4]
 8003ca4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	430a      	orrs	r2, r1
 8003cb2:	605a      	str	r2, [r3, #4]
  }
}
 8003cb4:	bf00      	nop
 8003cb6:	370c      	adds	r7, #12
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cbe:	4770      	bx	lr

08003cc0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b098      	sub	sp, #96	@ 0x60
 8003cc4:	af02      	add	r7, sp, #8
 8003cc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2200      	movs	r2, #0
 8003ccc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003cd0:	f7fd fa48 	bl	8001164 <HAL_GetTick>
 8003cd4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f003 0308 	and.w	r3, r3, #8
 8003ce0:	2b08      	cmp	r3, #8
 8003ce2:	d12f      	bne.n	8003d44 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003ce4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003ce8:	9300      	str	r3, [sp, #0]
 8003cea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003cec:	2200      	movs	r2, #0
 8003cee:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003cf2:	6878      	ldr	r0, [r7, #4]
 8003cf4:	f000 f88e 	bl	8003e14 <UART_WaitOnFlagUntilTimeout>
 8003cf8:	4603      	mov	r3, r0
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d022      	beq.n	8003d44 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d06:	e853 3f00 	ldrex	r3, [r3]
 8003d0a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003d0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d0e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003d12:	653b      	str	r3, [r7, #80]	@ 0x50
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	461a      	mov	r2, r3
 8003d1a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003d1c:	647b      	str	r3, [r7, #68]	@ 0x44
 8003d1e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d20:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003d22:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003d24:	e841 2300 	strex	r3, r2, [r1]
 8003d28:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003d2a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d1e6      	bne.n	8003cfe <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2220      	movs	r2, #32
 8003d34:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003d40:	2303      	movs	r3, #3
 8003d42:	e063      	b.n	8003e0c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f003 0304 	and.w	r3, r3, #4
 8003d4e:	2b04      	cmp	r3, #4
 8003d50:	d149      	bne.n	8003de6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003d52:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003d56:	9300      	str	r3, [sp, #0]
 8003d58:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8003d60:	6878      	ldr	r0, [r7, #4]
 8003d62:	f000 f857 	bl	8003e14 <UART_WaitOnFlagUntilTimeout>
 8003d66:	4603      	mov	r3, r0
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d03c      	beq.n	8003de6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d74:	e853 3f00 	ldrex	r3, [r3]
 8003d78:	623b      	str	r3, [r7, #32]
   return(result);
 8003d7a:	6a3b      	ldr	r3, [r7, #32]
 8003d7c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003d80:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	461a      	mov	r2, r3
 8003d88:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003d8a:	633b      	str	r3, [r7, #48]	@ 0x30
 8003d8c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d8e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003d90:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003d92:	e841 2300 	strex	r3, r2, [r1]
 8003d96:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003d98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d1e6      	bne.n	8003d6c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	3308      	adds	r3, #8
 8003da4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003da6:	693b      	ldr	r3, [r7, #16]
 8003da8:	e853 3f00 	ldrex	r3, [r3]
 8003dac:	60fb      	str	r3, [r7, #12]
   return(result);
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	f023 0301 	bic.w	r3, r3, #1
 8003db4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	3308      	adds	r3, #8
 8003dbc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003dbe:	61fa      	str	r2, [r7, #28]
 8003dc0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dc2:	69b9      	ldr	r1, [r7, #24]
 8003dc4:	69fa      	ldr	r2, [r7, #28]
 8003dc6:	e841 2300 	strex	r3, r2, [r1]
 8003dca:	617b      	str	r3, [r7, #20]
   return(result);
 8003dcc:	697b      	ldr	r3, [r7, #20]
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d1e5      	bne.n	8003d9e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	2220      	movs	r2, #32
 8003dd6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	2200      	movs	r2, #0
 8003dde:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003de2:	2303      	movs	r3, #3
 8003de4:	e012      	b.n	8003e0c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	2220      	movs	r2, #32
 8003dea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	2220      	movs	r2, #32
 8003df2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	2200      	movs	r2, #0
 8003dfa:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2200      	movs	r2, #0
 8003e00:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	2200      	movs	r2, #0
 8003e06:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8003e0a:	2300      	movs	r3, #0
}
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	3758      	adds	r7, #88	@ 0x58
 8003e10:	46bd      	mov	sp, r7
 8003e12:	bd80      	pop	{r7, pc}

08003e14 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b084      	sub	sp, #16
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	60f8      	str	r0, [r7, #12]
 8003e1c:	60b9      	str	r1, [r7, #8]
 8003e1e:	603b      	str	r3, [r7, #0]
 8003e20:	4613      	mov	r3, r2
 8003e22:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e24:	e04f      	b.n	8003ec6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e26:	69bb      	ldr	r3, [r7, #24]
 8003e28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e2c:	d04b      	beq.n	8003ec6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e2e:	f7fd f999 	bl	8001164 <HAL_GetTick>
 8003e32:	4602      	mov	r2, r0
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	1ad3      	subs	r3, r2, r3
 8003e38:	69ba      	ldr	r2, [r7, #24]
 8003e3a:	429a      	cmp	r2, r3
 8003e3c:	d302      	bcc.n	8003e44 <UART_WaitOnFlagUntilTimeout+0x30>
 8003e3e:	69bb      	ldr	r3, [r7, #24]
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d101      	bne.n	8003e48 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003e44:	2303      	movs	r3, #3
 8003e46:	e04e      	b.n	8003ee6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f003 0304 	and.w	r3, r3, #4
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d037      	beq.n	8003ec6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003e56:	68bb      	ldr	r3, [r7, #8]
 8003e58:	2b80      	cmp	r3, #128	@ 0x80
 8003e5a:	d034      	beq.n	8003ec6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003e5c:	68bb      	ldr	r3, [r7, #8]
 8003e5e:	2b40      	cmp	r3, #64	@ 0x40
 8003e60:	d031      	beq.n	8003ec6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	69db      	ldr	r3, [r3, #28]
 8003e68:	f003 0308 	and.w	r3, r3, #8
 8003e6c:	2b08      	cmp	r3, #8
 8003e6e:	d110      	bne.n	8003e92 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	2208      	movs	r2, #8
 8003e76:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003e78:	68f8      	ldr	r0, [r7, #12]
 8003e7a:	f000 f839 	bl	8003ef0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	2208      	movs	r2, #8
 8003e82:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	2200      	movs	r2, #0
 8003e8a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8003e8e:	2301      	movs	r3, #1
 8003e90:	e029      	b.n	8003ee6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	69db      	ldr	r3, [r3, #28]
 8003e98:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003e9c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003ea0:	d111      	bne.n	8003ec6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003eaa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003eac:	68f8      	ldr	r0, [r7, #12]
 8003eae:	f000 f81f 	bl	8003ef0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	2220      	movs	r2, #32
 8003eb6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8003ec2:	2303      	movs	r3, #3
 8003ec4:	e00f      	b.n	8003ee6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	69da      	ldr	r2, [r3, #28]
 8003ecc:	68bb      	ldr	r3, [r7, #8]
 8003ece:	4013      	ands	r3, r2
 8003ed0:	68ba      	ldr	r2, [r7, #8]
 8003ed2:	429a      	cmp	r2, r3
 8003ed4:	bf0c      	ite	eq
 8003ed6:	2301      	moveq	r3, #1
 8003ed8:	2300      	movne	r3, #0
 8003eda:	b2db      	uxtb	r3, r3
 8003edc:	461a      	mov	r2, r3
 8003ede:	79fb      	ldrb	r3, [r7, #7]
 8003ee0:	429a      	cmp	r2, r3
 8003ee2:	d0a0      	beq.n	8003e26 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003ee4:	2300      	movs	r3, #0
}
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	3710      	adds	r7, #16
 8003eea:	46bd      	mov	sp, r7
 8003eec:	bd80      	pop	{r7, pc}
	...

08003ef0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003ef0:	b480      	push	{r7}
 8003ef2:	b095      	sub	sp, #84	@ 0x54
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003efe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f00:	e853 3f00 	ldrex	r3, [r3]
 8003f04:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003f06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f08:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003f0c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	461a      	mov	r2, r3
 8003f14:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003f16:	643b      	str	r3, [r7, #64]	@ 0x40
 8003f18:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f1a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003f1c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003f1e:	e841 2300 	strex	r3, r2, [r1]
 8003f22:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003f24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d1e6      	bne.n	8003ef8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	3308      	adds	r3, #8
 8003f30:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f32:	6a3b      	ldr	r3, [r7, #32]
 8003f34:	e853 3f00 	ldrex	r3, [r3]
 8003f38:	61fb      	str	r3, [r7, #28]
   return(result);
 8003f3a:	69fa      	ldr	r2, [r7, #28]
 8003f3c:	4b1e      	ldr	r3, [pc, #120]	@ (8003fb8 <UART_EndRxTransfer+0xc8>)
 8003f3e:	4013      	ands	r3, r2
 8003f40:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	3308      	adds	r3, #8
 8003f48:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003f4a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003f4c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f4e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003f50:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003f52:	e841 2300 	strex	r3, r2, [r1]
 8003f56:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003f58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d1e5      	bne.n	8003f2a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003f62:	2b01      	cmp	r3, #1
 8003f64:	d118      	bne.n	8003f98 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	e853 3f00 	ldrex	r3, [r3]
 8003f72:	60bb      	str	r3, [r7, #8]
   return(result);
 8003f74:	68bb      	ldr	r3, [r7, #8]
 8003f76:	f023 0310 	bic.w	r3, r3, #16
 8003f7a:	647b      	str	r3, [r7, #68]	@ 0x44
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	461a      	mov	r2, r3
 8003f82:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003f84:	61bb      	str	r3, [r7, #24]
 8003f86:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f88:	6979      	ldr	r1, [r7, #20]
 8003f8a:	69ba      	ldr	r2, [r7, #24]
 8003f8c:	e841 2300 	strex	r3, r2, [r1]
 8003f90:	613b      	str	r3, [r7, #16]
   return(result);
 8003f92:	693b      	ldr	r3, [r7, #16]
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d1e6      	bne.n	8003f66 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2220      	movs	r2, #32
 8003f9c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	2200      	movs	r2, #0
 8003faa:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8003fac:	bf00      	nop
 8003fae:	3754      	adds	r7, #84	@ 0x54
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb6:	4770      	bx	lr
 8003fb8:	effffffe 	.word	0xeffffffe

08003fbc <std>:
 8003fbc:	2300      	movs	r3, #0
 8003fbe:	b510      	push	{r4, lr}
 8003fc0:	4604      	mov	r4, r0
 8003fc2:	e9c0 3300 	strd	r3, r3, [r0]
 8003fc6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003fca:	6083      	str	r3, [r0, #8]
 8003fcc:	8181      	strh	r1, [r0, #12]
 8003fce:	6643      	str	r3, [r0, #100]	@ 0x64
 8003fd0:	81c2      	strh	r2, [r0, #14]
 8003fd2:	6183      	str	r3, [r0, #24]
 8003fd4:	4619      	mov	r1, r3
 8003fd6:	2208      	movs	r2, #8
 8003fd8:	305c      	adds	r0, #92	@ 0x5c
 8003fda:	f000 f906 	bl	80041ea <memset>
 8003fde:	4b0d      	ldr	r3, [pc, #52]	@ (8004014 <std+0x58>)
 8003fe0:	6263      	str	r3, [r4, #36]	@ 0x24
 8003fe2:	4b0d      	ldr	r3, [pc, #52]	@ (8004018 <std+0x5c>)
 8003fe4:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003fe6:	4b0d      	ldr	r3, [pc, #52]	@ (800401c <std+0x60>)
 8003fe8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003fea:	4b0d      	ldr	r3, [pc, #52]	@ (8004020 <std+0x64>)
 8003fec:	6323      	str	r3, [r4, #48]	@ 0x30
 8003fee:	4b0d      	ldr	r3, [pc, #52]	@ (8004024 <std+0x68>)
 8003ff0:	6224      	str	r4, [r4, #32]
 8003ff2:	429c      	cmp	r4, r3
 8003ff4:	d006      	beq.n	8004004 <std+0x48>
 8003ff6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8003ffa:	4294      	cmp	r4, r2
 8003ffc:	d002      	beq.n	8004004 <std+0x48>
 8003ffe:	33d0      	adds	r3, #208	@ 0xd0
 8004000:	429c      	cmp	r4, r3
 8004002:	d105      	bne.n	8004010 <std+0x54>
 8004004:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004008:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800400c:	f000 b966 	b.w	80042dc <__retarget_lock_init_recursive>
 8004010:	bd10      	pop	{r4, pc}
 8004012:	bf00      	nop
 8004014:	08004165 	.word	0x08004165
 8004018:	08004187 	.word	0x08004187
 800401c:	080041bf 	.word	0x080041bf
 8004020:	080041e3 	.word	0x080041e3
 8004024:	24000160 	.word	0x24000160

08004028 <stdio_exit_handler>:
 8004028:	4a02      	ldr	r2, [pc, #8]	@ (8004034 <stdio_exit_handler+0xc>)
 800402a:	4903      	ldr	r1, [pc, #12]	@ (8004038 <stdio_exit_handler+0x10>)
 800402c:	4803      	ldr	r0, [pc, #12]	@ (800403c <stdio_exit_handler+0x14>)
 800402e:	f000 b869 	b.w	8004104 <_fwalk_sglue>
 8004032:	bf00      	nop
 8004034:	2400002c 	.word	0x2400002c
 8004038:	08004b7d 	.word	0x08004b7d
 800403c:	2400003c 	.word	0x2400003c

08004040 <cleanup_stdio>:
 8004040:	6841      	ldr	r1, [r0, #4]
 8004042:	4b0c      	ldr	r3, [pc, #48]	@ (8004074 <cleanup_stdio+0x34>)
 8004044:	4299      	cmp	r1, r3
 8004046:	b510      	push	{r4, lr}
 8004048:	4604      	mov	r4, r0
 800404a:	d001      	beq.n	8004050 <cleanup_stdio+0x10>
 800404c:	f000 fd96 	bl	8004b7c <_fflush_r>
 8004050:	68a1      	ldr	r1, [r4, #8]
 8004052:	4b09      	ldr	r3, [pc, #36]	@ (8004078 <cleanup_stdio+0x38>)
 8004054:	4299      	cmp	r1, r3
 8004056:	d002      	beq.n	800405e <cleanup_stdio+0x1e>
 8004058:	4620      	mov	r0, r4
 800405a:	f000 fd8f 	bl	8004b7c <_fflush_r>
 800405e:	68e1      	ldr	r1, [r4, #12]
 8004060:	4b06      	ldr	r3, [pc, #24]	@ (800407c <cleanup_stdio+0x3c>)
 8004062:	4299      	cmp	r1, r3
 8004064:	d004      	beq.n	8004070 <cleanup_stdio+0x30>
 8004066:	4620      	mov	r0, r4
 8004068:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800406c:	f000 bd86 	b.w	8004b7c <_fflush_r>
 8004070:	bd10      	pop	{r4, pc}
 8004072:	bf00      	nop
 8004074:	24000160 	.word	0x24000160
 8004078:	240001c8 	.word	0x240001c8
 800407c:	24000230 	.word	0x24000230

08004080 <global_stdio_init.part.0>:
 8004080:	b510      	push	{r4, lr}
 8004082:	4b0b      	ldr	r3, [pc, #44]	@ (80040b0 <global_stdio_init.part.0+0x30>)
 8004084:	4c0b      	ldr	r4, [pc, #44]	@ (80040b4 <global_stdio_init.part.0+0x34>)
 8004086:	4a0c      	ldr	r2, [pc, #48]	@ (80040b8 <global_stdio_init.part.0+0x38>)
 8004088:	601a      	str	r2, [r3, #0]
 800408a:	4620      	mov	r0, r4
 800408c:	2200      	movs	r2, #0
 800408e:	2104      	movs	r1, #4
 8004090:	f7ff ff94 	bl	8003fbc <std>
 8004094:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004098:	2201      	movs	r2, #1
 800409a:	2109      	movs	r1, #9
 800409c:	f7ff ff8e 	bl	8003fbc <std>
 80040a0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80040a4:	2202      	movs	r2, #2
 80040a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80040aa:	2112      	movs	r1, #18
 80040ac:	f7ff bf86 	b.w	8003fbc <std>
 80040b0:	24000298 	.word	0x24000298
 80040b4:	24000160 	.word	0x24000160
 80040b8:	08004029 	.word	0x08004029

080040bc <__sfp_lock_acquire>:
 80040bc:	4801      	ldr	r0, [pc, #4]	@ (80040c4 <__sfp_lock_acquire+0x8>)
 80040be:	f000 b90e 	b.w	80042de <__retarget_lock_acquire_recursive>
 80040c2:	bf00      	nop
 80040c4:	240002a1 	.word	0x240002a1

080040c8 <__sfp_lock_release>:
 80040c8:	4801      	ldr	r0, [pc, #4]	@ (80040d0 <__sfp_lock_release+0x8>)
 80040ca:	f000 b909 	b.w	80042e0 <__retarget_lock_release_recursive>
 80040ce:	bf00      	nop
 80040d0:	240002a1 	.word	0x240002a1

080040d4 <__sinit>:
 80040d4:	b510      	push	{r4, lr}
 80040d6:	4604      	mov	r4, r0
 80040d8:	f7ff fff0 	bl	80040bc <__sfp_lock_acquire>
 80040dc:	6a23      	ldr	r3, [r4, #32]
 80040de:	b11b      	cbz	r3, 80040e8 <__sinit+0x14>
 80040e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80040e4:	f7ff bff0 	b.w	80040c8 <__sfp_lock_release>
 80040e8:	4b04      	ldr	r3, [pc, #16]	@ (80040fc <__sinit+0x28>)
 80040ea:	6223      	str	r3, [r4, #32]
 80040ec:	4b04      	ldr	r3, [pc, #16]	@ (8004100 <__sinit+0x2c>)
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d1f5      	bne.n	80040e0 <__sinit+0xc>
 80040f4:	f7ff ffc4 	bl	8004080 <global_stdio_init.part.0>
 80040f8:	e7f2      	b.n	80040e0 <__sinit+0xc>
 80040fa:	bf00      	nop
 80040fc:	08004041 	.word	0x08004041
 8004100:	24000298 	.word	0x24000298

08004104 <_fwalk_sglue>:
 8004104:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004108:	4607      	mov	r7, r0
 800410a:	4688      	mov	r8, r1
 800410c:	4614      	mov	r4, r2
 800410e:	2600      	movs	r6, #0
 8004110:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004114:	f1b9 0901 	subs.w	r9, r9, #1
 8004118:	d505      	bpl.n	8004126 <_fwalk_sglue+0x22>
 800411a:	6824      	ldr	r4, [r4, #0]
 800411c:	2c00      	cmp	r4, #0
 800411e:	d1f7      	bne.n	8004110 <_fwalk_sglue+0xc>
 8004120:	4630      	mov	r0, r6
 8004122:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004126:	89ab      	ldrh	r3, [r5, #12]
 8004128:	2b01      	cmp	r3, #1
 800412a:	d907      	bls.n	800413c <_fwalk_sglue+0x38>
 800412c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004130:	3301      	adds	r3, #1
 8004132:	d003      	beq.n	800413c <_fwalk_sglue+0x38>
 8004134:	4629      	mov	r1, r5
 8004136:	4638      	mov	r0, r7
 8004138:	47c0      	blx	r8
 800413a:	4306      	orrs	r6, r0
 800413c:	3568      	adds	r5, #104	@ 0x68
 800413e:	e7e9      	b.n	8004114 <_fwalk_sglue+0x10>

08004140 <iprintf>:
 8004140:	b40f      	push	{r0, r1, r2, r3}
 8004142:	b507      	push	{r0, r1, r2, lr}
 8004144:	4906      	ldr	r1, [pc, #24]	@ (8004160 <iprintf+0x20>)
 8004146:	ab04      	add	r3, sp, #16
 8004148:	6808      	ldr	r0, [r1, #0]
 800414a:	f853 2b04 	ldr.w	r2, [r3], #4
 800414e:	6881      	ldr	r1, [r0, #8]
 8004150:	9301      	str	r3, [sp, #4]
 8004152:	f000 f9e9 	bl	8004528 <_vfiprintf_r>
 8004156:	b003      	add	sp, #12
 8004158:	f85d eb04 	ldr.w	lr, [sp], #4
 800415c:	b004      	add	sp, #16
 800415e:	4770      	bx	lr
 8004160:	24000038 	.word	0x24000038

08004164 <__sread>:
 8004164:	b510      	push	{r4, lr}
 8004166:	460c      	mov	r4, r1
 8004168:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800416c:	f000 f868 	bl	8004240 <_read_r>
 8004170:	2800      	cmp	r0, #0
 8004172:	bfab      	itete	ge
 8004174:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8004176:	89a3      	ldrhlt	r3, [r4, #12]
 8004178:	181b      	addge	r3, r3, r0
 800417a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800417e:	bfac      	ite	ge
 8004180:	6563      	strge	r3, [r4, #84]	@ 0x54
 8004182:	81a3      	strhlt	r3, [r4, #12]
 8004184:	bd10      	pop	{r4, pc}

08004186 <__swrite>:
 8004186:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800418a:	461f      	mov	r7, r3
 800418c:	898b      	ldrh	r3, [r1, #12]
 800418e:	05db      	lsls	r3, r3, #23
 8004190:	4605      	mov	r5, r0
 8004192:	460c      	mov	r4, r1
 8004194:	4616      	mov	r6, r2
 8004196:	d505      	bpl.n	80041a4 <__swrite+0x1e>
 8004198:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800419c:	2302      	movs	r3, #2
 800419e:	2200      	movs	r2, #0
 80041a0:	f000 f83c 	bl	800421c <_lseek_r>
 80041a4:	89a3      	ldrh	r3, [r4, #12]
 80041a6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80041aa:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80041ae:	81a3      	strh	r3, [r4, #12]
 80041b0:	4632      	mov	r2, r6
 80041b2:	463b      	mov	r3, r7
 80041b4:	4628      	mov	r0, r5
 80041b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80041ba:	f000 b853 	b.w	8004264 <_write_r>

080041be <__sseek>:
 80041be:	b510      	push	{r4, lr}
 80041c0:	460c      	mov	r4, r1
 80041c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80041c6:	f000 f829 	bl	800421c <_lseek_r>
 80041ca:	1c43      	adds	r3, r0, #1
 80041cc:	89a3      	ldrh	r3, [r4, #12]
 80041ce:	bf15      	itete	ne
 80041d0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80041d2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80041d6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80041da:	81a3      	strheq	r3, [r4, #12]
 80041dc:	bf18      	it	ne
 80041de:	81a3      	strhne	r3, [r4, #12]
 80041e0:	bd10      	pop	{r4, pc}

080041e2 <__sclose>:
 80041e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80041e6:	f000 b809 	b.w	80041fc <_close_r>

080041ea <memset>:
 80041ea:	4402      	add	r2, r0
 80041ec:	4603      	mov	r3, r0
 80041ee:	4293      	cmp	r3, r2
 80041f0:	d100      	bne.n	80041f4 <memset+0xa>
 80041f2:	4770      	bx	lr
 80041f4:	f803 1b01 	strb.w	r1, [r3], #1
 80041f8:	e7f9      	b.n	80041ee <memset+0x4>
	...

080041fc <_close_r>:
 80041fc:	b538      	push	{r3, r4, r5, lr}
 80041fe:	4d06      	ldr	r5, [pc, #24]	@ (8004218 <_close_r+0x1c>)
 8004200:	2300      	movs	r3, #0
 8004202:	4604      	mov	r4, r0
 8004204:	4608      	mov	r0, r1
 8004206:	602b      	str	r3, [r5, #0]
 8004208:	f7fc fc65 	bl	8000ad6 <_close>
 800420c:	1c43      	adds	r3, r0, #1
 800420e:	d102      	bne.n	8004216 <_close_r+0x1a>
 8004210:	682b      	ldr	r3, [r5, #0]
 8004212:	b103      	cbz	r3, 8004216 <_close_r+0x1a>
 8004214:	6023      	str	r3, [r4, #0]
 8004216:	bd38      	pop	{r3, r4, r5, pc}
 8004218:	2400029c 	.word	0x2400029c

0800421c <_lseek_r>:
 800421c:	b538      	push	{r3, r4, r5, lr}
 800421e:	4d07      	ldr	r5, [pc, #28]	@ (800423c <_lseek_r+0x20>)
 8004220:	4604      	mov	r4, r0
 8004222:	4608      	mov	r0, r1
 8004224:	4611      	mov	r1, r2
 8004226:	2200      	movs	r2, #0
 8004228:	602a      	str	r2, [r5, #0]
 800422a:	461a      	mov	r2, r3
 800422c:	f7fc fc7a 	bl	8000b24 <_lseek>
 8004230:	1c43      	adds	r3, r0, #1
 8004232:	d102      	bne.n	800423a <_lseek_r+0x1e>
 8004234:	682b      	ldr	r3, [r5, #0]
 8004236:	b103      	cbz	r3, 800423a <_lseek_r+0x1e>
 8004238:	6023      	str	r3, [r4, #0]
 800423a:	bd38      	pop	{r3, r4, r5, pc}
 800423c:	2400029c 	.word	0x2400029c

08004240 <_read_r>:
 8004240:	b538      	push	{r3, r4, r5, lr}
 8004242:	4d07      	ldr	r5, [pc, #28]	@ (8004260 <_read_r+0x20>)
 8004244:	4604      	mov	r4, r0
 8004246:	4608      	mov	r0, r1
 8004248:	4611      	mov	r1, r2
 800424a:	2200      	movs	r2, #0
 800424c:	602a      	str	r2, [r5, #0]
 800424e:	461a      	mov	r2, r3
 8004250:	f7fc fc08 	bl	8000a64 <_read>
 8004254:	1c43      	adds	r3, r0, #1
 8004256:	d102      	bne.n	800425e <_read_r+0x1e>
 8004258:	682b      	ldr	r3, [r5, #0]
 800425a:	b103      	cbz	r3, 800425e <_read_r+0x1e>
 800425c:	6023      	str	r3, [r4, #0]
 800425e:	bd38      	pop	{r3, r4, r5, pc}
 8004260:	2400029c 	.word	0x2400029c

08004264 <_write_r>:
 8004264:	b538      	push	{r3, r4, r5, lr}
 8004266:	4d07      	ldr	r5, [pc, #28]	@ (8004284 <_write_r+0x20>)
 8004268:	4604      	mov	r4, r0
 800426a:	4608      	mov	r0, r1
 800426c:	4611      	mov	r1, r2
 800426e:	2200      	movs	r2, #0
 8004270:	602a      	str	r2, [r5, #0]
 8004272:	461a      	mov	r2, r3
 8004274:	f7fc fc13 	bl	8000a9e <_write>
 8004278:	1c43      	adds	r3, r0, #1
 800427a:	d102      	bne.n	8004282 <_write_r+0x1e>
 800427c:	682b      	ldr	r3, [r5, #0]
 800427e:	b103      	cbz	r3, 8004282 <_write_r+0x1e>
 8004280:	6023      	str	r3, [r4, #0]
 8004282:	bd38      	pop	{r3, r4, r5, pc}
 8004284:	2400029c 	.word	0x2400029c

08004288 <__errno>:
 8004288:	4b01      	ldr	r3, [pc, #4]	@ (8004290 <__errno+0x8>)
 800428a:	6818      	ldr	r0, [r3, #0]
 800428c:	4770      	bx	lr
 800428e:	bf00      	nop
 8004290:	24000038 	.word	0x24000038

08004294 <__libc_init_array>:
 8004294:	b570      	push	{r4, r5, r6, lr}
 8004296:	4d0d      	ldr	r5, [pc, #52]	@ (80042cc <__libc_init_array+0x38>)
 8004298:	4c0d      	ldr	r4, [pc, #52]	@ (80042d0 <__libc_init_array+0x3c>)
 800429a:	1b64      	subs	r4, r4, r5
 800429c:	10a4      	asrs	r4, r4, #2
 800429e:	2600      	movs	r6, #0
 80042a0:	42a6      	cmp	r6, r4
 80042a2:	d109      	bne.n	80042b8 <__libc_init_array+0x24>
 80042a4:	4d0b      	ldr	r5, [pc, #44]	@ (80042d4 <__libc_init_array+0x40>)
 80042a6:	4c0c      	ldr	r4, [pc, #48]	@ (80042d8 <__libc_init_array+0x44>)
 80042a8:	f000 fdb8 	bl	8004e1c <_init>
 80042ac:	1b64      	subs	r4, r4, r5
 80042ae:	10a4      	asrs	r4, r4, #2
 80042b0:	2600      	movs	r6, #0
 80042b2:	42a6      	cmp	r6, r4
 80042b4:	d105      	bne.n	80042c2 <__libc_init_array+0x2e>
 80042b6:	bd70      	pop	{r4, r5, r6, pc}
 80042b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80042bc:	4798      	blx	r3
 80042be:	3601      	adds	r6, #1
 80042c0:	e7ee      	b.n	80042a0 <__libc_init_array+0xc>
 80042c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80042c6:	4798      	blx	r3
 80042c8:	3601      	adds	r6, #1
 80042ca:	e7f2      	b.n	80042b2 <__libc_init_array+0x1e>
 80042cc:	08004ec0 	.word	0x08004ec0
 80042d0:	08004ec0 	.word	0x08004ec0
 80042d4:	08004ec0 	.word	0x08004ec0
 80042d8:	08004ec4 	.word	0x08004ec4

080042dc <__retarget_lock_init_recursive>:
 80042dc:	4770      	bx	lr

080042de <__retarget_lock_acquire_recursive>:
 80042de:	4770      	bx	lr

080042e0 <__retarget_lock_release_recursive>:
 80042e0:	4770      	bx	lr
	...

080042e4 <_free_r>:
 80042e4:	b538      	push	{r3, r4, r5, lr}
 80042e6:	4605      	mov	r5, r0
 80042e8:	2900      	cmp	r1, #0
 80042ea:	d041      	beq.n	8004370 <_free_r+0x8c>
 80042ec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80042f0:	1f0c      	subs	r4, r1, #4
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	bfb8      	it	lt
 80042f6:	18e4      	addlt	r4, r4, r3
 80042f8:	f000 f8e0 	bl	80044bc <__malloc_lock>
 80042fc:	4a1d      	ldr	r2, [pc, #116]	@ (8004374 <_free_r+0x90>)
 80042fe:	6813      	ldr	r3, [r2, #0]
 8004300:	b933      	cbnz	r3, 8004310 <_free_r+0x2c>
 8004302:	6063      	str	r3, [r4, #4]
 8004304:	6014      	str	r4, [r2, #0]
 8004306:	4628      	mov	r0, r5
 8004308:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800430c:	f000 b8dc 	b.w	80044c8 <__malloc_unlock>
 8004310:	42a3      	cmp	r3, r4
 8004312:	d908      	bls.n	8004326 <_free_r+0x42>
 8004314:	6820      	ldr	r0, [r4, #0]
 8004316:	1821      	adds	r1, r4, r0
 8004318:	428b      	cmp	r3, r1
 800431a:	bf01      	itttt	eq
 800431c:	6819      	ldreq	r1, [r3, #0]
 800431e:	685b      	ldreq	r3, [r3, #4]
 8004320:	1809      	addeq	r1, r1, r0
 8004322:	6021      	streq	r1, [r4, #0]
 8004324:	e7ed      	b.n	8004302 <_free_r+0x1e>
 8004326:	461a      	mov	r2, r3
 8004328:	685b      	ldr	r3, [r3, #4]
 800432a:	b10b      	cbz	r3, 8004330 <_free_r+0x4c>
 800432c:	42a3      	cmp	r3, r4
 800432e:	d9fa      	bls.n	8004326 <_free_r+0x42>
 8004330:	6811      	ldr	r1, [r2, #0]
 8004332:	1850      	adds	r0, r2, r1
 8004334:	42a0      	cmp	r0, r4
 8004336:	d10b      	bne.n	8004350 <_free_r+0x6c>
 8004338:	6820      	ldr	r0, [r4, #0]
 800433a:	4401      	add	r1, r0
 800433c:	1850      	adds	r0, r2, r1
 800433e:	4283      	cmp	r3, r0
 8004340:	6011      	str	r1, [r2, #0]
 8004342:	d1e0      	bne.n	8004306 <_free_r+0x22>
 8004344:	6818      	ldr	r0, [r3, #0]
 8004346:	685b      	ldr	r3, [r3, #4]
 8004348:	6053      	str	r3, [r2, #4]
 800434a:	4408      	add	r0, r1
 800434c:	6010      	str	r0, [r2, #0]
 800434e:	e7da      	b.n	8004306 <_free_r+0x22>
 8004350:	d902      	bls.n	8004358 <_free_r+0x74>
 8004352:	230c      	movs	r3, #12
 8004354:	602b      	str	r3, [r5, #0]
 8004356:	e7d6      	b.n	8004306 <_free_r+0x22>
 8004358:	6820      	ldr	r0, [r4, #0]
 800435a:	1821      	adds	r1, r4, r0
 800435c:	428b      	cmp	r3, r1
 800435e:	bf04      	itt	eq
 8004360:	6819      	ldreq	r1, [r3, #0]
 8004362:	685b      	ldreq	r3, [r3, #4]
 8004364:	6063      	str	r3, [r4, #4]
 8004366:	bf04      	itt	eq
 8004368:	1809      	addeq	r1, r1, r0
 800436a:	6021      	streq	r1, [r4, #0]
 800436c:	6054      	str	r4, [r2, #4]
 800436e:	e7ca      	b.n	8004306 <_free_r+0x22>
 8004370:	bd38      	pop	{r3, r4, r5, pc}
 8004372:	bf00      	nop
 8004374:	240002a8 	.word	0x240002a8

08004378 <sbrk_aligned>:
 8004378:	b570      	push	{r4, r5, r6, lr}
 800437a:	4e0f      	ldr	r6, [pc, #60]	@ (80043b8 <sbrk_aligned+0x40>)
 800437c:	460c      	mov	r4, r1
 800437e:	6831      	ldr	r1, [r6, #0]
 8004380:	4605      	mov	r5, r0
 8004382:	b911      	cbnz	r1, 800438a <sbrk_aligned+0x12>
 8004384:	f000 fcb6 	bl	8004cf4 <_sbrk_r>
 8004388:	6030      	str	r0, [r6, #0]
 800438a:	4621      	mov	r1, r4
 800438c:	4628      	mov	r0, r5
 800438e:	f000 fcb1 	bl	8004cf4 <_sbrk_r>
 8004392:	1c43      	adds	r3, r0, #1
 8004394:	d103      	bne.n	800439e <sbrk_aligned+0x26>
 8004396:	f04f 34ff 	mov.w	r4, #4294967295
 800439a:	4620      	mov	r0, r4
 800439c:	bd70      	pop	{r4, r5, r6, pc}
 800439e:	1cc4      	adds	r4, r0, #3
 80043a0:	f024 0403 	bic.w	r4, r4, #3
 80043a4:	42a0      	cmp	r0, r4
 80043a6:	d0f8      	beq.n	800439a <sbrk_aligned+0x22>
 80043a8:	1a21      	subs	r1, r4, r0
 80043aa:	4628      	mov	r0, r5
 80043ac:	f000 fca2 	bl	8004cf4 <_sbrk_r>
 80043b0:	3001      	adds	r0, #1
 80043b2:	d1f2      	bne.n	800439a <sbrk_aligned+0x22>
 80043b4:	e7ef      	b.n	8004396 <sbrk_aligned+0x1e>
 80043b6:	bf00      	nop
 80043b8:	240002a4 	.word	0x240002a4

080043bc <_malloc_r>:
 80043bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80043c0:	1ccd      	adds	r5, r1, #3
 80043c2:	f025 0503 	bic.w	r5, r5, #3
 80043c6:	3508      	adds	r5, #8
 80043c8:	2d0c      	cmp	r5, #12
 80043ca:	bf38      	it	cc
 80043cc:	250c      	movcc	r5, #12
 80043ce:	2d00      	cmp	r5, #0
 80043d0:	4606      	mov	r6, r0
 80043d2:	db01      	blt.n	80043d8 <_malloc_r+0x1c>
 80043d4:	42a9      	cmp	r1, r5
 80043d6:	d904      	bls.n	80043e2 <_malloc_r+0x26>
 80043d8:	230c      	movs	r3, #12
 80043da:	6033      	str	r3, [r6, #0]
 80043dc:	2000      	movs	r0, #0
 80043de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80043e2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80044b8 <_malloc_r+0xfc>
 80043e6:	f000 f869 	bl	80044bc <__malloc_lock>
 80043ea:	f8d8 3000 	ldr.w	r3, [r8]
 80043ee:	461c      	mov	r4, r3
 80043f0:	bb44      	cbnz	r4, 8004444 <_malloc_r+0x88>
 80043f2:	4629      	mov	r1, r5
 80043f4:	4630      	mov	r0, r6
 80043f6:	f7ff ffbf 	bl	8004378 <sbrk_aligned>
 80043fa:	1c43      	adds	r3, r0, #1
 80043fc:	4604      	mov	r4, r0
 80043fe:	d158      	bne.n	80044b2 <_malloc_r+0xf6>
 8004400:	f8d8 4000 	ldr.w	r4, [r8]
 8004404:	4627      	mov	r7, r4
 8004406:	2f00      	cmp	r7, #0
 8004408:	d143      	bne.n	8004492 <_malloc_r+0xd6>
 800440a:	2c00      	cmp	r4, #0
 800440c:	d04b      	beq.n	80044a6 <_malloc_r+0xea>
 800440e:	6823      	ldr	r3, [r4, #0]
 8004410:	4639      	mov	r1, r7
 8004412:	4630      	mov	r0, r6
 8004414:	eb04 0903 	add.w	r9, r4, r3
 8004418:	f000 fc6c 	bl	8004cf4 <_sbrk_r>
 800441c:	4581      	cmp	r9, r0
 800441e:	d142      	bne.n	80044a6 <_malloc_r+0xea>
 8004420:	6821      	ldr	r1, [r4, #0]
 8004422:	1a6d      	subs	r5, r5, r1
 8004424:	4629      	mov	r1, r5
 8004426:	4630      	mov	r0, r6
 8004428:	f7ff ffa6 	bl	8004378 <sbrk_aligned>
 800442c:	3001      	adds	r0, #1
 800442e:	d03a      	beq.n	80044a6 <_malloc_r+0xea>
 8004430:	6823      	ldr	r3, [r4, #0]
 8004432:	442b      	add	r3, r5
 8004434:	6023      	str	r3, [r4, #0]
 8004436:	f8d8 3000 	ldr.w	r3, [r8]
 800443a:	685a      	ldr	r2, [r3, #4]
 800443c:	bb62      	cbnz	r2, 8004498 <_malloc_r+0xdc>
 800443e:	f8c8 7000 	str.w	r7, [r8]
 8004442:	e00f      	b.n	8004464 <_malloc_r+0xa8>
 8004444:	6822      	ldr	r2, [r4, #0]
 8004446:	1b52      	subs	r2, r2, r5
 8004448:	d420      	bmi.n	800448c <_malloc_r+0xd0>
 800444a:	2a0b      	cmp	r2, #11
 800444c:	d917      	bls.n	800447e <_malloc_r+0xc2>
 800444e:	1961      	adds	r1, r4, r5
 8004450:	42a3      	cmp	r3, r4
 8004452:	6025      	str	r5, [r4, #0]
 8004454:	bf18      	it	ne
 8004456:	6059      	strne	r1, [r3, #4]
 8004458:	6863      	ldr	r3, [r4, #4]
 800445a:	bf08      	it	eq
 800445c:	f8c8 1000 	streq.w	r1, [r8]
 8004460:	5162      	str	r2, [r4, r5]
 8004462:	604b      	str	r3, [r1, #4]
 8004464:	4630      	mov	r0, r6
 8004466:	f000 f82f 	bl	80044c8 <__malloc_unlock>
 800446a:	f104 000b 	add.w	r0, r4, #11
 800446e:	1d23      	adds	r3, r4, #4
 8004470:	f020 0007 	bic.w	r0, r0, #7
 8004474:	1ac2      	subs	r2, r0, r3
 8004476:	bf1c      	itt	ne
 8004478:	1a1b      	subne	r3, r3, r0
 800447a:	50a3      	strne	r3, [r4, r2]
 800447c:	e7af      	b.n	80043de <_malloc_r+0x22>
 800447e:	6862      	ldr	r2, [r4, #4]
 8004480:	42a3      	cmp	r3, r4
 8004482:	bf0c      	ite	eq
 8004484:	f8c8 2000 	streq.w	r2, [r8]
 8004488:	605a      	strne	r2, [r3, #4]
 800448a:	e7eb      	b.n	8004464 <_malloc_r+0xa8>
 800448c:	4623      	mov	r3, r4
 800448e:	6864      	ldr	r4, [r4, #4]
 8004490:	e7ae      	b.n	80043f0 <_malloc_r+0x34>
 8004492:	463c      	mov	r4, r7
 8004494:	687f      	ldr	r7, [r7, #4]
 8004496:	e7b6      	b.n	8004406 <_malloc_r+0x4a>
 8004498:	461a      	mov	r2, r3
 800449a:	685b      	ldr	r3, [r3, #4]
 800449c:	42a3      	cmp	r3, r4
 800449e:	d1fb      	bne.n	8004498 <_malloc_r+0xdc>
 80044a0:	2300      	movs	r3, #0
 80044a2:	6053      	str	r3, [r2, #4]
 80044a4:	e7de      	b.n	8004464 <_malloc_r+0xa8>
 80044a6:	230c      	movs	r3, #12
 80044a8:	6033      	str	r3, [r6, #0]
 80044aa:	4630      	mov	r0, r6
 80044ac:	f000 f80c 	bl	80044c8 <__malloc_unlock>
 80044b0:	e794      	b.n	80043dc <_malloc_r+0x20>
 80044b2:	6005      	str	r5, [r0, #0]
 80044b4:	e7d6      	b.n	8004464 <_malloc_r+0xa8>
 80044b6:	bf00      	nop
 80044b8:	240002a8 	.word	0x240002a8

080044bc <__malloc_lock>:
 80044bc:	4801      	ldr	r0, [pc, #4]	@ (80044c4 <__malloc_lock+0x8>)
 80044be:	f7ff bf0e 	b.w	80042de <__retarget_lock_acquire_recursive>
 80044c2:	bf00      	nop
 80044c4:	240002a0 	.word	0x240002a0

080044c8 <__malloc_unlock>:
 80044c8:	4801      	ldr	r0, [pc, #4]	@ (80044d0 <__malloc_unlock+0x8>)
 80044ca:	f7ff bf09 	b.w	80042e0 <__retarget_lock_release_recursive>
 80044ce:	bf00      	nop
 80044d0:	240002a0 	.word	0x240002a0

080044d4 <__sfputc_r>:
 80044d4:	6893      	ldr	r3, [r2, #8]
 80044d6:	3b01      	subs	r3, #1
 80044d8:	2b00      	cmp	r3, #0
 80044da:	b410      	push	{r4}
 80044dc:	6093      	str	r3, [r2, #8]
 80044de:	da08      	bge.n	80044f2 <__sfputc_r+0x1e>
 80044e0:	6994      	ldr	r4, [r2, #24]
 80044e2:	42a3      	cmp	r3, r4
 80044e4:	db01      	blt.n	80044ea <__sfputc_r+0x16>
 80044e6:	290a      	cmp	r1, #10
 80044e8:	d103      	bne.n	80044f2 <__sfputc_r+0x1e>
 80044ea:	f85d 4b04 	ldr.w	r4, [sp], #4
 80044ee:	f000 bb6d 	b.w	8004bcc <__swbuf_r>
 80044f2:	6813      	ldr	r3, [r2, #0]
 80044f4:	1c58      	adds	r0, r3, #1
 80044f6:	6010      	str	r0, [r2, #0]
 80044f8:	7019      	strb	r1, [r3, #0]
 80044fa:	4608      	mov	r0, r1
 80044fc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004500:	4770      	bx	lr

08004502 <__sfputs_r>:
 8004502:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004504:	4606      	mov	r6, r0
 8004506:	460f      	mov	r7, r1
 8004508:	4614      	mov	r4, r2
 800450a:	18d5      	adds	r5, r2, r3
 800450c:	42ac      	cmp	r4, r5
 800450e:	d101      	bne.n	8004514 <__sfputs_r+0x12>
 8004510:	2000      	movs	r0, #0
 8004512:	e007      	b.n	8004524 <__sfputs_r+0x22>
 8004514:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004518:	463a      	mov	r2, r7
 800451a:	4630      	mov	r0, r6
 800451c:	f7ff ffda 	bl	80044d4 <__sfputc_r>
 8004520:	1c43      	adds	r3, r0, #1
 8004522:	d1f3      	bne.n	800450c <__sfputs_r+0xa>
 8004524:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004528 <_vfiprintf_r>:
 8004528:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800452c:	460d      	mov	r5, r1
 800452e:	b09d      	sub	sp, #116	@ 0x74
 8004530:	4614      	mov	r4, r2
 8004532:	4698      	mov	r8, r3
 8004534:	4606      	mov	r6, r0
 8004536:	b118      	cbz	r0, 8004540 <_vfiprintf_r+0x18>
 8004538:	6a03      	ldr	r3, [r0, #32]
 800453a:	b90b      	cbnz	r3, 8004540 <_vfiprintf_r+0x18>
 800453c:	f7ff fdca 	bl	80040d4 <__sinit>
 8004540:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004542:	07d9      	lsls	r1, r3, #31
 8004544:	d405      	bmi.n	8004552 <_vfiprintf_r+0x2a>
 8004546:	89ab      	ldrh	r3, [r5, #12]
 8004548:	059a      	lsls	r2, r3, #22
 800454a:	d402      	bmi.n	8004552 <_vfiprintf_r+0x2a>
 800454c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800454e:	f7ff fec6 	bl	80042de <__retarget_lock_acquire_recursive>
 8004552:	89ab      	ldrh	r3, [r5, #12]
 8004554:	071b      	lsls	r3, r3, #28
 8004556:	d501      	bpl.n	800455c <_vfiprintf_r+0x34>
 8004558:	692b      	ldr	r3, [r5, #16]
 800455a:	b99b      	cbnz	r3, 8004584 <_vfiprintf_r+0x5c>
 800455c:	4629      	mov	r1, r5
 800455e:	4630      	mov	r0, r6
 8004560:	f000 fb72 	bl	8004c48 <__swsetup_r>
 8004564:	b170      	cbz	r0, 8004584 <_vfiprintf_r+0x5c>
 8004566:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004568:	07dc      	lsls	r4, r3, #31
 800456a:	d504      	bpl.n	8004576 <_vfiprintf_r+0x4e>
 800456c:	f04f 30ff 	mov.w	r0, #4294967295
 8004570:	b01d      	add	sp, #116	@ 0x74
 8004572:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004576:	89ab      	ldrh	r3, [r5, #12]
 8004578:	0598      	lsls	r0, r3, #22
 800457a:	d4f7      	bmi.n	800456c <_vfiprintf_r+0x44>
 800457c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800457e:	f7ff feaf 	bl	80042e0 <__retarget_lock_release_recursive>
 8004582:	e7f3      	b.n	800456c <_vfiprintf_r+0x44>
 8004584:	2300      	movs	r3, #0
 8004586:	9309      	str	r3, [sp, #36]	@ 0x24
 8004588:	2320      	movs	r3, #32
 800458a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800458e:	f8cd 800c 	str.w	r8, [sp, #12]
 8004592:	2330      	movs	r3, #48	@ 0x30
 8004594:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8004744 <_vfiprintf_r+0x21c>
 8004598:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800459c:	f04f 0901 	mov.w	r9, #1
 80045a0:	4623      	mov	r3, r4
 80045a2:	469a      	mov	sl, r3
 80045a4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80045a8:	b10a      	cbz	r2, 80045ae <_vfiprintf_r+0x86>
 80045aa:	2a25      	cmp	r2, #37	@ 0x25
 80045ac:	d1f9      	bne.n	80045a2 <_vfiprintf_r+0x7a>
 80045ae:	ebba 0b04 	subs.w	fp, sl, r4
 80045b2:	d00b      	beq.n	80045cc <_vfiprintf_r+0xa4>
 80045b4:	465b      	mov	r3, fp
 80045b6:	4622      	mov	r2, r4
 80045b8:	4629      	mov	r1, r5
 80045ba:	4630      	mov	r0, r6
 80045bc:	f7ff ffa1 	bl	8004502 <__sfputs_r>
 80045c0:	3001      	adds	r0, #1
 80045c2:	f000 80a7 	beq.w	8004714 <_vfiprintf_r+0x1ec>
 80045c6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80045c8:	445a      	add	r2, fp
 80045ca:	9209      	str	r2, [sp, #36]	@ 0x24
 80045cc:	f89a 3000 	ldrb.w	r3, [sl]
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	f000 809f 	beq.w	8004714 <_vfiprintf_r+0x1ec>
 80045d6:	2300      	movs	r3, #0
 80045d8:	f04f 32ff 	mov.w	r2, #4294967295
 80045dc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80045e0:	f10a 0a01 	add.w	sl, sl, #1
 80045e4:	9304      	str	r3, [sp, #16]
 80045e6:	9307      	str	r3, [sp, #28]
 80045e8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80045ec:	931a      	str	r3, [sp, #104]	@ 0x68
 80045ee:	4654      	mov	r4, sl
 80045f0:	2205      	movs	r2, #5
 80045f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80045f6:	4853      	ldr	r0, [pc, #332]	@ (8004744 <_vfiprintf_r+0x21c>)
 80045f8:	f7fb fe72 	bl	80002e0 <memchr>
 80045fc:	9a04      	ldr	r2, [sp, #16]
 80045fe:	b9d8      	cbnz	r0, 8004638 <_vfiprintf_r+0x110>
 8004600:	06d1      	lsls	r1, r2, #27
 8004602:	bf44      	itt	mi
 8004604:	2320      	movmi	r3, #32
 8004606:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800460a:	0713      	lsls	r3, r2, #28
 800460c:	bf44      	itt	mi
 800460e:	232b      	movmi	r3, #43	@ 0x2b
 8004610:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004614:	f89a 3000 	ldrb.w	r3, [sl]
 8004618:	2b2a      	cmp	r3, #42	@ 0x2a
 800461a:	d015      	beq.n	8004648 <_vfiprintf_r+0x120>
 800461c:	9a07      	ldr	r2, [sp, #28]
 800461e:	4654      	mov	r4, sl
 8004620:	2000      	movs	r0, #0
 8004622:	f04f 0c0a 	mov.w	ip, #10
 8004626:	4621      	mov	r1, r4
 8004628:	f811 3b01 	ldrb.w	r3, [r1], #1
 800462c:	3b30      	subs	r3, #48	@ 0x30
 800462e:	2b09      	cmp	r3, #9
 8004630:	d94b      	bls.n	80046ca <_vfiprintf_r+0x1a2>
 8004632:	b1b0      	cbz	r0, 8004662 <_vfiprintf_r+0x13a>
 8004634:	9207      	str	r2, [sp, #28]
 8004636:	e014      	b.n	8004662 <_vfiprintf_r+0x13a>
 8004638:	eba0 0308 	sub.w	r3, r0, r8
 800463c:	fa09 f303 	lsl.w	r3, r9, r3
 8004640:	4313      	orrs	r3, r2
 8004642:	9304      	str	r3, [sp, #16]
 8004644:	46a2      	mov	sl, r4
 8004646:	e7d2      	b.n	80045ee <_vfiprintf_r+0xc6>
 8004648:	9b03      	ldr	r3, [sp, #12]
 800464a:	1d19      	adds	r1, r3, #4
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	9103      	str	r1, [sp, #12]
 8004650:	2b00      	cmp	r3, #0
 8004652:	bfbb      	ittet	lt
 8004654:	425b      	neglt	r3, r3
 8004656:	f042 0202 	orrlt.w	r2, r2, #2
 800465a:	9307      	strge	r3, [sp, #28]
 800465c:	9307      	strlt	r3, [sp, #28]
 800465e:	bfb8      	it	lt
 8004660:	9204      	strlt	r2, [sp, #16]
 8004662:	7823      	ldrb	r3, [r4, #0]
 8004664:	2b2e      	cmp	r3, #46	@ 0x2e
 8004666:	d10a      	bne.n	800467e <_vfiprintf_r+0x156>
 8004668:	7863      	ldrb	r3, [r4, #1]
 800466a:	2b2a      	cmp	r3, #42	@ 0x2a
 800466c:	d132      	bne.n	80046d4 <_vfiprintf_r+0x1ac>
 800466e:	9b03      	ldr	r3, [sp, #12]
 8004670:	1d1a      	adds	r2, r3, #4
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	9203      	str	r2, [sp, #12]
 8004676:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800467a:	3402      	adds	r4, #2
 800467c:	9305      	str	r3, [sp, #20]
 800467e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8004754 <_vfiprintf_r+0x22c>
 8004682:	7821      	ldrb	r1, [r4, #0]
 8004684:	2203      	movs	r2, #3
 8004686:	4650      	mov	r0, sl
 8004688:	f7fb fe2a 	bl	80002e0 <memchr>
 800468c:	b138      	cbz	r0, 800469e <_vfiprintf_r+0x176>
 800468e:	9b04      	ldr	r3, [sp, #16]
 8004690:	eba0 000a 	sub.w	r0, r0, sl
 8004694:	2240      	movs	r2, #64	@ 0x40
 8004696:	4082      	lsls	r2, r0
 8004698:	4313      	orrs	r3, r2
 800469a:	3401      	adds	r4, #1
 800469c:	9304      	str	r3, [sp, #16]
 800469e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80046a2:	4829      	ldr	r0, [pc, #164]	@ (8004748 <_vfiprintf_r+0x220>)
 80046a4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80046a8:	2206      	movs	r2, #6
 80046aa:	f7fb fe19 	bl	80002e0 <memchr>
 80046ae:	2800      	cmp	r0, #0
 80046b0:	d03f      	beq.n	8004732 <_vfiprintf_r+0x20a>
 80046b2:	4b26      	ldr	r3, [pc, #152]	@ (800474c <_vfiprintf_r+0x224>)
 80046b4:	bb1b      	cbnz	r3, 80046fe <_vfiprintf_r+0x1d6>
 80046b6:	9b03      	ldr	r3, [sp, #12]
 80046b8:	3307      	adds	r3, #7
 80046ba:	f023 0307 	bic.w	r3, r3, #7
 80046be:	3308      	adds	r3, #8
 80046c0:	9303      	str	r3, [sp, #12]
 80046c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80046c4:	443b      	add	r3, r7
 80046c6:	9309      	str	r3, [sp, #36]	@ 0x24
 80046c8:	e76a      	b.n	80045a0 <_vfiprintf_r+0x78>
 80046ca:	fb0c 3202 	mla	r2, ip, r2, r3
 80046ce:	460c      	mov	r4, r1
 80046d0:	2001      	movs	r0, #1
 80046d2:	e7a8      	b.n	8004626 <_vfiprintf_r+0xfe>
 80046d4:	2300      	movs	r3, #0
 80046d6:	3401      	adds	r4, #1
 80046d8:	9305      	str	r3, [sp, #20]
 80046da:	4619      	mov	r1, r3
 80046dc:	f04f 0c0a 	mov.w	ip, #10
 80046e0:	4620      	mov	r0, r4
 80046e2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80046e6:	3a30      	subs	r2, #48	@ 0x30
 80046e8:	2a09      	cmp	r2, #9
 80046ea:	d903      	bls.n	80046f4 <_vfiprintf_r+0x1cc>
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d0c6      	beq.n	800467e <_vfiprintf_r+0x156>
 80046f0:	9105      	str	r1, [sp, #20]
 80046f2:	e7c4      	b.n	800467e <_vfiprintf_r+0x156>
 80046f4:	fb0c 2101 	mla	r1, ip, r1, r2
 80046f8:	4604      	mov	r4, r0
 80046fa:	2301      	movs	r3, #1
 80046fc:	e7f0      	b.n	80046e0 <_vfiprintf_r+0x1b8>
 80046fe:	ab03      	add	r3, sp, #12
 8004700:	9300      	str	r3, [sp, #0]
 8004702:	462a      	mov	r2, r5
 8004704:	4b12      	ldr	r3, [pc, #72]	@ (8004750 <_vfiprintf_r+0x228>)
 8004706:	a904      	add	r1, sp, #16
 8004708:	4630      	mov	r0, r6
 800470a:	f3af 8000 	nop.w
 800470e:	4607      	mov	r7, r0
 8004710:	1c78      	adds	r0, r7, #1
 8004712:	d1d6      	bne.n	80046c2 <_vfiprintf_r+0x19a>
 8004714:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004716:	07d9      	lsls	r1, r3, #31
 8004718:	d405      	bmi.n	8004726 <_vfiprintf_r+0x1fe>
 800471a:	89ab      	ldrh	r3, [r5, #12]
 800471c:	059a      	lsls	r2, r3, #22
 800471e:	d402      	bmi.n	8004726 <_vfiprintf_r+0x1fe>
 8004720:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004722:	f7ff fddd 	bl	80042e0 <__retarget_lock_release_recursive>
 8004726:	89ab      	ldrh	r3, [r5, #12]
 8004728:	065b      	lsls	r3, r3, #25
 800472a:	f53f af1f 	bmi.w	800456c <_vfiprintf_r+0x44>
 800472e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004730:	e71e      	b.n	8004570 <_vfiprintf_r+0x48>
 8004732:	ab03      	add	r3, sp, #12
 8004734:	9300      	str	r3, [sp, #0]
 8004736:	462a      	mov	r2, r5
 8004738:	4b05      	ldr	r3, [pc, #20]	@ (8004750 <_vfiprintf_r+0x228>)
 800473a:	a904      	add	r1, sp, #16
 800473c:	4630      	mov	r0, r6
 800473e:	f000 f879 	bl	8004834 <_printf_i>
 8004742:	e7e4      	b.n	800470e <_vfiprintf_r+0x1e6>
 8004744:	08004e84 	.word	0x08004e84
 8004748:	08004e8e 	.word	0x08004e8e
 800474c:	00000000 	.word	0x00000000
 8004750:	08004503 	.word	0x08004503
 8004754:	08004e8a 	.word	0x08004e8a

08004758 <_printf_common>:
 8004758:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800475c:	4616      	mov	r6, r2
 800475e:	4698      	mov	r8, r3
 8004760:	688a      	ldr	r2, [r1, #8]
 8004762:	690b      	ldr	r3, [r1, #16]
 8004764:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004768:	4293      	cmp	r3, r2
 800476a:	bfb8      	it	lt
 800476c:	4613      	movlt	r3, r2
 800476e:	6033      	str	r3, [r6, #0]
 8004770:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004774:	4607      	mov	r7, r0
 8004776:	460c      	mov	r4, r1
 8004778:	b10a      	cbz	r2, 800477e <_printf_common+0x26>
 800477a:	3301      	adds	r3, #1
 800477c:	6033      	str	r3, [r6, #0]
 800477e:	6823      	ldr	r3, [r4, #0]
 8004780:	0699      	lsls	r1, r3, #26
 8004782:	bf42      	ittt	mi
 8004784:	6833      	ldrmi	r3, [r6, #0]
 8004786:	3302      	addmi	r3, #2
 8004788:	6033      	strmi	r3, [r6, #0]
 800478a:	6825      	ldr	r5, [r4, #0]
 800478c:	f015 0506 	ands.w	r5, r5, #6
 8004790:	d106      	bne.n	80047a0 <_printf_common+0x48>
 8004792:	f104 0a19 	add.w	sl, r4, #25
 8004796:	68e3      	ldr	r3, [r4, #12]
 8004798:	6832      	ldr	r2, [r6, #0]
 800479a:	1a9b      	subs	r3, r3, r2
 800479c:	42ab      	cmp	r3, r5
 800479e:	dc26      	bgt.n	80047ee <_printf_common+0x96>
 80047a0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80047a4:	6822      	ldr	r2, [r4, #0]
 80047a6:	3b00      	subs	r3, #0
 80047a8:	bf18      	it	ne
 80047aa:	2301      	movne	r3, #1
 80047ac:	0692      	lsls	r2, r2, #26
 80047ae:	d42b      	bmi.n	8004808 <_printf_common+0xb0>
 80047b0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80047b4:	4641      	mov	r1, r8
 80047b6:	4638      	mov	r0, r7
 80047b8:	47c8      	blx	r9
 80047ba:	3001      	adds	r0, #1
 80047bc:	d01e      	beq.n	80047fc <_printf_common+0xa4>
 80047be:	6823      	ldr	r3, [r4, #0]
 80047c0:	6922      	ldr	r2, [r4, #16]
 80047c2:	f003 0306 	and.w	r3, r3, #6
 80047c6:	2b04      	cmp	r3, #4
 80047c8:	bf02      	ittt	eq
 80047ca:	68e5      	ldreq	r5, [r4, #12]
 80047cc:	6833      	ldreq	r3, [r6, #0]
 80047ce:	1aed      	subeq	r5, r5, r3
 80047d0:	68a3      	ldr	r3, [r4, #8]
 80047d2:	bf0c      	ite	eq
 80047d4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80047d8:	2500      	movne	r5, #0
 80047da:	4293      	cmp	r3, r2
 80047dc:	bfc4      	itt	gt
 80047de:	1a9b      	subgt	r3, r3, r2
 80047e0:	18ed      	addgt	r5, r5, r3
 80047e2:	2600      	movs	r6, #0
 80047e4:	341a      	adds	r4, #26
 80047e6:	42b5      	cmp	r5, r6
 80047e8:	d11a      	bne.n	8004820 <_printf_common+0xc8>
 80047ea:	2000      	movs	r0, #0
 80047ec:	e008      	b.n	8004800 <_printf_common+0xa8>
 80047ee:	2301      	movs	r3, #1
 80047f0:	4652      	mov	r2, sl
 80047f2:	4641      	mov	r1, r8
 80047f4:	4638      	mov	r0, r7
 80047f6:	47c8      	blx	r9
 80047f8:	3001      	adds	r0, #1
 80047fa:	d103      	bne.n	8004804 <_printf_common+0xac>
 80047fc:	f04f 30ff 	mov.w	r0, #4294967295
 8004800:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004804:	3501      	adds	r5, #1
 8004806:	e7c6      	b.n	8004796 <_printf_common+0x3e>
 8004808:	18e1      	adds	r1, r4, r3
 800480a:	1c5a      	adds	r2, r3, #1
 800480c:	2030      	movs	r0, #48	@ 0x30
 800480e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004812:	4422      	add	r2, r4
 8004814:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004818:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800481c:	3302      	adds	r3, #2
 800481e:	e7c7      	b.n	80047b0 <_printf_common+0x58>
 8004820:	2301      	movs	r3, #1
 8004822:	4622      	mov	r2, r4
 8004824:	4641      	mov	r1, r8
 8004826:	4638      	mov	r0, r7
 8004828:	47c8      	blx	r9
 800482a:	3001      	adds	r0, #1
 800482c:	d0e6      	beq.n	80047fc <_printf_common+0xa4>
 800482e:	3601      	adds	r6, #1
 8004830:	e7d9      	b.n	80047e6 <_printf_common+0x8e>
	...

08004834 <_printf_i>:
 8004834:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004838:	7e0f      	ldrb	r7, [r1, #24]
 800483a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800483c:	2f78      	cmp	r7, #120	@ 0x78
 800483e:	4691      	mov	r9, r2
 8004840:	4680      	mov	r8, r0
 8004842:	460c      	mov	r4, r1
 8004844:	469a      	mov	sl, r3
 8004846:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800484a:	d807      	bhi.n	800485c <_printf_i+0x28>
 800484c:	2f62      	cmp	r7, #98	@ 0x62
 800484e:	d80a      	bhi.n	8004866 <_printf_i+0x32>
 8004850:	2f00      	cmp	r7, #0
 8004852:	f000 80d2 	beq.w	80049fa <_printf_i+0x1c6>
 8004856:	2f58      	cmp	r7, #88	@ 0x58
 8004858:	f000 80b9 	beq.w	80049ce <_printf_i+0x19a>
 800485c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004860:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004864:	e03a      	b.n	80048dc <_printf_i+0xa8>
 8004866:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800486a:	2b15      	cmp	r3, #21
 800486c:	d8f6      	bhi.n	800485c <_printf_i+0x28>
 800486e:	a101      	add	r1, pc, #4	@ (adr r1, 8004874 <_printf_i+0x40>)
 8004870:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004874:	080048cd 	.word	0x080048cd
 8004878:	080048e1 	.word	0x080048e1
 800487c:	0800485d 	.word	0x0800485d
 8004880:	0800485d 	.word	0x0800485d
 8004884:	0800485d 	.word	0x0800485d
 8004888:	0800485d 	.word	0x0800485d
 800488c:	080048e1 	.word	0x080048e1
 8004890:	0800485d 	.word	0x0800485d
 8004894:	0800485d 	.word	0x0800485d
 8004898:	0800485d 	.word	0x0800485d
 800489c:	0800485d 	.word	0x0800485d
 80048a0:	080049e1 	.word	0x080049e1
 80048a4:	0800490b 	.word	0x0800490b
 80048a8:	0800499b 	.word	0x0800499b
 80048ac:	0800485d 	.word	0x0800485d
 80048b0:	0800485d 	.word	0x0800485d
 80048b4:	08004a03 	.word	0x08004a03
 80048b8:	0800485d 	.word	0x0800485d
 80048bc:	0800490b 	.word	0x0800490b
 80048c0:	0800485d 	.word	0x0800485d
 80048c4:	0800485d 	.word	0x0800485d
 80048c8:	080049a3 	.word	0x080049a3
 80048cc:	6833      	ldr	r3, [r6, #0]
 80048ce:	1d1a      	adds	r2, r3, #4
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	6032      	str	r2, [r6, #0]
 80048d4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80048d8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80048dc:	2301      	movs	r3, #1
 80048de:	e09d      	b.n	8004a1c <_printf_i+0x1e8>
 80048e0:	6833      	ldr	r3, [r6, #0]
 80048e2:	6820      	ldr	r0, [r4, #0]
 80048e4:	1d19      	adds	r1, r3, #4
 80048e6:	6031      	str	r1, [r6, #0]
 80048e8:	0606      	lsls	r6, r0, #24
 80048ea:	d501      	bpl.n	80048f0 <_printf_i+0xbc>
 80048ec:	681d      	ldr	r5, [r3, #0]
 80048ee:	e003      	b.n	80048f8 <_printf_i+0xc4>
 80048f0:	0645      	lsls	r5, r0, #25
 80048f2:	d5fb      	bpl.n	80048ec <_printf_i+0xb8>
 80048f4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80048f8:	2d00      	cmp	r5, #0
 80048fa:	da03      	bge.n	8004904 <_printf_i+0xd0>
 80048fc:	232d      	movs	r3, #45	@ 0x2d
 80048fe:	426d      	negs	r5, r5
 8004900:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004904:	4859      	ldr	r0, [pc, #356]	@ (8004a6c <_printf_i+0x238>)
 8004906:	230a      	movs	r3, #10
 8004908:	e011      	b.n	800492e <_printf_i+0xfa>
 800490a:	6821      	ldr	r1, [r4, #0]
 800490c:	6833      	ldr	r3, [r6, #0]
 800490e:	0608      	lsls	r0, r1, #24
 8004910:	f853 5b04 	ldr.w	r5, [r3], #4
 8004914:	d402      	bmi.n	800491c <_printf_i+0xe8>
 8004916:	0649      	lsls	r1, r1, #25
 8004918:	bf48      	it	mi
 800491a:	b2ad      	uxthmi	r5, r5
 800491c:	2f6f      	cmp	r7, #111	@ 0x6f
 800491e:	4853      	ldr	r0, [pc, #332]	@ (8004a6c <_printf_i+0x238>)
 8004920:	6033      	str	r3, [r6, #0]
 8004922:	bf14      	ite	ne
 8004924:	230a      	movne	r3, #10
 8004926:	2308      	moveq	r3, #8
 8004928:	2100      	movs	r1, #0
 800492a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800492e:	6866      	ldr	r6, [r4, #4]
 8004930:	60a6      	str	r6, [r4, #8]
 8004932:	2e00      	cmp	r6, #0
 8004934:	bfa2      	ittt	ge
 8004936:	6821      	ldrge	r1, [r4, #0]
 8004938:	f021 0104 	bicge.w	r1, r1, #4
 800493c:	6021      	strge	r1, [r4, #0]
 800493e:	b90d      	cbnz	r5, 8004944 <_printf_i+0x110>
 8004940:	2e00      	cmp	r6, #0
 8004942:	d04b      	beq.n	80049dc <_printf_i+0x1a8>
 8004944:	4616      	mov	r6, r2
 8004946:	fbb5 f1f3 	udiv	r1, r5, r3
 800494a:	fb03 5711 	mls	r7, r3, r1, r5
 800494e:	5dc7      	ldrb	r7, [r0, r7]
 8004950:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004954:	462f      	mov	r7, r5
 8004956:	42bb      	cmp	r3, r7
 8004958:	460d      	mov	r5, r1
 800495a:	d9f4      	bls.n	8004946 <_printf_i+0x112>
 800495c:	2b08      	cmp	r3, #8
 800495e:	d10b      	bne.n	8004978 <_printf_i+0x144>
 8004960:	6823      	ldr	r3, [r4, #0]
 8004962:	07df      	lsls	r7, r3, #31
 8004964:	d508      	bpl.n	8004978 <_printf_i+0x144>
 8004966:	6923      	ldr	r3, [r4, #16]
 8004968:	6861      	ldr	r1, [r4, #4]
 800496a:	4299      	cmp	r1, r3
 800496c:	bfde      	ittt	le
 800496e:	2330      	movle	r3, #48	@ 0x30
 8004970:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004974:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004978:	1b92      	subs	r2, r2, r6
 800497a:	6122      	str	r2, [r4, #16]
 800497c:	f8cd a000 	str.w	sl, [sp]
 8004980:	464b      	mov	r3, r9
 8004982:	aa03      	add	r2, sp, #12
 8004984:	4621      	mov	r1, r4
 8004986:	4640      	mov	r0, r8
 8004988:	f7ff fee6 	bl	8004758 <_printf_common>
 800498c:	3001      	adds	r0, #1
 800498e:	d14a      	bne.n	8004a26 <_printf_i+0x1f2>
 8004990:	f04f 30ff 	mov.w	r0, #4294967295
 8004994:	b004      	add	sp, #16
 8004996:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800499a:	6823      	ldr	r3, [r4, #0]
 800499c:	f043 0320 	orr.w	r3, r3, #32
 80049a0:	6023      	str	r3, [r4, #0]
 80049a2:	4833      	ldr	r0, [pc, #204]	@ (8004a70 <_printf_i+0x23c>)
 80049a4:	2778      	movs	r7, #120	@ 0x78
 80049a6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80049aa:	6823      	ldr	r3, [r4, #0]
 80049ac:	6831      	ldr	r1, [r6, #0]
 80049ae:	061f      	lsls	r7, r3, #24
 80049b0:	f851 5b04 	ldr.w	r5, [r1], #4
 80049b4:	d402      	bmi.n	80049bc <_printf_i+0x188>
 80049b6:	065f      	lsls	r7, r3, #25
 80049b8:	bf48      	it	mi
 80049ba:	b2ad      	uxthmi	r5, r5
 80049bc:	6031      	str	r1, [r6, #0]
 80049be:	07d9      	lsls	r1, r3, #31
 80049c0:	bf44      	itt	mi
 80049c2:	f043 0320 	orrmi.w	r3, r3, #32
 80049c6:	6023      	strmi	r3, [r4, #0]
 80049c8:	b11d      	cbz	r5, 80049d2 <_printf_i+0x19e>
 80049ca:	2310      	movs	r3, #16
 80049cc:	e7ac      	b.n	8004928 <_printf_i+0xf4>
 80049ce:	4827      	ldr	r0, [pc, #156]	@ (8004a6c <_printf_i+0x238>)
 80049d0:	e7e9      	b.n	80049a6 <_printf_i+0x172>
 80049d2:	6823      	ldr	r3, [r4, #0]
 80049d4:	f023 0320 	bic.w	r3, r3, #32
 80049d8:	6023      	str	r3, [r4, #0]
 80049da:	e7f6      	b.n	80049ca <_printf_i+0x196>
 80049dc:	4616      	mov	r6, r2
 80049de:	e7bd      	b.n	800495c <_printf_i+0x128>
 80049e0:	6833      	ldr	r3, [r6, #0]
 80049e2:	6825      	ldr	r5, [r4, #0]
 80049e4:	6961      	ldr	r1, [r4, #20]
 80049e6:	1d18      	adds	r0, r3, #4
 80049e8:	6030      	str	r0, [r6, #0]
 80049ea:	062e      	lsls	r6, r5, #24
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	d501      	bpl.n	80049f4 <_printf_i+0x1c0>
 80049f0:	6019      	str	r1, [r3, #0]
 80049f2:	e002      	b.n	80049fa <_printf_i+0x1c6>
 80049f4:	0668      	lsls	r0, r5, #25
 80049f6:	d5fb      	bpl.n	80049f0 <_printf_i+0x1bc>
 80049f8:	8019      	strh	r1, [r3, #0]
 80049fa:	2300      	movs	r3, #0
 80049fc:	6123      	str	r3, [r4, #16]
 80049fe:	4616      	mov	r6, r2
 8004a00:	e7bc      	b.n	800497c <_printf_i+0x148>
 8004a02:	6833      	ldr	r3, [r6, #0]
 8004a04:	1d1a      	adds	r2, r3, #4
 8004a06:	6032      	str	r2, [r6, #0]
 8004a08:	681e      	ldr	r6, [r3, #0]
 8004a0a:	6862      	ldr	r2, [r4, #4]
 8004a0c:	2100      	movs	r1, #0
 8004a0e:	4630      	mov	r0, r6
 8004a10:	f7fb fc66 	bl	80002e0 <memchr>
 8004a14:	b108      	cbz	r0, 8004a1a <_printf_i+0x1e6>
 8004a16:	1b80      	subs	r0, r0, r6
 8004a18:	6060      	str	r0, [r4, #4]
 8004a1a:	6863      	ldr	r3, [r4, #4]
 8004a1c:	6123      	str	r3, [r4, #16]
 8004a1e:	2300      	movs	r3, #0
 8004a20:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004a24:	e7aa      	b.n	800497c <_printf_i+0x148>
 8004a26:	6923      	ldr	r3, [r4, #16]
 8004a28:	4632      	mov	r2, r6
 8004a2a:	4649      	mov	r1, r9
 8004a2c:	4640      	mov	r0, r8
 8004a2e:	47d0      	blx	sl
 8004a30:	3001      	adds	r0, #1
 8004a32:	d0ad      	beq.n	8004990 <_printf_i+0x15c>
 8004a34:	6823      	ldr	r3, [r4, #0]
 8004a36:	079b      	lsls	r3, r3, #30
 8004a38:	d413      	bmi.n	8004a62 <_printf_i+0x22e>
 8004a3a:	68e0      	ldr	r0, [r4, #12]
 8004a3c:	9b03      	ldr	r3, [sp, #12]
 8004a3e:	4298      	cmp	r0, r3
 8004a40:	bfb8      	it	lt
 8004a42:	4618      	movlt	r0, r3
 8004a44:	e7a6      	b.n	8004994 <_printf_i+0x160>
 8004a46:	2301      	movs	r3, #1
 8004a48:	4632      	mov	r2, r6
 8004a4a:	4649      	mov	r1, r9
 8004a4c:	4640      	mov	r0, r8
 8004a4e:	47d0      	blx	sl
 8004a50:	3001      	adds	r0, #1
 8004a52:	d09d      	beq.n	8004990 <_printf_i+0x15c>
 8004a54:	3501      	adds	r5, #1
 8004a56:	68e3      	ldr	r3, [r4, #12]
 8004a58:	9903      	ldr	r1, [sp, #12]
 8004a5a:	1a5b      	subs	r3, r3, r1
 8004a5c:	42ab      	cmp	r3, r5
 8004a5e:	dcf2      	bgt.n	8004a46 <_printf_i+0x212>
 8004a60:	e7eb      	b.n	8004a3a <_printf_i+0x206>
 8004a62:	2500      	movs	r5, #0
 8004a64:	f104 0619 	add.w	r6, r4, #25
 8004a68:	e7f5      	b.n	8004a56 <_printf_i+0x222>
 8004a6a:	bf00      	nop
 8004a6c:	08004e95 	.word	0x08004e95
 8004a70:	08004ea6 	.word	0x08004ea6

08004a74 <__sflush_r>:
 8004a74:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004a78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004a7c:	0716      	lsls	r6, r2, #28
 8004a7e:	4605      	mov	r5, r0
 8004a80:	460c      	mov	r4, r1
 8004a82:	d454      	bmi.n	8004b2e <__sflush_r+0xba>
 8004a84:	684b      	ldr	r3, [r1, #4]
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	dc02      	bgt.n	8004a90 <__sflush_r+0x1c>
 8004a8a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	dd48      	ble.n	8004b22 <__sflush_r+0xae>
 8004a90:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004a92:	2e00      	cmp	r6, #0
 8004a94:	d045      	beq.n	8004b22 <__sflush_r+0xae>
 8004a96:	2300      	movs	r3, #0
 8004a98:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8004a9c:	682f      	ldr	r7, [r5, #0]
 8004a9e:	6a21      	ldr	r1, [r4, #32]
 8004aa0:	602b      	str	r3, [r5, #0]
 8004aa2:	d030      	beq.n	8004b06 <__sflush_r+0x92>
 8004aa4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8004aa6:	89a3      	ldrh	r3, [r4, #12]
 8004aa8:	0759      	lsls	r1, r3, #29
 8004aaa:	d505      	bpl.n	8004ab8 <__sflush_r+0x44>
 8004aac:	6863      	ldr	r3, [r4, #4]
 8004aae:	1ad2      	subs	r2, r2, r3
 8004ab0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8004ab2:	b10b      	cbz	r3, 8004ab8 <__sflush_r+0x44>
 8004ab4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004ab6:	1ad2      	subs	r2, r2, r3
 8004ab8:	2300      	movs	r3, #0
 8004aba:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004abc:	6a21      	ldr	r1, [r4, #32]
 8004abe:	4628      	mov	r0, r5
 8004ac0:	47b0      	blx	r6
 8004ac2:	1c43      	adds	r3, r0, #1
 8004ac4:	89a3      	ldrh	r3, [r4, #12]
 8004ac6:	d106      	bne.n	8004ad6 <__sflush_r+0x62>
 8004ac8:	6829      	ldr	r1, [r5, #0]
 8004aca:	291d      	cmp	r1, #29
 8004acc:	d82b      	bhi.n	8004b26 <__sflush_r+0xb2>
 8004ace:	4a2a      	ldr	r2, [pc, #168]	@ (8004b78 <__sflush_r+0x104>)
 8004ad0:	410a      	asrs	r2, r1
 8004ad2:	07d6      	lsls	r6, r2, #31
 8004ad4:	d427      	bmi.n	8004b26 <__sflush_r+0xb2>
 8004ad6:	2200      	movs	r2, #0
 8004ad8:	6062      	str	r2, [r4, #4]
 8004ada:	04d9      	lsls	r1, r3, #19
 8004adc:	6922      	ldr	r2, [r4, #16]
 8004ade:	6022      	str	r2, [r4, #0]
 8004ae0:	d504      	bpl.n	8004aec <__sflush_r+0x78>
 8004ae2:	1c42      	adds	r2, r0, #1
 8004ae4:	d101      	bne.n	8004aea <__sflush_r+0x76>
 8004ae6:	682b      	ldr	r3, [r5, #0]
 8004ae8:	b903      	cbnz	r3, 8004aec <__sflush_r+0x78>
 8004aea:	6560      	str	r0, [r4, #84]	@ 0x54
 8004aec:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004aee:	602f      	str	r7, [r5, #0]
 8004af0:	b1b9      	cbz	r1, 8004b22 <__sflush_r+0xae>
 8004af2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004af6:	4299      	cmp	r1, r3
 8004af8:	d002      	beq.n	8004b00 <__sflush_r+0x8c>
 8004afa:	4628      	mov	r0, r5
 8004afc:	f7ff fbf2 	bl	80042e4 <_free_r>
 8004b00:	2300      	movs	r3, #0
 8004b02:	6363      	str	r3, [r4, #52]	@ 0x34
 8004b04:	e00d      	b.n	8004b22 <__sflush_r+0xae>
 8004b06:	2301      	movs	r3, #1
 8004b08:	4628      	mov	r0, r5
 8004b0a:	47b0      	blx	r6
 8004b0c:	4602      	mov	r2, r0
 8004b0e:	1c50      	adds	r0, r2, #1
 8004b10:	d1c9      	bne.n	8004aa6 <__sflush_r+0x32>
 8004b12:	682b      	ldr	r3, [r5, #0]
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d0c6      	beq.n	8004aa6 <__sflush_r+0x32>
 8004b18:	2b1d      	cmp	r3, #29
 8004b1a:	d001      	beq.n	8004b20 <__sflush_r+0xac>
 8004b1c:	2b16      	cmp	r3, #22
 8004b1e:	d11e      	bne.n	8004b5e <__sflush_r+0xea>
 8004b20:	602f      	str	r7, [r5, #0]
 8004b22:	2000      	movs	r0, #0
 8004b24:	e022      	b.n	8004b6c <__sflush_r+0xf8>
 8004b26:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004b2a:	b21b      	sxth	r3, r3
 8004b2c:	e01b      	b.n	8004b66 <__sflush_r+0xf2>
 8004b2e:	690f      	ldr	r7, [r1, #16]
 8004b30:	2f00      	cmp	r7, #0
 8004b32:	d0f6      	beq.n	8004b22 <__sflush_r+0xae>
 8004b34:	0793      	lsls	r3, r2, #30
 8004b36:	680e      	ldr	r6, [r1, #0]
 8004b38:	bf08      	it	eq
 8004b3a:	694b      	ldreq	r3, [r1, #20]
 8004b3c:	600f      	str	r7, [r1, #0]
 8004b3e:	bf18      	it	ne
 8004b40:	2300      	movne	r3, #0
 8004b42:	eba6 0807 	sub.w	r8, r6, r7
 8004b46:	608b      	str	r3, [r1, #8]
 8004b48:	f1b8 0f00 	cmp.w	r8, #0
 8004b4c:	dde9      	ble.n	8004b22 <__sflush_r+0xae>
 8004b4e:	6a21      	ldr	r1, [r4, #32]
 8004b50:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8004b52:	4643      	mov	r3, r8
 8004b54:	463a      	mov	r2, r7
 8004b56:	4628      	mov	r0, r5
 8004b58:	47b0      	blx	r6
 8004b5a:	2800      	cmp	r0, #0
 8004b5c:	dc08      	bgt.n	8004b70 <__sflush_r+0xfc>
 8004b5e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004b62:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004b66:	81a3      	strh	r3, [r4, #12]
 8004b68:	f04f 30ff 	mov.w	r0, #4294967295
 8004b6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004b70:	4407      	add	r7, r0
 8004b72:	eba8 0800 	sub.w	r8, r8, r0
 8004b76:	e7e7      	b.n	8004b48 <__sflush_r+0xd4>
 8004b78:	dfbffffe 	.word	0xdfbffffe

08004b7c <_fflush_r>:
 8004b7c:	b538      	push	{r3, r4, r5, lr}
 8004b7e:	690b      	ldr	r3, [r1, #16]
 8004b80:	4605      	mov	r5, r0
 8004b82:	460c      	mov	r4, r1
 8004b84:	b913      	cbnz	r3, 8004b8c <_fflush_r+0x10>
 8004b86:	2500      	movs	r5, #0
 8004b88:	4628      	mov	r0, r5
 8004b8a:	bd38      	pop	{r3, r4, r5, pc}
 8004b8c:	b118      	cbz	r0, 8004b96 <_fflush_r+0x1a>
 8004b8e:	6a03      	ldr	r3, [r0, #32]
 8004b90:	b90b      	cbnz	r3, 8004b96 <_fflush_r+0x1a>
 8004b92:	f7ff fa9f 	bl	80040d4 <__sinit>
 8004b96:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d0f3      	beq.n	8004b86 <_fflush_r+0xa>
 8004b9e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004ba0:	07d0      	lsls	r0, r2, #31
 8004ba2:	d404      	bmi.n	8004bae <_fflush_r+0x32>
 8004ba4:	0599      	lsls	r1, r3, #22
 8004ba6:	d402      	bmi.n	8004bae <_fflush_r+0x32>
 8004ba8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004baa:	f7ff fb98 	bl	80042de <__retarget_lock_acquire_recursive>
 8004bae:	4628      	mov	r0, r5
 8004bb0:	4621      	mov	r1, r4
 8004bb2:	f7ff ff5f 	bl	8004a74 <__sflush_r>
 8004bb6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004bb8:	07da      	lsls	r2, r3, #31
 8004bba:	4605      	mov	r5, r0
 8004bbc:	d4e4      	bmi.n	8004b88 <_fflush_r+0xc>
 8004bbe:	89a3      	ldrh	r3, [r4, #12]
 8004bc0:	059b      	lsls	r3, r3, #22
 8004bc2:	d4e1      	bmi.n	8004b88 <_fflush_r+0xc>
 8004bc4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004bc6:	f7ff fb8b 	bl	80042e0 <__retarget_lock_release_recursive>
 8004bca:	e7dd      	b.n	8004b88 <_fflush_r+0xc>

08004bcc <__swbuf_r>:
 8004bcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bce:	460e      	mov	r6, r1
 8004bd0:	4614      	mov	r4, r2
 8004bd2:	4605      	mov	r5, r0
 8004bd4:	b118      	cbz	r0, 8004bde <__swbuf_r+0x12>
 8004bd6:	6a03      	ldr	r3, [r0, #32]
 8004bd8:	b90b      	cbnz	r3, 8004bde <__swbuf_r+0x12>
 8004bda:	f7ff fa7b 	bl	80040d4 <__sinit>
 8004bde:	69a3      	ldr	r3, [r4, #24]
 8004be0:	60a3      	str	r3, [r4, #8]
 8004be2:	89a3      	ldrh	r3, [r4, #12]
 8004be4:	071a      	lsls	r2, r3, #28
 8004be6:	d501      	bpl.n	8004bec <__swbuf_r+0x20>
 8004be8:	6923      	ldr	r3, [r4, #16]
 8004bea:	b943      	cbnz	r3, 8004bfe <__swbuf_r+0x32>
 8004bec:	4621      	mov	r1, r4
 8004bee:	4628      	mov	r0, r5
 8004bf0:	f000 f82a 	bl	8004c48 <__swsetup_r>
 8004bf4:	b118      	cbz	r0, 8004bfe <__swbuf_r+0x32>
 8004bf6:	f04f 37ff 	mov.w	r7, #4294967295
 8004bfa:	4638      	mov	r0, r7
 8004bfc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004bfe:	6823      	ldr	r3, [r4, #0]
 8004c00:	6922      	ldr	r2, [r4, #16]
 8004c02:	1a98      	subs	r0, r3, r2
 8004c04:	6963      	ldr	r3, [r4, #20]
 8004c06:	b2f6      	uxtb	r6, r6
 8004c08:	4283      	cmp	r3, r0
 8004c0a:	4637      	mov	r7, r6
 8004c0c:	dc05      	bgt.n	8004c1a <__swbuf_r+0x4e>
 8004c0e:	4621      	mov	r1, r4
 8004c10:	4628      	mov	r0, r5
 8004c12:	f7ff ffb3 	bl	8004b7c <_fflush_r>
 8004c16:	2800      	cmp	r0, #0
 8004c18:	d1ed      	bne.n	8004bf6 <__swbuf_r+0x2a>
 8004c1a:	68a3      	ldr	r3, [r4, #8]
 8004c1c:	3b01      	subs	r3, #1
 8004c1e:	60a3      	str	r3, [r4, #8]
 8004c20:	6823      	ldr	r3, [r4, #0]
 8004c22:	1c5a      	adds	r2, r3, #1
 8004c24:	6022      	str	r2, [r4, #0]
 8004c26:	701e      	strb	r6, [r3, #0]
 8004c28:	6962      	ldr	r2, [r4, #20]
 8004c2a:	1c43      	adds	r3, r0, #1
 8004c2c:	429a      	cmp	r2, r3
 8004c2e:	d004      	beq.n	8004c3a <__swbuf_r+0x6e>
 8004c30:	89a3      	ldrh	r3, [r4, #12]
 8004c32:	07db      	lsls	r3, r3, #31
 8004c34:	d5e1      	bpl.n	8004bfa <__swbuf_r+0x2e>
 8004c36:	2e0a      	cmp	r6, #10
 8004c38:	d1df      	bne.n	8004bfa <__swbuf_r+0x2e>
 8004c3a:	4621      	mov	r1, r4
 8004c3c:	4628      	mov	r0, r5
 8004c3e:	f7ff ff9d 	bl	8004b7c <_fflush_r>
 8004c42:	2800      	cmp	r0, #0
 8004c44:	d0d9      	beq.n	8004bfa <__swbuf_r+0x2e>
 8004c46:	e7d6      	b.n	8004bf6 <__swbuf_r+0x2a>

08004c48 <__swsetup_r>:
 8004c48:	b538      	push	{r3, r4, r5, lr}
 8004c4a:	4b29      	ldr	r3, [pc, #164]	@ (8004cf0 <__swsetup_r+0xa8>)
 8004c4c:	4605      	mov	r5, r0
 8004c4e:	6818      	ldr	r0, [r3, #0]
 8004c50:	460c      	mov	r4, r1
 8004c52:	b118      	cbz	r0, 8004c5c <__swsetup_r+0x14>
 8004c54:	6a03      	ldr	r3, [r0, #32]
 8004c56:	b90b      	cbnz	r3, 8004c5c <__swsetup_r+0x14>
 8004c58:	f7ff fa3c 	bl	80040d4 <__sinit>
 8004c5c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004c60:	0719      	lsls	r1, r3, #28
 8004c62:	d422      	bmi.n	8004caa <__swsetup_r+0x62>
 8004c64:	06da      	lsls	r2, r3, #27
 8004c66:	d407      	bmi.n	8004c78 <__swsetup_r+0x30>
 8004c68:	2209      	movs	r2, #9
 8004c6a:	602a      	str	r2, [r5, #0]
 8004c6c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004c70:	81a3      	strh	r3, [r4, #12]
 8004c72:	f04f 30ff 	mov.w	r0, #4294967295
 8004c76:	e033      	b.n	8004ce0 <__swsetup_r+0x98>
 8004c78:	0758      	lsls	r0, r3, #29
 8004c7a:	d512      	bpl.n	8004ca2 <__swsetup_r+0x5a>
 8004c7c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004c7e:	b141      	cbz	r1, 8004c92 <__swsetup_r+0x4a>
 8004c80:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004c84:	4299      	cmp	r1, r3
 8004c86:	d002      	beq.n	8004c8e <__swsetup_r+0x46>
 8004c88:	4628      	mov	r0, r5
 8004c8a:	f7ff fb2b 	bl	80042e4 <_free_r>
 8004c8e:	2300      	movs	r3, #0
 8004c90:	6363      	str	r3, [r4, #52]	@ 0x34
 8004c92:	89a3      	ldrh	r3, [r4, #12]
 8004c94:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8004c98:	81a3      	strh	r3, [r4, #12]
 8004c9a:	2300      	movs	r3, #0
 8004c9c:	6063      	str	r3, [r4, #4]
 8004c9e:	6923      	ldr	r3, [r4, #16]
 8004ca0:	6023      	str	r3, [r4, #0]
 8004ca2:	89a3      	ldrh	r3, [r4, #12]
 8004ca4:	f043 0308 	orr.w	r3, r3, #8
 8004ca8:	81a3      	strh	r3, [r4, #12]
 8004caa:	6923      	ldr	r3, [r4, #16]
 8004cac:	b94b      	cbnz	r3, 8004cc2 <__swsetup_r+0x7a>
 8004cae:	89a3      	ldrh	r3, [r4, #12]
 8004cb0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8004cb4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004cb8:	d003      	beq.n	8004cc2 <__swsetup_r+0x7a>
 8004cba:	4621      	mov	r1, r4
 8004cbc:	4628      	mov	r0, r5
 8004cbe:	f000 f84f 	bl	8004d60 <__smakebuf_r>
 8004cc2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004cc6:	f013 0201 	ands.w	r2, r3, #1
 8004cca:	d00a      	beq.n	8004ce2 <__swsetup_r+0x9a>
 8004ccc:	2200      	movs	r2, #0
 8004cce:	60a2      	str	r2, [r4, #8]
 8004cd0:	6962      	ldr	r2, [r4, #20]
 8004cd2:	4252      	negs	r2, r2
 8004cd4:	61a2      	str	r2, [r4, #24]
 8004cd6:	6922      	ldr	r2, [r4, #16]
 8004cd8:	b942      	cbnz	r2, 8004cec <__swsetup_r+0xa4>
 8004cda:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8004cde:	d1c5      	bne.n	8004c6c <__swsetup_r+0x24>
 8004ce0:	bd38      	pop	{r3, r4, r5, pc}
 8004ce2:	0799      	lsls	r1, r3, #30
 8004ce4:	bf58      	it	pl
 8004ce6:	6962      	ldrpl	r2, [r4, #20]
 8004ce8:	60a2      	str	r2, [r4, #8]
 8004cea:	e7f4      	b.n	8004cd6 <__swsetup_r+0x8e>
 8004cec:	2000      	movs	r0, #0
 8004cee:	e7f7      	b.n	8004ce0 <__swsetup_r+0x98>
 8004cf0:	24000038 	.word	0x24000038

08004cf4 <_sbrk_r>:
 8004cf4:	b538      	push	{r3, r4, r5, lr}
 8004cf6:	4d06      	ldr	r5, [pc, #24]	@ (8004d10 <_sbrk_r+0x1c>)
 8004cf8:	2300      	movs	r3, #0
 8004cfa:	4604      	mov	r4, r0
 8004cfc:	4608      	mov	r0, r1
 8004cfe:	602b      	str	r3, [r5, #0]
 8004d00:	f7fb ff1e 	bl	8000b40 <_sbrk>
 8004d04:	1c43      	adds	r3, r0, #1
 8004d06:	d102      	bne.n	8004d0e <_sbrk_r+0x1a>
 8004d08:	682b      	ldr	r3, [r5, #0]
 8004d0a:	b103      	cbz	r3, 8004d0e <_sbrk_r+0x1a>
 8004d0c:	6023      	str	r3, [r4, #0]
 8004d0e:	bd38      	pop	{r3, r4, r5, pc}
 8004d10:	2400029c 	.word	0x2400029c

08004d14 <__swhatbuf_r>:
 8004d14:	b570      	push	{r4, r5, r6, lr}
 8004d16:	460c      	mov	r4, r1
 8004d18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d1c:	2900      	cmp	r1, #0
 8004d1e:	b096      	sub	sp, #88	@ 0x58
 8004d20:	4615      	mov	r5, r2
 8004d22:	461e      	mov	r6, r3
 8004d24:	da0d      	bge.n	8004d42 <__swhatbuf_r+0x2e>
 8004d26:	89a3      	ldrh	r3, [r4, #12]
 8004d28:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8004d2c:	f04f 0100 	mov.w	r1, #0
 8004d30:	bf14      	ite	ne
 8004d32:	2340      	movne	r3, #64	@ 0x40
 8004d34:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8004d38:	2000      	movs	r0, #0
 8004d3a:	6031      	str	r1, [r6, #0]
 8004d3c:	602b      	str	r3, [r5, #0]
 8004d3e:	b016      	add	sp, #88	@ 0x58
 8004d40:	bd70      	pop	{r4, r5, r6, pc}
 8004d42:	466a      	mov	r2, sp
 8004d44:	f000 f848 	bl	8004dd8 <_fstat_r>
 8004d48:	2800      	cmp	r0, #0
 8004d4a:	dbec      	blt.n	8004d26 <__swhatbuf_r+0x12>
 8004d4c:	9901      	ldr	r1, [sp, #4]
 8004d4e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8004d52:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8004d56:	4259      	negs	r1, r3
 8004d58:	4159      	adcs	r1, r3
 8004d5a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004d5e:	e7eb      	b.n	8004d38 <__swhatbuf_r+0x24>

08004d60 <__smakebuf_r>:
 8004d60:	898b      	ldrh	r3, [r1, #12]
 8004d62:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004d64:	079d      	lsls	r5, r3, #30
 8004d66:	4606      	mov	r6, r0
 8004d68:	460c      	mov	r4, r1
 8004d6a:	d507      	bpl.n	8004d7c <__smakebuf_r+0x1c>
 8004d6c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8004d70:	6023      	str	r3, [r4, #0]
 8004d72:	6123      	str	r3, [r4, #16]
 8004d74:	2301      	movs	r3, #1
 8004d76:	6163      	str	r3, [r4, #20]
 8004d78:	b003      	add	sp, #12
 8004d7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004d7c:	ab01      	add	r3, sp, #4
 8004d7e:	466a      	mov	r2, sp
 8004d80:	f7ff ffc8 	bl	8004d14 <__swhatbuf_r>
 8004d84:	9f00      	ldr	r7, [sp, #0]
 8004d86:	4605      	mov	r5, r0
 8004d88:	4639      	mov	r1, r7
 8004d8a:	4630      	mov	r0, r6
 8004d8c:	f7ff fb16 	bl	80043bc <_malloc_r>
 8004d90:	b948      	cbnz	r0, 8004da6 <__smakebuf_r+0x46>
 8004d92:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004d96:	059a      	lsls	r2, r3, #22
 8004d98:	d4ee      	bmi.n	8004d78 <__smakebuf_r+0x18>
 8004d9a:	f023 0303 	bic.w	r3, r3, #3
 8004d9e:	f043 0302 	orr.w	r3, r3, #2
 8004da2:	81a3      	strh	r3, [r4, #12]
 8004da4:	e7e2      	b.n	8004d6c <__smakebuf_r+0xc>
 8004da6:	89a3      	ldrh	r3, [r4, #12]
 8004da8:	6020      	str	r0, [r4, #0]
 8004daa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004dae:	81a3      	strh	r3, [r4, #12]
 8004db0:	9b01      	ldr	r3, [sp, #4]
 8004db2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8004db6:	b15b      	cbz	r3, 8004dd0 <__smakebuf_r+0x70>
 8004db8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004dbc:	4630      	mov	r0, r6
 8004dbe:	f000 f81d 	bl	8004dfc <_isatty_r>
 8004dc2:	b128      	cbz	r0, 8004dd0 <__smakebuf_r+0x70>
 8004dc4:	89a3      	ldrh	r3, [r4, #12]
 8004dc6:	f023 0303 	bic.w	r3, r3, #3
 8004dca:	f043 0301 	orr.w	r3, r3, #1
 8004dce:	81a3      	strh	r3, [r4, #12]
 8004dd0:	89a3      	ldrh	r3, [r4, #12]
 8004dd2:	431d      	orrs	r5, r3
 8004dd4:	81a5      	strh	r5, [r4, #12]
 8004dd6:	e7cf      	b.n	8004d78 <__smakebuf_r+0x18>

08004dd8 <_fstat_r>:
 8004dd8:	b538      	push	{r3, r4, r5, lr}
 8004dda:	4d07      	ldr	r5, [pc, #28]	@ (8004df8 <_fstat_r+0x20>)
 8004ddc:	2300      	movs	r3, #0
 8004dde:	4604      	mov	r4, r0
 8004de0:	4608      	mov	r0, r1
 8004de2:	4611      	mov	r1, r2
 8004de4:	602b      	str	r3, [r5, #0]
 8004de6:	f7fb fe82 	bl	8000aee <_fstat>
 8004dea:	1c43      	adds	r3, r0, #1
 8004dec:	d102      	bne.n	8004df4 <_fstat_r+0x1c>
 8004dee:	682b      	ldr	r3, [r5, #0]
 8004df0:	b103      	cbz	r3, 8004df4 <_fstat_r+0x1c>
 8004df2:	6023      	str	r3, [r4, #0]
 8004df4:	bd38      	pop	{r3, r4, r5, pc}
 8004df6:	bf00      	nop
 8004df8:	2400029c 	.word	0x2400029c

08004dfc <_isatty_r>:
 8004dfc:	b538      	push	{r3, r4, r5, lr}
 8004dfe:	4d06      	ldr	r5, [pc, #24]	@ (8004e18 <_isatty_r+0x1c>)
 8004e00:	2300      	movs	r3, #0
 8004e02:	4604      	mov	r4, r0
 8004e04:	4608      	mov	r0, r1
 8004e06:	602b      	str	r3, [r5, #0]
 8004e08:	f7fb fe81 	bl	8000b0e <_isatty>
 8004e0c:	1c43      	adds	r3, r0, #1
 8004e0e:	d102      	bne.n	8004e16 <_isatty_r+0x1a>
 8004e10:	682b      	ldr	r3, [r5, #0]
 8004e12:	b103      	cbz	r3, 8004e16 <_isatty_r+0x1a>
 8004e14:	6023      	str	r3, [r4, #0]
 8004e16:	bd38      	pop	{r3, r4, r5, pc}
 8004e18:	2400029c 	.word	0x2400029c

08004e1c <_init>:
 8004e1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e1e:	bf00      	nop
 8004e20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e22:	bc08      	pop	{r3}
 8004e24:	469e      	mov	lr, r3
 8004e26:	4770      	bx	lr

08004e28 <_fini>:
 8004e28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e2a:	bf00      	nop
 8004e2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e2e:	bc08      	pop	{r3}
 8004e30:	469e      	mov	lr, r3
 8004e32:	4770      	bx	lr
